// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.12.4
// source: isochrone.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IsochroneMetricType int32

const (
	Isochrone_time     IsochroneMetricType = 0
	Isochrone_distance IsochroneMetricType = 1
)

// Enum value maps for IsochroneMetricType.
var (
	IsochroneMetricType_name = map[int32]string{
		0: "time",
		1: "distance",
	}
	IsochroneMetricType_value = map[string]int32{
		"time":     0,
		"distance": 1,
	}
)

func (x IsochroneMetricType) Enum() *IsochroneMetricType {
	p := new(IsochroneMetricType)
	*p = x
	return p
}

func (x IsochroneMetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsochroneMetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_isochrone_proto_enumTypes[0].Descriptor()
}

func (IsochroneMetricType) Type() protoreflect.EnumType {
	return &file_isochrone_proto_enumTypes[0]
}

func (x IsochroneMetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsochroneMetricType.Descriptor instead.
func (IsochroneMetricType) EnumDescriptor() ([]byte, []int) {
	return file_isochrone_proto_rawDescGZIP(), []int{0, 0}
}

type Isochrone struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Intervals     []*Isochrone_Interval  `protobuf:"bytes,1,rep,name=intervals,proto3" json:"intervals,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Isochrone) Reset() {
	*x = Isochrone{}
	mi := &file_isochrone_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Isochrone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Isochrone) ProtoMessage() {}

func (x *Isochrone) ProtoReflect() protoreflect.Message {
	mi := &file_isochrone_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Isochrone.ProtoReflect.Descriptor instead.
func (*Isochrone) Descriptor() ([]byte, []int) {
	return file_isochrone_proto_rawDescGZIP(), []int{0}
}

func (x *Isochrone) GetIntervals() []*Isochrone_Interval {
	if x != nil {
		return x.Intervals
	}
	return nil
}

type Isochrone_Geometry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Coords        []int32                `protobuf:"zigzag32,1,rep,packed,name=coords,proto3" json:"coords,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Isochrone_Geometry) Reset() {
	*x = Isochrone_Geometry{}
	mi := &file_isochrone_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Isochrone_Geometry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Isochrone_Geometry) ProtoMessage() {}

func (x *Isochrone_Geometry) ProtoReflect() protoreflect.Message {
	mi := &file_isochrone_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Isochrone_Geometry.ProtoReflect.Descriptor instead.
func (*Isochrone_Geometry) Descriptor() ([]byte, []int) {
	return file_isochrone_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Isochrone_Geometry) GetCoords() []int32 {
	if x != nil {
		return x.Coords
	}
	return nil
}

type Isochrone_Contour struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Geometries    []*Isochrone_Geometry  `protobuf:"bytes,2,rep,name=geometries,proto3" json:"geometries,omitempty"` // if polygon first one is outer rest are inners, though this is a problem when we allow multi location isochrones
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Isochrone_Contour) Reset() {
	*x = Isochrone_Contour{}
	mi := &file_isochrone_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Isochrone_Contour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Isochrone_Contour) ProtoMessage() {}

func (x *Isochrone_Contour) ProtoReflect() protoreflect.Message {
	mi := &file_isochrone_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Isochrone_Contour.ProtoReflect.Descriptor instead.
func (*Isochrone_Contour) Descriptor() ([]byte, []int) {
	return file_isochrone_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Isochrone_Contour) GetGeometries() []*Isochrone_Geometry {
	if x != nil {
		return x.Geometries
	}
	return nil
}

type Isochrone_Interval struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metric        IsochroneMetricType    `protobuf:"varint,1,opt,name=metric,proto3,enum=valhalla.IsochroneMetricType" json:"metric,omitempty"` // time or distance enum
	MetricValue   float32                `protobuf:"fixed32,2,opt,name=metric_value,json=metricValue,proto3" json:"metric_value,omitempty"`     // the target metric, eg 15min
	Contours      []*Isochrone_Contour   `protobuf:"bytes,3,rep,name=contours,proto3" json:"contours,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Isochrone_Interval) Reset() {
	*x = Isochrone_Interval{}
	mi := &file_isochrone_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Isochrone_Interval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Isochrone_Interval) ProtoMessage() {}

func (x *Isochrone_Interval) ProtoReflect() protoreflect.Message {
	mi := &file_isochrone_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Isochrone_Interval.ProtoReflect.Descriptor instead.
func (*Isochrone_Interval) Descriptor() ([]byte, []int) {
	return file_isochrone_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Isochrone_Interval) GetMetric() IsochroneMetricType {
	if x != nil {
		return x.Metric
	}
	return Isochrone_time
}

func (x *Isochrone_Interval) GetMetricValue() float32 {
	if x != nil {
		return x.MetricValue
	}
	return 0
}

func (x *Isochrone_Interval) GetContours() []*Isochrone_Contour {
	if x != nil {
		return x.Contours
	}
	return nil
}

var File_isochrone_proto protoreflect.FileDescriptor

const file_isochrone_proto_rawDesc = "" +
	"\n" +
	"\x0fisochrone.proto\x12\bvalhalla\"\x81\x03\n" +
	"\tIsochrone\x12:\n" +
	"\tintervals\x18\x01 \x03(\v2\x1c.valhalla.Isochrone.IntervalR\tintervals\x1a&\n" +
	"\bGeometry\x12\x1a\n" +
	"\x06coords\x18\x01 \x03(\x11B\x02\x10\x01R\x06coords\x1aG\n" +
	"\aContour\x12<\n" +
	"\n" +
	"geometries\x18\x02 \x03(\v2\x1c.valhalla.Isochrone.GeometryR\n" +
	"geometries\x1a\x9f\x01\n" +
	"\bInterval\x127\n" +
	"\x06metric\x18\x01 \x01(\x0e2\x1f.valhalla.Isochrone.metric_typeR\x06metric\x12!\n" +
	"\fmetric_value\x18\x02 \x01(\x02R\vmetricValue\x127\n" +
	"\bcontours\x18\x03 \x03(\v2\x1b.valhalla.Isochrone.ContourR\bcontours\"%\n" +
	"\vmetric_type\x12\b\n" +
	"\x04time\x10\x00\x12\f\n" +
	"\bdistance\x10\x01BIH\x03ZEmatching-engine/internal/adapter/routing-engine/valhalla/client/pb;pbb\x06proto3"

var (
	file_isochrone_proto_rawDescOnce sync.Once
	file_isochrone_proto_rawDescData []byte
)

func file_isochrone_proto_rawDescGZIP() []byte {
	file_isochrone_proto_rawDescOnce.Do(func() {
		file_isochrone_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_isochrone_proto_rawDesc), len(file_isochrone_proto_rawDesc)))
	})
	return file_isochrone_proto_rawDescData
}

var file_isochrone_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_isochrone_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_isochrone_proto_goTypes = []any{
	(IsochroneMetricType)(0),   // 0: valhalla.Isochrone.metric_type
	(*Isochrone)(nil),          // 1: valhalla.Isochrone
	(*Isochrone_Geometry)(nil), // 2: valhalla.Isochrone.Geometry
	(*Isochrone_Contour)(nil),  // 3: valhalla.Isochrone.Contour
	(*Isochrone_Interval)(nil), // 4: valhalla.Isochrone.Interval
}
var file_isochrone_proto_depIdxs = []int32{
	4, // 0: valhalla.Isochrone.intervals:type_name -> valhalla.Isochrone.Interval
	2, // 1: valhalla.Isochrone.Contour.geometries:type_name -> valhalla.Isochrone.Geometry
	0, // 2: valhalla.Isochrone.Interval.metric:type_name -> valhalla.Isochrone.metric_type
	3, // 3: valhalla.Isochrone.Interval.contours:type_name -> valhalla.Isochrone.Contour
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_isochrone_proto_init() }
func file_isochrone_proto_init() {
	if File_isochrone_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_isochrone_proto_rawDesc), len(file_isochrone_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_isochrone_proto_goTypes,
		DependencyIndexes: file_isochrone_proto_depIdxs,
		EnumInfos:         file_isochrone_proto_enumTypes,
		MessageInfos:      file_isochrone_proto_msgTypes,
	}.Build()
	File_isochrone_proto = out.File
	file_isochrone_proto_goTypes = nil
	file_isochrone_proto_depIdxs = nil
}
