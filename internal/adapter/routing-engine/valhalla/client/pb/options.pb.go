// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.12.4
// source: options.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ShapeMatch int32

const (
	ShapeMatch_walk_or_snap ShapeMatch = 0
	ShapeMatch_edge_walk    ShapeMatch = 1
	ShapeMatch_map_snap     ShapeMatch = 2
)

// Enum value maps for ShapeMatch.
var (
	ShapeMatch_name = map[int32]string{
		0: "walk_or_snap",
		1: "edge_walk",
		2: "map_snap",
	}
	ShapeMatch_value = map[string]int32{
		"walk_or_snap": 0,
		"edge_walk":    1,
		"map_snap":     2,
	}
)

func (x ShapeMatch) Enum() *ShapeMatch {
	p := new(ShapeMatch)
	*p = x
	return p
}

func (x ShapeMatch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShapeMatch) Descriptor() protoreflect.EnumDescriptor {
	return file_options_proto_enumTypes[0].Descriptor()
}

func (ShapeMatch) Type() protoreflect.EnumType {
	return &file_options_proto_enumTypes[0]
}

func (x ShapeMatch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShapeMatch.Descriptor instead.
func (ShapeMatch) EnumDescriptor() ([]byte, []int) {
	return file_options_proto_rawDescGZIP(), []int{0}
}

type FilterAction int32

const (
	FilterAction_no_action FilterAction = 0
	FilterAction_exclude   FilterAction = 1
	FilterAction_include   FilterAction = 2
)

// Enum value maps for FilterAction.
var (
	FilterAction_name = map[int32]string{
		0: "no_action",
		1: "exclude",
		2: "include",
	}
	FilterAction_value = map[string]int32{
		"no_action": 0,
		"exclude":   1,
		"include":   2,
	}
)

func (x FilterAction) Enum() *FilterAction {
	p := new(FilterAction)
	*p = x
	return p
}

func (x FilterAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterAction) Descriptor() protoreflect.EnumDescriptor {
	return file_options_proto_enumTypes[1].Descriptor()
}

func (FilterAction) Type() protoreflect.EnumType {
	return &file_options_proto_enumTypes[1]
}

func (x FilterAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterAction.Descriptor instead.
func (FilterAction) EnumDescriptor() ([]byte, []int) {
	return file_options_proto_rawDescGZIP(), []int{1}
}

type DirectionsType int32

const (
	DirectionsType_instructions DirectionsType = 0
	DirectionsType_none         DirectionsType = 1
	DirectionsType_maneuvers    DirectionsType = 2
)

// Enum value maps for DirectionsType.
var (
	DirectionsType_name = map[int32]string{
		0: "instructions",
		1: "none",
		2: "maneuvers",
	}
	DirectionsType_value = map[string]int32{
		"instructions": 0,
		"none":         1,
		"maneuvers":    2,
	}
)

func (x DirectionsType) Enum() *DirectionsType {
	p := new(DirectionsType)
	*p = x
	return p
}

func (x DirectionsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DirectionsType) Descriptor() protoreflect.EnumDescriptor {
	return file_options_proto_enumTypes[2].Descriptor()
}

func (DirectionsType) Type() protoreflect.EnumType {
	return &file_options_proto_enumTypes[2]
}

func (x DirectionsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DirectionsType.Descriptor instead.
func (DirectionsType) EnumDescriptor() ([]byte, []int) {
	return file_options_proto_rawDescGZIP(), []int{2}
}

type ShapeFormat int32

const (
	ShapeFormat_polyline6 ShapeFormat = 0
	ShapeFormat_polyline5 ShapeFormat = 1
	ShapeFormat_geojson   ShapeFormat = 2
	ShapeFormat_no_shape  ShapeFormat = 3 // to omit returning the geometry, e.g. default in matrix
)

// Enum value maps for ShapeFormat.
var (
	ShapeFormat_name = map[int32]string{
		0: "polyline6",
		1: "polyline5",
		2: "geojson",
		3: "no_shape",
	}
	ShapeFormat_value = map[string]int32{
		"polyline6": 0,
		"polyline5": 1,
		"geojson":   2,
		"no_shape":  3,
	}
)

func (x ShapeFormat) Enum() *ShapeFormat {
	p := new(ShapeFormat)
	*p = x
	return p
}

func (x ShapeFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShapeFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_options_proto_enumTypes[3].Descriptor()
}

func (ShapeFormat) Type() protoreflect.EnumType {
	return &file_options_proto_enumTypes[3]
}

func (x ShapeFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShapeFormat.Descriptor instead.
func (ShapeFormat) EnumDescriptor() ([]byte, []int) {
	return file_options_proto_rawDescGZIP(), []int{3}
}

type Costing_Type int32

const (
	Costing_none_         Costing_Type = 0
	Costing_bicycle       Costing_Type = 1
	Costing_bus           Costing_Type = 2
	Costing_motor_scooter Costing_Type = 3
	Costing_multimodal    Costing_Type = 4 // turns into pedestrian + transit
	Costing_pedestrian    Costing_Type = 5
	Costing_transit       Costing_Type = 6
	Costing_truck         Costing_Type = 7
	Costing_motorcycle    Costing_Type = 8
	Costing_taxi          Costing_Type = 9
	Costing_auto_         Costing_Type = 10
	Costing_bikeshare     Costing_Type = 11 // turns into pedestrian + bike
)

// Enum value maps for Costing_Type.
var (
	Costing_Type_name = map[int32]string{
		0:  "none_",
		1:  "bicycle",
		2:  "bus",
		3:  "motor_scooter",
		4:  "multimodal",
		5:  "pedestrian",
		6:  "transit",
		7:  "truck",
		8:  "motorcycle",
		9:  "taxi",
		10: "auto_",
		11: "bikeshare",
	}
	Costing_Type_value = map[string]int32{
		"none_":         0,
		"bicycle":       1,
		"bus":           2,
		"motor_scooter": 3,
		"multimodal":    4,
		"pedestrian":    5,
		"transit":       6,
		"truck":         7,
		"motorcycle":    8,
		"taxi":          9,
		"auto_":         10,
		"bikeshare":     11,
	}
)

func (x Costing_Type) Enum() *Costing_Type {
	p := new(Costing_Type)
	*p = x
	return p
}

func (x Costing_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Costing_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_options_proto_enumTypes[4].Descriptor()
}

func (Costing_Type) Type() protoreflect.EnumType {
	return &file_options_proto_enumTypes[4]
}

func (x Costing_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Costing_Type.Descriptor instead.
func (Costing_Type) EnumDescriptor() ([]byte, []int) {
	return file_options_proto_rawDescGZIP(), []int{5, 0}
}

type Options_Units int32

const (
	Options_kilometers Options_Units = 0
	Options_miles      Options_Units = 1
)

// Enum value maps for Options_Units.
var (
	Options_Units_name = map[int32]string{
		0: "kilometers",
		1: "miles",
	}
	Options_Units_value = map[string]int32{
		"kilometers": 0,
		"miles":      1,
	}
)

func (x Options_Units) Enum() *Options_Units {
	p := new(Options_Units)
	*p = x
	return p
}

func (x Options_Units) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Options_Units) Descriptor() protoreflect.EnumDescriptor {
	return file_options_proto_enumTypes[5].Descriptor()
}

func (Options_Units) Type() protoreflect.EnumType {
	return &file_options_proto_enumTypes[5]
}

func (x Options_Units) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Options_Units.Descriptor instead.
func (Options_Units) EnumDescriptor() ([]byte, []int) {
	return file_options_proto_rawDescGZIP(), []int{6, 0}
}

type Options_Format int32

const (
	Options_json    Options_Format = 0
	Options_gpx     Options_Format = 1
	Options_osrm    Options_Format = 2
	Options_pbf     Options_Format = 3
	Options_geotiff Options_Format = 4
)

// Enum value maps for Options_Format.
var (
	Options_Format_name = map[int32]string{
		0: "json",
		1: "gpx",
		2: "osrm",
		3: "pbf",
		4: "geotiff",
	}
	Options_Format_value = map[string]int32{
		"json":    0,
		"gpx":     1,
		"osrm":    2,
		"pbf":     3,
		"geotiff": 4,
	}
)

func (x Options_Format) Enum() *Options_Format {
	p := new(Options_Format)
	*p = x
	return p
}

func (x Options_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Options_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_options_proto_enumTypes[6].Descriptor()
}

func (Options_Format) Type() protoreflect.EnumType {
	return &file_options_proto_enumTypes[6]
}

func (x Options_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Options_Format.Descriptor instead.
func (Options_Format) EnumDescriptor() ([]byte, []int) {
	return file_options_proto_rawDescGZIP(), []int{6, 1}
}

type Options_Action int32

const (
	Options_no_action          Options_Action = 0
	Options_route              Options_Action = 1
	Options_locate             Options_Action = 2
	Options_sources_to_targets Options_Action = 3
	Options_optimized_route    Options_Action = 4
	Options_isochrone          Options_Action = 5
	Options_trace_route        Options_Action = 6
	Options_trace_attributes   Options_Action = 7
	Options_height             Options_Action = 8
	Options_transit_available  Options_Action = 9
	Options_expansion          Options_Action = 10
	Options_centroid           Options_Action = 11
	Options_status             Options_Action = 12
)

// Enum value maps for Options_Action.
var (
	Options_Action_name = map[int32]string{
		0:  "no_action",
		1:  "route",
		2:  "locate",
		3:  "sources_to_targets",
		4:  "optimized_route",
		5:  "isochrone",
		6:  "trace_route",
		7:  "trace_attributes",
		8:  "height",
		9:  "transit_available",
		10: "expansion",
		11: "centroid",
		12: "status",
	}
	Options_Action_value = map[string]int32{
		"no_action":          0,
		"route":              1,
		"locate":             2,
		"sources_to_targets": 3,
		"optimized_route":    4,
		"isochrone":          5,
		"trace_route":        6,
		"trace_attributes":   7,
		"height":             8,
		"transit_available":  9,
		"expansion":          10,
		"centroid":           11,
		"status":             12,
	}
)

func (x Options_Action) Enum() *Options_Action {
	p := new(Options_Action)
	*p = x
	return p
}

func (x Options_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Options_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_options_proto_enumTypes[7].Descriptor()
}

func (Options_Action) Type() protoreflect.EnumType {
	return &file_options_proto_enumTypes[7]
}

func (x Options_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Options_Action.Descriptor instead.
func (Options_Action) EnumDescriptor() ([]byte, []int) {
	return file_options_proto_rawDescGZIP(), []int{6, 2}
}

type Options_DateTimeType int32

const (
	Options_no_time   Options_DateTimeType = 0
	Options_current   Options_DateTimeType = 1
	Options_depart_at Options_DateTimeType = 2
	Options_arrive_by Options_DateTimeType = 3
	Options_invariant Options_DateTimeType = 4
)

// Enum value maps for Options_DateTimeType.
var (
	Options_DateTimeType_name = map[int32]string{
		0: "no_time",
		1: "current",
		2: "depart_at",
		3: "arrive_by",
		4: "invariant",
	}
	Options_DateTimeType_value = map[string]int32{
		"no_time":   0,
		"current":   1,
		"depart_at": 2,
		"arrive_by": 3,
		"invariant": 4,
	}
)

func (x Options_DateTimeType) Enum() *Options_DateTimeType {
	p := new(Options_DateTimeType)
	*p = x
	return p
}

func (x Options_DateTimeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Options_DateTimeType) Descriptor() protoreflect.EnumDescriptor {
	return file_options_proto_enumTypes[8].Descriptor()
}

func (Options_DateTimeType) Type() protoreflect.EnumType {
	return &file_options_proto_enumTypes[8]
}

func (x Options_DateTimeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Options_DateTimeType.Descriptor instead.
func (Options_DateTimeType) EnumDescriptor() ([]byte, []int) {
	return file_options_proto_rawDescGZIP(), []int{6, 3}
}

type Options_ExpansionProperties int32

const (
	Options_cost           Options_ExpansionProperties = 0
	Options_duration       Options_ExpansionProperties = 1
	Options_distance       Options_ExpansionProperties = 2
	Options_edge_status    Options_ExpansionProperties = 3
	Options_edge_id        Options_ExpansionProperties = 4
	Options_pred_edge_id   Options_ExpansionProperties = 5
	Options_expansion_type Options_ExpansionProperties = 6
)

// Enum value maps for Options_ExpansionProperties.
var (
	Options_ExpansionProperties_name = map[int32]string{
		0: "cost",
		1: "duration",
		2: "distance",
		3: "edge_status",
		4: "edge_id",
		5: "pred_edge_id",
		6: "expansion_type",
	}
	Options_ExpansionProperties_value = map[string]int32{
		"cost":           0,
		"duration":       1,
		"distance":       2,
		"edge_status":    3,
		"edge_id":        4,
		"pred_edge_id":   5,
		"expansion_type": 6,
	}
)

func (x Options_ExpansionProperties) Enum() *Options_ExpansionProperties {
	p := new(Options_ExpansionProperties)
	*p = x
	return p
}

func (x Options_ExpansionProperties) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Options_ExpansionProperties) Descriptor() protoreflect.EnumDescriptor {
	return file_options_proto_enumTypes[9].Descriptor()
}

func (Options_ExpansionProperties) Type() protoreflect.EnumType {
	return &file_options_proto_enumTypes[9]
}

func (x Options_ExpansionProperties) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Options_ExpansionProperties.Descriptor instead.
func (Options_ExpansionProperties) EnumDescriptor() ([]byte, []int) {
	return file_options_proto_rawDescGZIP(), []int{6, 4}
}

type Contour struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to HasTime:
	//
	//	*Contour_Time
	HasTime isContour_HasTime `protobuf_oneof:"has_time"`
	// Types that are valid to be assigned to HasColor:
	//
	//	*Contour_Color
	HasColor isContour_HasColor `protobuf_oneof:"has_color"`
	// Types that are valid to be assigned to HasDistance:
	//
	//	*Contour_Distance
	HasDistance   isContour_HasDistance `protobuf_oneof:"has_distance"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Contour) Reset() {
	*x = Contour{}
	mi := &file_options_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Contour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contour) ProtoMessage() {}

func (x *Contour) ProtoReflect() protoreflect.Message {
	mi := &file_options_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contour.ProtoReflect.Descriptor instead.
func (*Contour) Descriptor() ([]byte, []int) {
	return file_options_proto_rawDescGZIP(), []int{0}
}

func (x *Contour) GetHasTime() isContour_HasTime {
	if x != nil {
		return x.HasTime
	}
	return nil
}

func (x *Contour) GetTime() float32 {
	if x != nil {
		if x, ok := x.HasTime.(*Contour_Time); ok {
			return x.Time
		}
	}
	return 0
}

func (x *Contour) GetHasColor() isContour_HasColor {
	if x != nil {
		return x.HasColor
	}
	return nil
}

func (x *Contour) GetColor() string {
	if x != nil {
		if x, ok := x.HasColor.(*Contour_Color); ok {
			return x.Color
		}
	}
	return ""
}

func (x *Contour) GetHasDistance() isContour_HasDistance {
	if x != nil {
		return x.HasDistance
	}
	return nil
}

func (x *Contour) GetDistance() float32 {
	if x != nil {
		if x, ok := x.HasDistance.(*Contour_Distance); ok {
			return x.Distance
		}
	}
	return 0
}

type isContour_HasTime interface {
	isContour_HasTime()
}

type Contour_Time struct {
	Time float32 `protobuf:"fixed32,1,opt,name=time,proto3,oneof"` // minutes
}

func (*Contour_Time) isContour_HasTime() {}

type isContour_HasColor interface {
	isContour_HasColor()
}

type Contour_Color struct {
	Color string `protobuf:"bytes,2,opt,name=color,proto3,oneof"` // hex color with out # - for example: "ff0000" for red
}

func (*Contour_Color) isContour_HasColor() {}

type isContour_HasDistance interface {
	isContour_HasDistance()
}

type Contour_Distance struct {
	Distance float32 `protobuf:"fixed32,3,opt,name=distance,proto3,oneof"` // kilometers
}

func (*Contour_Distance) isContour_HasDistance() {}

type Ring struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Coords        []*LatLng              `protobuf:"bytes,1,rep,name=coords,proto3" json:"coords,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ring) Reset() {
	*x = Ring{}
	mi := &file_options_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ring) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ring) ProtoMessage() {}

func (x *Ring) ProtoReflect() protoreflect.Message {
	mi := &file_options_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ring.ProtoReflect.Descriptor instead.
func (*Ring) Descriptor() ([]byte, []int) {
	return file_options_proto_rawDescGZIP(), []int{1}
}

func (x *Ring) GetCoords() []*LatLng {
	if x != nil {
		return x.Coords
	}
	return nil
}

// use this to select which top level fields should be present in the pbf output
// the actions below are marked for each field that would provide a minimal response
type PbfFieldSelector struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Options       bool                   `protobuf:"varint,1,opt,name=options,proto3" json:"options,omitempty"`
	Trip          bool                   `protobuf:"varint,2,opt,name=trip,proto3" json:"trip,omitempty"`             // /trace_attributes
	Directions    bool                   `protobuf:"varint,3,opt,name=directions,proto3" json:"directions,omitempty"` // /route /trace_route /optimized_route /centroid
	Status        bool                   `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`         // /status
	Matrix        bool                   `protobuf:"varint,5,opt,name=matrix,proto3" json:"matrix,omitempty"`         // sources_to_targets
	Isochrone     bool                   `protobuf:"varint,6,opt,name=isochrone,proto3" json:"isochrone,omitempty"`
	Expansion     bool                   `protobuf:"varint,9,opt,name=expansion,proto3" json:"expansion,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PbfFieldSelector) Reset() {
	*x = PbfFieldSelector{}
	mi := &file_options_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PbfFieldSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PbfFieldSelector) ProtoMessage() {}

func (x *PbfFieldSelector) ProtoReflect() protoreflect.Message {
	mi := &file_options_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PbfFieldSelector.ProtoReflect.Descriptor instead.
func (*PbfFieldSelector) Descriptor() ([]byte, []int) {
	return file_options_proto_rawDescGZIP(), []int{2}
}

func (x *PbfFieldSelector) GetOptions() bool {
	if x != nil {
		return x.Options
	}
	return false
}

func (x *PbfFieldSelector) GetTrip() bool {
	if x != nil {
		return x.Trip
	}
	return false
}

func (x *PbfFieldSelector) GetDirections() bool {
	if x != nil {
		return x.Directions
	}
	return false
}

func (x *PbfFieldSelector) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *PbfFieldSelector) GetMatrix() bool {
	if x != nil {
		return x.Matrix
	}
	return false
}

func (x *PbfFieldSelector) GetIsochrone() bool {
	if x != nil {
		return x.Isochrone
	}
	return false
}

func (x *PbfFieldSelector) GetExpansion() bool {
	if x != nil {
		return x.Expansion
	}
	return false
}

type AvoidEdge struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to HasId:
	//
	//	*AvoidEdge_Id
	HasId isAvoidEdge_HasId `protobuf_oneof:"has_id"`
	// Types that are valid to be assigned to HasPercentAlong:
	//
	//	*AvoidEdge_PercentAlong
	HasPercentAlong isAvoidEdge_HasPercentAlong `protobuf_oneof:"has_percent_along"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AvoidEdge) Reset() {
	*x = AvoidEdge{}
	mi := &file_options_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AvoidEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvoidEdge) ProtoMessage() {}

func (x *AvoidEdge) ProtoReflect() protoreflect.Message {
	mi := &file_options_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvoidEdge.ProtoReflect.Descriptor instead.
func (*AvoidEdge) Descriptor() ([]byte, []int) {
	return file_options_proto_rawDescGZIP(), []int{3}
}

func (x *AvoidEdge) GetHasId() isAvoidEdge_HasId {
	if x != nil {
		return x.HasId
	}
	return nil
}

func (x *AvoidEdge) GetId() uint64 {
	if x != nil {
		if x, ok := x.HasId.(*AvoidEdge_Id); ok {
			return x.Id
		}
	}
	return 0
}

func (x *AvoidEdge) GetHasPercentAlong() isAvoidEdge_HasPercentAlong {
	if x != nil {
		return x.HasPercentAlong
	}
	return nil
}

func (x *AvoidEdge) GetPercentAlong() float32 {
	if x != nil {
		if x, ok := x.HasPercentAlong.(*AvoidEdge_PercentAlong); ok {
			return x.PercentAlong
		}
	}
	return 0
}

type isAvoidEdge_HasId interface {
	isAvoidEdge_HasId()
}

type AvoidEdge_Id struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

func (*AvoidEdge_Id) isAvoidEdge_HasId() {}

type isAvoidEdge_HasPercentAlong interface {
	isAvoidEdge_HasPercentAlong()
}

type AvoidEdge_PercentAlong struct {
	PercentAlong float32 `protobuf:"fixed32,2,opt,name=percent_along,json=percentAlong,proto3,oneof"`
}

func (*AvoidEdge_PercentAlong) isAvoidEdge_HasPercentAlong() {}

// *
// Hierarchy limits controls expansion and transitions between hierarchy
// levels. It allows limiting expansion on hierarchy levels once
// some number of "upward" transitions have been made (e.g. from the local
// level to the arterial level). Expansion on a level is allowed within some
// distance from the destination location. This also allows control of where
// upward and downward transitions are allowed based on distance from the
// destination.
type HierarchyLimits struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	UpTransitionCount uint32                 `protobuf:"varint,1,opt,name=up_transition_count,json=upTransitionCount,proto3" json:"up_transition_count,omitempty"` // Keep track of # of upward transitions
	// Internal use only, remember to clear on incoming requests
	MaxUpTransitions uint32 `protobuf:"varint,2,opt,name=max_up_transitions,json=maxUpTransitions,proto3" json:"max_up_transitions,omitempty"` // Maximum number of upward transitions before
	// expansion is stopped on a level.
	ExpandWithinDist float32 `protobuf:"fixed32,3,opt,name=expand_within_dist,json=expandWithinDist,proto3" json:"expand_within_dist,omitempty"` // Distance (m) to destination within which
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *HierarchyLimits) Reset() {
	*x = HierarchyLimits{}
	mi := &file_options_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HierarchyLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HierarchyLimits) ProtoMessage() {}

func (x *HierarchyLimits) ProtoReflect() protoreflect.Message {
	mi := &file_options_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HierarchyLimits.ProtoReflect.Descriptor instead.
func (*HierarchyLimits) Descriptor() ([]byte, []int) {
	return file_options_proto_rawDescGZIP(), []int{4}
}

func (x *HierarchyLimits) GetUpTransitionCount() uint32 {
	if x != nil {
		return x.UpTransitionCount
	}
	return 0
}

func (x *HierarchyLimits) GetMaxUpTransitions() uint32 {
	if x != nil {
		return x.MaxUpTransitions
	}
	return 0
}

func (x *HierarchyLimits) GetExpandWithinDist() float32 {
	if x != nil {
		return x.ExpandWithinDist
	}
	return 0
}

type Costing struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to HasOptions:
	//
	//	*Costing_Options_
	HasOptions isCosting_HasOptions `protobuf_oneof:"has_options"`
	Type       Costing_Type         `protobuf:"varint,2,opt,name=type,proto3,enum=valhalla.Costing_Type" json:"type,omitempty"`
	// Types that are valid to be assigned to HasName:
	//
	//	*Costing_Name
	HasName isCosting_HasName `protobuf_oneof:"has_name"`
	// this is used internally only, setting it in your request will have no effect
	//
	// Types that are valid to be assigned to HasFilterClosures:
	//
	//	*Costing_FilterClosures
	HasFilterClosures isCosting_HasFilterClosures `protobuf_oneof:"has_filter_closures"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Costing) Reset() {
	*x = Costing{}
	mi := &file_options_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Costing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Costing) ProtoMessage() {}

func (x *Costing) ProtoReflect() protoreflect.Message {
	mi := &file_options_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Costing.ProtoReflect.Descriptor instead.
func (*Costing) Descriptor() ([]byte, []int) {
	return file_options_proto_rawDescGZIP(), []int{5}
}

func (x *Costing) GetHasOptions() isCosting_HasOptions {
	if x != nil {
		return x.HasOptions
	}
	return nil
}

func (x *Costing) GetOptions() *Costing_Options {
	if x != nil {
		if x, ok := x.HasOptions.(*Costing_Options_); ok {
			return x.Options
		}
	}
	return nil
}

func (x *Costing) GetType() Costing_Type {
	if x != nil {
		return x.Type
	}
	return Costing_none_
}

func (x *Costing) GetHasName() isCosting_HasName {
	if x != nil {
		return x.HasName
	}
	return nil
}

func (x *Costing) GetName() string {
	if x != nil {
		if x, ok := x.HasName.(*Costing_Name); ok {
			return x.Name
		}
	}
	return ""
}

func (x *Costing) GetHasFilterClosures() isCosting_HasFilterClosures {
	if x != nil {
		return x.HasFilterClosures
	}
	return nil
}

func (x *Costing) GetFilterClosures() bool {
	if x != nil {
		if x, ok := x.HasFilterClosures.(*Costing_FilterClosures); ok {
			return x.FilterClosures
		}
	}
	return false
}

type isCosting_HasOptions interface {
	isCosting_HasOptions()
}

type Costing_Options_ struct {
	Options *Costing_Options `protobuf:"bytes,1,opt,name=options,proto3,oneof"`
}

func (*Costing_Options_) isCosting_HasOptions() {}

type isCosting_HasName interface {
	isCosting_HasName()
}

type Costing_Name struct {
	Name string `protobuf:"bytes,3,opt,name=name,proto3,oneof"`
}

func (*Costing_Name) isCosting_HasName() {}

type isCosting_HasFilterClosures interface {
	isCosting_HasFilterClosures()
}

type Costing_FilterClosures struct {
	FilterClosures bool `protobuf:"varint,4,opt,name=filter_closures,json=filterClosures,proto3,oneof"`
}

func (*Costing_FilterClosures) isCosting_HasFilterClosures() {}

type Options struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Units Options_Units          `protobuf:"varint,1,opt,name=units,proto3,enum=valhalla.Options_Units" json:"units,omitempty"` // kilometers or miles
	// Types that are valid to be assigned to HasLanguage:
	//
	//	*Options_Language
	HasLanguage    isOptions_HasLanguage `protobuf_oneof:"has_language"`
	DirectionsType DirectionsType        `protobuf:"varint,3,opt,name=directions_type,json=directionsType,proto3,enum=valhalla.DirectionsType" json:"directions_type,omitempty"` // Enable/disable narrative production [default = instructions]
	Format         Options_Format        `protobuf:"varint,4,opt,name=format,proto3,enum=valhalla.Options_Format" json:"format,omitempty"`                                       // What the response format should be [default = json]
	// Types that are valid to be assigned to HasId:
	//
	//	*Options_Id
	HasId isOptions_HasId `protobuf_oneof:"has_id"`
	// Types that are valid to be assigned to HasJsonp:
	//
	//	*Options_Jsonp
	HasJsonp isOptions_HasJsonp `protobuf_oneof:"has_jsonp"`
	// Types that are valid to be assigned to HasEncodedPolyline:
	//
	//	*Options_EncodedPolyline
	HasEncodedPolyline isOptions_HasEncodedPolyline `protobuf_oneof:"has_encoded_polyline"`
	Action             Options_Action               `protobuf:"varint,8,opt,name=action,proto3,enum=valhalla.Options_Action" json:"action,omitempty"` // Action signifying the request type
	// deprecated = 9;
	//
	// Types that are valid to be assigned to HasRange:
	//
	//	*Options_Range
	HasRange isOptions_HasRange `protobuf_oneof:"has_range"`
	// verbose needs to stay oneof, so that matrix serializer can default to true
	//
	// Types that are valid to be assigned to HasVerbose:
	//
	//	*Options_Verbose
	HasVerbose       isOptions_HasVerbose `protobuf_oneof:"has_verbose"`
	CostingType      Costing_Type         `protobuf:"varint,12,opt,name=costing_type,json=costingType,proto3,enum=valhalla.Costing_Type" json:"costing_type,omitempty"`                       // The main costing to use with the action, in multimodal this is the first costing to use
	Costings         map[int32]*Costing   `protobuf:"bytes,13,rep,name=costings,proto3" json:"costings,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // A map of Costing.Type enum to its Costing object
	Locations        []*Location          `protobuf:"bytes,14,rep,name=locations,proto3" json:"locations,omitempty"`                                                                          // Locations for /route /optimized /locate /isochrone
	ExcludeLocations []*Location          `protobuf:"bytes,15,rep,name=exclude_locations,json=excludeLocations,proto3" json:"exclude_locations,omitempty"`                                    // Avoids for any costing
	Sources          []*Location          `protobuf:"bytes,16,rep,name=sources,proto3" json:"sources,omitempty"`                                                                              // Sources for /sources_to_targets
	Targets          []*Location          `protobuf:"bytes,17,rep,name=targets,proto3" json:"targets,omitempty"`                                                                              // Targets for /sources_to_targets
	DateTimeType     Options_DateTimeType `protobuf:"varint,18,opt,name=date_time_type,json=dateTimeType,proto3,enum=valhalla.Options_DateTimeType" json:"date_time_type,omitempty"`          // Are you leaving now or then or arriving then
	// Types that are valid to be assigned to HasDateTime:
	//
	//	*Options_DateTime
	HasDateTime isOptions_HasDateTime `protobuf_oneof:"has_date_time"`
	Shape       []*Location           `protobuf:"bytes,20,rep,name=shape,proto3" json:"shape,omitempty"` // Raw shape for map matching
	// Types that are valid to be assigned to HasResampleDistance:
	//
	//	*Options_ResampleDistance
	HasResampleDistance isOptions_HasResampleDistance `protobuf_oneof:"has_resample_distance"`
	Contours            []*Contour                    `protobuf:"bytes,22,rep,name=contours,proto3" json:"contours,omitempty"` // List of isochrone contours
	// Types that are valid to be assigned to HasPolygons:
	//
	//	*Options_Polygons
	HasPolygons isOptions_HasPolygons `protobuf_oneof:"has_polygons"`
	// Types that are valid to be assigned to HasDenoise:
	//
	//	*Options_Denoise
	HasDenoise isOptions_HasDenoise `protobuf_oneof:"has_denoise"`
	// Types that are valid to be assigned to HasGeneralize:
	//
	//	*Options_Generalize
	HasGeneralize isOptions_HasGeneralize `protobuf_oneof:"has_generalize"`
	// Types that are valid to be assigned to HasShowLocations:
	//
	//	*Options_ShowLocations
	HasShowLocations isOptions_HasShowLocations `protobuf_oneof:"has_show_locations"`
	Trace            []*Location                `protobuf:"bytes,27,rep,name=trace,proto3" json:"trace,omitempty"`                                                       // Trace points for map matching
	ShapeMatch       ShapeMatch                 `protobuf:"varint,28,opt,name=shape_match,json=shapeMatch,proto3,enum=valhalla.ShapeMatch" json:"shape_match,omitempty"` // The matching algorithm based on the type of input [default = walk_or_snap]
	// deprecated = 29;
	//
	// Types that are valid to be assigned to HasGpsAccuracy:
	//
	//	*Options_GpsAccuracy
	HasGpsAccuracy isOptions_HasGpsAccuracy `protobuf_oneof:"has_gps_accuracy"`
	// Types that are valid to be assigned to HasSearchRadius:
	//
	//	*Options_SearchRadius
	HasSearchRadius isOptions_HasSearchRadius `protobuf_oneof:"has_search_radius"`
	// Types that are valid to be assigned to HasTurnPenaltyFactor:
	//
	//	*Options_TurnPenaltyFactor
	HasTurnPenaltyFactor isOptions_HasTurnPenaltyFactor `protobuf_oneof:"has_turn_penalty_factor"`
	FilterAction         FilterAction                   `protobuf:"varint,33,opt,name=filter_action,json=filterAction,proto3,enum=valhalla.FilterAction" json:"filter_action,omitempty"` // The trace filter action - either exclude or include
	FilterAttributes     []string                       `protobuf:"bytes,34,rep,name=filter_attributes,json=filterAttributes,proto3" json:"filter_attributes,omitempty"`                 // The filter list for trace attributes
	// Types that are valid to be assigned to HasBreakageDistance:
	//
	//	*Options_BreakageDistance
	HasBreakageDistance isOptions_HasBreakageDistance `protobuf_oneof:"has_breakage_distance"`
	// Types that are valid to be assigned to HasUseTimestamps:
	//
	//	*Options_UseTimestamps
	HasUseTimestamps isOptions_HasUseTimestamps `protobuf_oneof:"has_use_timestamps"`
	// Types that are valid to be assigned to HasShapeFormat:
	//
	//	*Options_ShapeFormat
	HasShapeFormat isOptions_HasShapeFormat `protobuf_oneof:"has_shape_format"`
	// Types that are valid to be assigned to HasAlternates:
	//
	//	*Options_Alternates
	HasAlternates isOptions_HasAlternates `protobuf_oneof:"has_alternates"`
	// Types that are valid to be assigned to HasInterpolationDistance:
	//
	//	*Options_InterpolationDistance
	HasInterpolationDistance isOptions_HasInterpolationDistance `protobuf_oneof:"has_interpolation_distance"`
	// Types that are valid to be assigned to HasGuidanceViews:
	//
	//	*Options_GuidanceViews
	HasGuidanceViews isOptions_HasGuidanceViews `protobuf_oneof:"has_guidance_views"`
	// 42 is reserved
	//
	// Types that are valid to be assigned to HasHeightPrecision:
	//
	//	*Options_HeightPrecision
	HasHeightPrecision isOptions_HasHeightPrecision `protobuf_oneof:"has_height_precision"`
	// Types that are valid to be assigned to HasRoundaboutExits:
	//
	//	*Options_RoundaboutExits
	HasRoundaboutExits isOptions_HasRoundaboutExits `protobuf_oneof:"has_roundabout_exits"`
	// Types that are valid to be assigned to HasLinearReferences:
	//
	//	*Options_LinearReferences
	HasLinearReferences isOptions_HasLinearReferences `protobuf_oneof:"has_linear_references"`
	Recostings          []*Costing                    `protobuf:"bytes,46,rep,name=recostings,proto3" json:"recostings,omitempty"`                                  // CostingType options to use to recost a path after it has been found
	ExcludePolygons     []*Ring                       `protobuf:"bytes,47,rep,name=exclude_polygons,json=excludePolygons,proto3" json:"exclude_polygons,omitempty"` // Rings/polygons to exclude entire areas during path finding
	// Types that are valid to be assigned to HasPrioritizeBidirectional:
	//
	//	*Options_PrioritizeBidirectional
	HasPrioritizeBidirectional isOptions_HasPrioritizeBidirectional `protobuf_oneof:"has_prioritize_bidirectional"`
	// Types that are valid to be assigned to HasExpansionAction:
	//
	//	*Options_ExpansionAction
	HasExpansionAction isOptions_HasExpansionAction `protobuf_oneof:"has_expansion_action"`
	// Types that are valid to be assigned to HasSkipOpposites:
	//
	//	*Options_SkipOpposites
	HasSkipOpposites    isOptions_HasSkipOpposites    `protobuf_oneof:"has_skip_opposites"`
	ExpansionProperties []Options_ExpansionProperties `protobuf:"varint,51,rep,packed,name=expansion_properties,json=expansionProperties,proto3,enum=valhalla.Options_ExpansionProperties" json:"expansion_properties,omitempty"` // The array keys (ExpansionTypes enum) to return in the /expansions's GeoJSON "properties"
	PbfFieldSelector    *PbfFieldSelector             `protobuf:"bytes,52,opt,name=pbf_field_selector,json=pbfFieldSelector,proto3" json:"pbf_field_selector,omitempty"`                                                          // Which pbf fields to include in the pbf format response
	Reverse             bool                          `protobuf:"varint,53,opt,name=reverse,proto3" json:"reverse,omitempty"`                                                                                                     // should the isochrone expansion be done in the reverse direction, ignored for multimodal isochrones
	// Types that are valid to be assigned to HasMatrixLocations:
	//
	//	*Options_MatrixLocations
	HasMatrixLocations isOptions_HasMatrixLocations `protobuf_oneof:"has_matrix_locations"`
	// or when CostMatrix is the selected matrix mode.
	BannerInstructions bool    `protobuf:"varint,55,opt,name=banner_instructions,json=bannerInstructions,proto3" json:"banner_instructions,omitempty"` // Whether to return bannerInstructions in the OSRM serializer response
	ElevationInterval  float32 `protobuf:"fixed32,56,opt,name=elevation_interval,json=elevationInterval,proto3" json:"elevation_interval,omitempty"`   // Interval for sampling elevation along the route path.  [default = 0.0];
	VoiceInstructions  bool    `protobuf:"varint,57,opt,name=voice_instructions,json=voiceInstructions,proto3" json:"voice_instructions,omitempty"`    // Whether to return voiceInstructions in the OSRM serializer response
	Dedupe             bool    `protobuf:"varint,58,opt,name=dedupe,proto3" json:"dedupe,omitempty"`                                                   // Keep track of edges and override their properties during expansion,
	// ensuring that each edge appears in the output only once. [default = false]
	AdminCrossings bool `protobuf:"varint,59,opt,name=admin_crossings,json=adminCrossings,proto3" json:"admin_crossings,omitempty"` // Include administrative boundary crossings
	TurnLanes      bool `protobuf:"varint,60,opt,name=turn_lanes,json=turnLanes,proto3" json:"turn_lanes,omitempty"`                // Include turn lane information into Valhalla serializer response.
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Options) Reset() {
	*x = Options{}
	mi := &file_options_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Options) ProtoMessage() {}

func (x *Options) ProtoReflect() protoreflect.Message {
	mi := &file_options_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Options.ProtoReflect.Descriptor instead.
func (*Options) Descriptor() ([]byte, []int) {
	return file_options_proto_rawDescGZIP(), []int{6}
}

func (x *Options) GetUnits() Options_Units {
	if x != nil {
		return x.Units
	}
	return Options_kilometers
}

func (x *Options) GetHasLanguage() isOptions_HasLanguage {
	if x != nil {
		return x.HasLanguage
	}
	return nil
}

func (x *Options) GetLanguage() string {
	if x != nil {
		if x, ok := x.HasLanguage.(*Options_Language); ok {
			return x.Language
		}
	}
	return ""
}

func (x *Options) GetDirectionsType() DirectionsType {
	if x != nil {
		return x.DirectionsType
	}
	return DirectionsType_instructions
}

func (x *Options) GetFormat() Options_Format {
	if x != nil {
		return x.Format
	}
	return Options_json
}

func (x *Options) GetHasId() isOptions_HasId {
	if x != nil {
		return x.HasId
	}
	return nil
}

func (x *Options) GetId() string {
	if x != nil {
		if x, ok := x.HasId.(*Options_Id); ok {
			return x.Id
		}
	}
	return ""
}

func (x *Options) GetHasJsonp() isOptions_HasJsonp {
	if x != nil {
		return x.HasJsonp
	}
	return nil
}

func (x *Options) GetJsonp() string {
	if x != nil {
		if x, ok := x.HasJsonp.(*Options_Jsonp); ok {
			return x.Jsonp
		}
	}
	return ""
}

func (x *Options) GetHasEncodedPolyline() isOptions_HasEncodedPolyline {
	if x != nil {
		return x.HasEncodedPolyline
	}
	return nil
}

func (x *Options) GetEncodedPolyline() string {
	if x != nil {
		if x, ok := x.HasEncodedPolyline.(*Options_EncodedPolyline); ok {
			return x.EncodedPolyline
		}
	}
	return ""
}

func (x *Options) GetAction() Options_Action {
	if x != nil {
		return x.Action
	}
	return Options_no_action
}

func (x *Options) GetHasRange() isOptions_HasRange {
	if x != nil {
		return x.HasRange
	}
	return nil
}

func (x *Options) GetRange() bool {
	if x != nil {
		if x, ok := x.HasRange.(*Options_Range); ok {
			return x.Range
		}
	}
	return false
}

func (x *Options) GetHasVerbose() isOptions_HasVerbose {
	if x != nil {
		return x.HasVerbose
	}
	return nil
}

func (x *Options) GetVerbose() bool {
	if x != nil {
		if x, ok := x.HasVerbose.(*Options_Verbose); ok {
			return x.Verbose
		}
	}
	return false
}

func (x *Options) GetCostingType() Costing_Type {
	if x != nil {
		return x.CostingType
	}
	return Costing_none_
}

func (x *Options) GetCostings() map[int32]*Costing {
	if x != nil {
		return x.Costings
	}
	return nil
}

func (x *Options) GetLocations() []*Location {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *Options) GetExcludeLocations() []*Location {
	if x != nil {
		return x.ExcludeLocations
	}
	return nil
}

func (x *Options) GetSources() []*Location {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *Options) GetTargets() []*Location {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *Options) GetDateTimeType() Options_DateTimeType {
	if x != nil {
		return x.DateTimeType
	}
	return Options_no_time
}

func (x *Options) GetHasDateTime() isOptions_HasDateTime {
	if x != nil {
		return x.HasDateTime
	}
	return nil
}

func (x *Options) GetDateTime() string {
	if x != nil {
		if x, ok := x.HasDateTime.(*Options_DateTime); ok {
			return x.DateTime
		}
	}
	return ""
}

func (x *Options) GetShape() []*Location {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *Options) GetHasResampleDistance() isOptions_HasResampleDistance {
	if x != nil {
		return x.HasResampleDistance
	}
	return nil
}

func (x *Options) GetResampleDistance() float64 {
	if x != nil {
		if x, ok := x.HasResampleDistance.(*Options_ResampleDistance); ok {
			return x.ResampleDistance
		}
	}
	return 0
}

func (x *Options) GetContours() []*Contour {
	if x != nil {
		return x.Contours
	}
	return nil
}

func (x *Options) GetHasPolygons() isOptions_HasPolygons {
	if x != nil {
		return x.HasPolygons
	}
	return nil
}

func (x *Options) GetPolygons() bool {
	if x != nil {
		if x, ok := x.HasPolygons.(*Options_Polygons); ok {
			return x.Polygons
		}
	}
	return false
}

func (x *Options) GetHasDenoise() isOptions_HasDenoise {
	if x != nil {
		return x.HasDenoise
	}
	return nil
}

func (x *Options) GetDenoise() float32 {
	if x != nil {
		if x, ok := x.HasDenoise.(*Options_Denoise); ok {
			return x.Denoise
		}
	}
	return 0
}

func (x *Options) GetHasGeneralize() isOptions_HasGeneralize {
	if x != nil {
		return x.HasGeneralize
	}
	return nil
}

func (x *Options) GetGeneralize() float32 {
	if x != nil {
		if x, ok := x.HasGeneralize.(*Options_Generalize); ok {
			return x.Generalize
		}
	}
	return 0
}

func (x *Options) GetHasShowLocations() isOptions_HasShowLocations {
	if x != nil {
		return x.HasShowLocations
	}
	return nil
}

func (x *Options) GetShowLocations() bool {
	if x != nil {
		if x, ok := x.HasShowLocations.(*Options_ShowLocations); ok {
			return x.ShowLocations
		}
	}
	return false
}

func (x *Options) GetTrace() []*Location {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *Options) GetShapeMatch() ShapeMatch {
	if x != nil {
		return x.ShapeMatch
	}
	return ShapeMatch_walk_or_snap
}

func (x *Options) GetHasGpsAccuracy() isOptions_HasGpsAccuracy {
	if x != nil {
		return x.HasGpsAccuracy
	}
	return nil
}

func (x *Options) GetGpsAccuracy() float32 {
	if x != nil {
		if x, ok := x.HasGpsAccuracy.(*Options_GpsAccuracy); ok {
			return x.GpsAccuracy
		}
	}
	return 0
}

func (x *Options) GetHasSearchRadius() isOptions_HasSearchRadius {
	if x != nil {
		return x.HasSearchRadius
	}
	return nil
}

func (x *Options) GetSearchRadius() float32 {
	if x != nil {
		if x, ok := x.HasSearchRadius.(*Options_SearchRadius); ok {
			return x.SearchRadius
		}
	}
	return 0
}

func (x *Options) GetHasTurnPenaltyFactor() isOptions_HasTurnPenaltyFactor {
	if x != nil {
		return x.HasTurnPenaltyFactor
	}
	return nil
}

func (x *Options) GetTurnPenaltyFactor() float32 {
	if x != nil {
		if x, ok := x.HasTurnPenaltyFactor.(*Options_TurnPenaltyFactor); ok {
			return x.TurnPenaltyFactor
		}
	}
	return 0
}

func (x *Options) GetFilterAction() FilterAction {
	if x != nil {
		return x.FilterAction
	}
	return FilterAction_no_action
}

func (x *Options) GetFilterAttributes() []string {
	if x != nil {
		return x.FilterAttributes
	}
	return nil
}

func (x *Options) GetHasBreakageDistance() isOptions_HasBreakageDistance {
	if x != nil {
		return x.HasBreakageDistance
	}
	return nil
}

func (x *Options) GetBreakageDistance() float32 {
	if x != nil {
		if x, ok := x.HasBreakageDistance.(*Options_BreakageDistance); ok {
			return x.BreakageDistance
		}
	}
	return 0
}

func (x *Options) GetHasUseTimestamps() isOptions_HasUseTimestamps {
	if x != nil {
		return x.HasUseTimestamps
	}
	return nil
}

func (x *Options) GetUseTimestamps() bool {
	if x != nil {
		if x, ok := x.HasUseTimestamps.(*Options_UseTimestamps); ok {
			return x.UseTimestamps
		}
	}
	return false
}

func (x *Options) GetHasShapeFormat() isOptions_HasShapeFormat {
	if x != nil {
		return x.HasShapeFormat
	}
	return nil
}

func (x *Options) GetShapeFormat() ShapeFormat {
	if x != nil {
		if x, ok := x.HasShapeFormat.(*Options_ShapeFormat); ok {
			return x.ShapeFormat
		}
	}
	return ShapeFormat_polyline6
}

func (x *Options) GetHasAlternates() isOptions_HasAlternates {
	if x != nil {
		return x.HasAlternates
	}
	return nil
}

func (x *Options) GetAlternates() uint32 {
	if x != nil {
		if x, ok := x.HasAlternates.(*Options_Alternates); ok {
			return x.Alternates
		}
	}
	return 0
}

func (x *Options) GetHasInterpolationDistance() isOptions_HasInterpolationDistance {
	if x != nil {
		return x.HasInterpolationDistance
	}
	return nil
}

func (x *Options) GetInterpolationDistance() float32 {
	if x != nil {
		if x, ok := x.HasInterpolationDistance.(*Options_InterpolationDistance); ok {
			return x.InterpolationDistance
		}
	}
	return 0
}

func (x *Options) GetHasGuidanceViews() isOptions_HasGuidanceViews {
	if x != nil {
		return x.HasGuidanceViews
	}
	return nil
}

func (x *Options) GetGuidanceViews() bool {
	if x != nil {
		if x, ok := x.HasGuidanceViews.(*Options_GuidanceViews); ok {
			return x.GuidanceViews
		}
	}
	return false
}

func (x *Options) GetHasHeightPrecision() isOptions_HasHeightPrecision {
	if x != nil {
		return x.HasHeightPrecision
	}
	return nil
}

func (x *Options) GetHeightPrecision() uint32 {
	if x != nil {
		if x, ok := x.HasHeightPrecision.(*Options_HeightPrecision); ok {
			return x.HeightPrecision
		}
	}
	return 0
}

func (x *Options) GetHasRoundaboutExits() isOptions_HasRoundaboutExits {
	if x != nil {
		return x.HasRoundaboutExits
	}
	return nil
}

func (x *Options) GetRoundaboutExits() bool {
	if x != nil {
		if x, ok := x.HasRoundaboutExits.(*Options_RoundaboutExits); ok {
			return x.RoundaboutExits
		}
	}
	return false
}

func (x *Options) GetHasLinearReferences() isOptions_HasLinearReferences {
	if x != nil {
		return x.HasLinearReferences
	}
	return nil
}

func (x *Options) GetLinearReferences() bool {
	if x != nil {
		if x, ok := x.HasLinearReferences.(*Options_LinearReferences); ok {
			return x.LinearReferences
		}
	}
	return false
}

func (x *Options) GetRecostings() []*Costing {
	if x != nil {
		return x.Recostings
	}
	return nil
}

func (x *Options) GetExcludePolygons() []*Ring {
	if x != nil {
		return x.ExcludePolygons
	}
	return nil
}

func (x *Options) GetHasPrioritizeBidirectional() isOptions_HasPrioritizeBidirectional {
	if x != nil {
		return x.HasPrioritizeBidirectional
	}
	return nil
}

func (x *Options) GetPrioritizeBidirectional() bool {
	if x != nil {
		if x, ok := x.HasPrioritizeBidirectional.(*Options_PrioritizeBidirectional); ok {
			return x.PrioritizeBidirectional
		}
	}
	return false
}

func (x *Options) GetHasExpansionAction() isOptions_HasExpansionAction {
	if x != nil {
		return x.HasExpansionAction
	}
	return nil
}

func (x *Options) GetExpansionAction() Options_Action {
	if x != nil {
		if x, ok := x.HasExpansionAction.(*Options_ExpansionAction); ok {
			return x.ExpansionAction
		}
	}
	return Options_no_action
}

func (x *Options) GetHasSkipOpposites() isOptions_HasSkipOpposites {
	if x != nil {
		return x.HasSkipOpposites
	}
	return nil
}

func (x *Options) GetSkipOpposites() bool {
	if x != nil {
		if x, ok := x.HasSkipOpposites.(*Options_SkipOpposites); ok {
			return x.SkipOpposites
		}
	}
	return false
}

func (x *Options) GetExpansionProperties() []Options_ExpansionProperties {
	if x != nil {
		return x.ExpansionProperties
	}
	return nil
}

func (x *Options) GetPbfFieldSelector() *PbfFieldSelector {
	if x != nil {
		return x.PbfFieldSelector
	}
	return nil
}

func (x *Options) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *Options) GetHasMatrixLocations() isOptions_HasMatrixLocations {
	if x != nil {
		return x.HasMatrixLocations
	}
	return nil
}

func (x *Options) GetMatrixLocations() uint32 {
	if x != nil {
		if x, ok := x.HasMatrixLocations.(*Options_MatrixLocations); ok {
			return x.MatrixLocations
		}
	}
	return 0
}

func (x *Options) GetBannerInstructions() bool {
	if x != nil {
		return x.BannerInstructions
	}
	return false
}

func (x *Options) GetElevationInterval() float32 {
	if x != nil {
		return x.ElevationInterval
	}
	return 0
}

func (x *Options) GetVoiceInstructions() bool {
	if x != nil {
		return x.VoiceInstructions
	}
	return false
}

func (x *Options) GetDedupe() bool {
	if x != nil {
		return x.Dedupe
	}
	return false
}

func (x *Options) GetAdminCrossings() bool {
	if x != nil {
		return x.AdminCrossings
	}
	return false
}

func (x *Options) GetTurnLanes() bool {
	if x != nil {
		return x.TurnLanes
	}
	return false
}

type isOptions_HasLanguage interface {
	isOptions_HasLanguage()
}

type Options_Language struct {
	Language string `protobuf:"bytes,2,opt,name=language,proto3,oneof"` // Based on IETF BCP 47 language tag string [default = "en-US"]
}

func (*Options_Language) isOptions_HasLanguage() {}

type isOptions_HasId interface {
	isOptions_HasId()
}

type Options_Id struct {
	Id string `protobuf:"bytes,5,opt,name=id,proto3,oneof"` // id for the request
}

func (*Options_Id) isOptions_HasId() {}

type isOptions_HasJsonp interface {
	isOptions_HasJsonp()
}

type Options_Jsonp struct {
	Jsonp string `protobuf:"bytes,6,opt,name=jsonp,proto3,oneof"` // javascript callback for the request
}

func (*Options_Jsonp) isOptions_HasJsonp() {}

type isOptions_HasEncodedPolyline interface {
	isOptions_HasEncodedPolyline()
}

type Options_EncodedPolyline struct {
	EncodedPolyline string `protobuf:"bytes,7,opt,name=encoded_polyline,json=encodedPolyline,proto3,oneof"` // polyline 6 encoded shape used in /height /trace_*
}

func (*Options_EncodedPolyline) isOptions_HasEncodedPolyline() {}

type isOptions_HasRange interface {
	isOptions_HasRange()
}

type Options_Range struct {
	Range bool `protobuf:"varint,10,opt,name=range,proto3,oneof"` // Used in /height if the range between points should be serialized  [default = false]
}

func (*Options_Range) isOptions_HasRange() {}

type isOptions_HasVerbose interface {
	isOptions_HasVerbose()
}

type Options_Verbose struct {
	Verbose bool `protobuf:"varint,11,opt,name=verbose,proto3,oneof"` // Used in /locate & /status request to give back extensive information [default = false]
}

func (*Options_Verbose) isOptions_HasVerbose() {}

type isOptions_HasDateTime interface {
	isOptions_HasDateTime()
}

type Options_DateTime struct {
	DateTime string `protobuf:"bytes,19,opt,name=date_time,json=dateTime,proto3,oneof"` // And what day and time
}

func (*Options_DateTime) isOptions_HasDateTime() {}

type isOptions_HasResampleDistance interface {
	isOptions_HasResampleDistance()
}

type Options_ResampleDistance struct {
	ResampleDistance float64 `protobuf:"fixed64,21,opt,name=resample_distance,json=resampleDistance,proto3,oneof"` // Resampling shape at regular intervals
}

func (*Options_ResampleDistance) isOptions_HasResampleDistance() {}

type isOptions_HasPolygons interface {
	isOptions_HasPolygons()
}

type Options_Polygons struct {
	Polygons bool `protobuf:"varint,23,opt,name=polygons,proto3,oneof"` // Boolean value to determine whether to return geojson polygons or linestrings as the contours
}

func (*Options_Polygons) isOptions_HasPolygons() {}

type isOptions_HasDenoise interface {
	isOptions_HasDenoise()
}

type Options_Denoise struct {
	Denoise float32 `protobuf:"fixed32,24,opt,name=denoise,proto3,oneof"` // A floating point value from 0 to 1 which can be used to remove smaller contours (default 1.0)
}

func (*Options_Denoise) isOptions_HasDenoise() {}

type isOptions_HasGeneralize interface {
	isOptions_HasGeneralize()
}

type Options_Generalize struct {
	Generalize float32 `protobuf:"fixed32,25,opt,name=generalize,proto3,oneof"` // Meters used as the tolerance for Douglas-Peucker generalization
}

func (*Options_Generalize) isOptions_HasGeneralize() {}

type isOptions_HasShowLocations interface {
	isOptions_HasShowLocations()
}

type Options_ShowLocations struct {
	ShowLocations bool `protobuf:"varint,26,opt,name=show_locations,json=showLocations,proto3,oneof"` // Add original locations to the isochrone geojson response
}

func (*Options_ShowLocations) isOptions_HasShowLocations() {}

type isOptions_HasGpsAccuracy interface {
	isOptions_HasGpsAccuracy()
}

type Options_GpsAccuracy struct {
	GpsAccuracy float32 `protobuf:"fixed32,30,opt,name=gps_accuracy,json=gpsAccuracy,proto3,oneof"` // The gps accuracy associated with the supplied trace points
}

func (*Options_GpsAccuracy) isOptions_HasGpsAccuracy() {}

type isOptions_HasSearchRadius interface {
	isOptions_HasSearchRadius()
}

type Options_SearchRadius struct {
	SearchRadius float32 `protobuf:"fixed32,31,opt,name=search_radius,json=searchRadius,proto3,oneof"` // The search radius associated with the supplied trace points
}

func (*Options_SearchRadius) isOptions_HasSearchRadius() {}

type isOptions_HasTurnPenaltyFactor interface {
	isOptions_HasTurnPenaltyFactor()
}

type Options_TurnPenaltyFactor struct {
	TurnPenaltyFactor float32 `protobuf:"fixed32,32,opt,name=turn_penalty_factor,json=turnPenaltyFactor,proto3,oneof"` // The turn penalty factor associated with the supplied trace points
}

func (*Options_TurnPenaltyFactor) isOptions_HasTurnPenaltyFactor() {}

type isOptions_HasBreakageDistance interface {
	isOptions_HasBreakageDistance()
}

type Options_BreakageDistance struct {
	BreakageDistance float32 `protobuf:"fixed32,36,opt,name=breakage_distance,json=breakageDistance,proto3,oneof"` // Map-matching breaking distance (distance between GPS trace points)
}

func (*Options_BreakageDistance) isOptions_HasBreakageDistance() {}

type isOptions_HasUseTimestamps interface {
	isOptions_HasUseTimestamps()
}

type Options_UseTimestamps struct {
	UseTimestamps bool `protobuf:"varint,37,opt,name=use_timestamps,json=useTimestamps,proto3,oneof"` // Use timestamps to compute elapsed time for trace_route and trace_attributes [default = false]
}

func (*Options_UseTimestamps) isOptions_HasUseTimestamps() {}

type isOptions_HasShapeFormat interface {
	isOptions_HasShapeFormat()
}

type Options_ShapeFormat struct {
	ShapeFormat ShapeFormat `protobuf:"varint,38,opt,name=shape_format,json=shapeFormat,proto3,enum=valhalla.ShapeFormat,oneof"` // Shape format, defaults to polyline6 encoding for OSRM/height, and no_shape for matrix
}

func (*Options_ShapeFormat) isOptions_HasShapeFormat() {}

type isOptions_HasAlternates interface {
	isOptions_HasAlternates()
}

type Options_Alternates struct {
	Alternates uint32 `protobuf:"varint,39,opt,name=alternates,proto3,oneof"` // Maximum number of alternate routes that can be returned
}

func (*Options_Alternates) isOptions_HasAlternates() {}

type isOptions_HasInterpolationDistance interface {
	isOptions_HasInterpolationDistance()
}

type Options_InterpolationDistance struct {
	InterpolationDistance float32 `protobuf:"fixed32,40,opt,name=interpolation_distance,json=interpolationDistance,proto3,oneof"` // Map-matching interpolation distance beyond which trace points are merged
}

func (*Options_InterpolationDistance) isOptions_HasInterpolationDistance() {}

type isOptions_HasGuidanceViews interface {
	isOptions_HasGuidanceViews()
}

type Options_GuidanceViews struct {
	GuidanceViews bool `protobuf:"varint,41,opt,name=guidance_views,json=guidanceViews,proto3,oneof"` // Whether to return guidance_views in the response
}

func (*Options_GuidanceViews) isOptions_HasGuidanceViews() {}

type isOptions_HasHeightPrecision interface {
	isOptions_HasHeightPrecision()
}

type Options_HeightPrecision struct {
	HeightPrecision uint32 `protobuf:"varint,43,opt,name=height_precision,json=heightPrecision,proto3,oneof"` // Number of digits precision for heights returned [default = 0]
}

func (*Options_HeightPrecision) isOptions_HasHeightPrecision() {}

type isOptions_HasRoundaboutExits interface {
	isOptions_HasRoundaboutExits()
}

type Options_RoundaboutExits struct {
	RoundaboutExits bool `protobuf:"varint,44,opt,name=roundabout_exits,json=roundaboutExits,proto3,oneof"` // Whether to announce roundabout exit maneuvers [default = true]
}

func (*Options_RoundaboutExits) isOptions_HasRoundaboutExits() {}

type isOptions_HasLinearReferences interface {
	isOptions_HasLinearReferences()
}

type Options_LinearReferences struct {
	LinearReferences bool `protobuf:"varint,45,opt,name=linear_references,json=linearReferences,proto3,oneof"` // Include linear references for graph edges returned in certain responses.
}

func (*Options_LinearReferences) isOptions_HasLinearReferences() {}

type isOptions_HasPrioritizeBidirectional interface {
	isOptions_HasPrioritizeBidirectional()
}

type Options_PrioritizeBidirectional struct {
	PrioritizeBidirectional bool `protobuf:"varint,48,opt,name=prioritize_bidirectional,json=prioritizeBidirectional,proto3,oneof"` // Prioritize bidirectional a*/matrix when depart_at date_time.type is specified [default = false]
}

func (*Options_PrioritizeBidirectional) isOptions_HasPrioritizeBidirectional() {}

type isOptions_HasExpansionAction interface {
	isOptions_HasExpansionAction()
}

type Options_ExpansionAction struct {
	ExpansionAction Options_Action `protobuf:"varint,49,opt,name=expansion_action,json=expansionAction,proto3,enum=valhalla.Options_Action,oneof"` // Meta action for /expansion endpoint
}

func (*Options_ExpansionAction) isOptions_HasExpansionAction() {}

type isOptions_HasSkipOpposites interface {
	isOptions_HasSkipOpposites()
}

type Options_SkipOpposites struct {
	SkipOpposites bool `protobuf:"varint,50,opt,name=skip_opposites,json=skipOpposites,proto3,oneof"` // Whether to return opposite edges encountered during expansion
}

func (*Options_SkipOpposites) isOptions_HasSkipOpposites() {}

type isOptions_HasMatrixLocations interface {
	isOptions_HasMatrixLocations()
}

type Options_MatrixLocations struct {
	MatrixLocations uint32 `protobuf:"varint,54,opt,name=matrix_locations,json=matrixLocations,proto3,oneof"` // a one to many or many to one time distance matrix. Does not affect
}

func (*Options_MatrixLocations) isOptions_HasMatrixLocations() {}

type Costing_Options struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to HasManeuverPenalty:
	//
	//	*Costing_Options_ManeuverPenalty
	HasManeuverPenalty isCosting_Options_HasManeuverPenalty `protobuf_oneof:"has_maneuver_penalty"`
	// Types that are valid to be assigned to HasDestinationOnlyPenalty:
	//
	//	*Costing_Options_DestinationOnlyPenalty
	HasDestinationOnlyPenalty isCosting_Options_HasDestinationOnlyPenalty `protobuf_oneof:"has_destination_only_penalty"`
	// Types that are valid to be assigned to HasGateCost:
	//
	//	*Costing_Options_GateCost
	HasGateCost isCosting_Options_HasGateCost `protobuf_oneof:"has_gate_cost"`
	// Types that are valid to be assigned to HasGatePenalty:
	//
	//	*Costing_Options_GatePenalty
	HasGatePenalty isCosting_Options_HasGatePenalty `protobuf_oneof:"has_gate_penalty"`
	// Types that are valid to be assigned to HasTollBoothCost:
	//
	//	*Costing_Options_TollBoothCost
	HasTollBoothCost isCosting_Options_HasTollBoothCost `protobuf_oneof:"has_toll_booth_cost"`
	// Types that are valid to be assigned to HasTollBoothPenalty:
	//
	//	*Costing_Options_TollBoothPenalty
	HasTollBoothPenalty isCosting_Options_HasTollBoothPenalty `protobuf_oneof:"has_toll_booth_penalty"`
	// Types that are valid to be assigned to HasAlleyPenalty:
	//
	//	*Costing_Options_AlleyPenalty
	HasAlleyPenalty isCosting_Options_HasAlleyPenalty `protobuf_oneof:"has_alley_penalty"`
	// Types that are valid to be assigned to HasCountryCrossingCost:
	//
	//	*Costing_Options_CountryCrossingCost
	HasCountryCrossingCost isCosting_Options_HasCountryCrossingCost `protobuf_oneof:"has_country_crossing_cost"`
	// Types that are valid to be assigned to HasCountryCrossingPenalty:
	//
	//	*Costing_Options_CountryCrossingPenalty
	HasCountryCrossingPenalty isCosting_Options_HasCountryCrossingPenalty `protobuf_oneof:"has_country_crossing_penalty"`
	// Types that are valid to be assigned to HasFerryCost:
	//
	//	*Costing_Options_FerryCost
	HasFerryCost isCosting_Options_HasFerryCost `protobuf_oneof:"has_ferry_cost"`
	// Types that are valid to be assigned to HasAvoidBadSurfaces:
	//
	//	*Costing_Options_AvoidBadSurfaces
	HasAvoidBadSurfaces isCosting_Options_HasAvoidBadSurfaces `protobuf_oneof:"has_avoid_bad_surfaces"`
	// Types that are valid to be assigned to HasUseFerry:
	//
	//	*Costing_Options_UseFerry
	HasUseFerry isCosting_Options_HasUseFerry `protobuf_oneof:"has_use_ferry"`
	// Types that are valid to be assigned to HasUseHighways:
	//
	//	*Costing_Options_UseHighways
	HasUseHighways isCosting_Options_HasUseHighways `protobuf_oneof:"has_use_highways"`
	// Types that are valid to be assigned to HasUseTolls:
	//
	//	*Costing_Options_UseTolls
	HasUseTolls isCosting_Options_HasUseTolls `protobuf_oneof:"has_use_tolls"`
	// Types that are valid to be assigned to HasUseRoads:
	//
	//	*Costing_Options_UseRoads
	HasUseRoads isCosting_Options_HasUseRoads `protobuf_oneof:"has_use_roads"`
	// Types that are valid to be assigned to HasMaxDistance:
	//
	//	*Costing_Options_MaxDistance
	HasMaxDistance isCosting_Options_HasMaxDistance `protobuf_oneof:"has_max_distance"`
	// Types that are valid to be assigned to HasWalkingSpeed:
	//
	//	*Costing_Options_WalkingSpeed
	HasWalkingSpeed isCosting_Options_HasWalkingSpeed `protobuf_oneof:"has_walking_speed"`
	// Types that are valid to be assigned to HasStepPenalty:
	//
	//	*Costing_Options_StepPenalty
	HasStepPenalty isCosting_Options_HasStepPenalty `protobuf_oneof:"has_step_penalty"`
	// Types that are valid to be assigned to HasMaxGrade:
	//
	//	*Costing_Options_MaxGrade
	HasMaxGrade isCosting_Options_HasMaxGrade `protobuf_oneof:"has_max_grade"`
	// Types that are valid to be assigned to HasMaxHikingDifficulty:
	//
	//	*Costing_Options_MaxHikingDifficulty
	HasMaxHikingDifficulty isCosting_Options_HasMaxHikingDifficulty `protobuf_oneof:"has_max_hiking_difficulty"`
	// Types that are valid to be assigned to HasModeFactor:
	//
	//	*Costing_Options_ModeFactor
	HasModeFactor isCosting_Options_HasModeFactor `protobuf_oneof:"has_mode_factor"`
	// Types that are valid to be assigned to HasWalkwayFactor:
	//
	//	*Costing_Options_WalkwayFactor
	HasWalkwayFactor isCosting_Options_HasWalkwayFactor `protobuf_oneof:"has_walkway_factor"`
	// Types that are valid to be assigned to HasSidewalkFactor:
	//
	//	*Costing_Options_SidewalkFactor
	HasSidewalkFactor isCosting_Options_HasSidewalkFactor `protobuf_oneof:"has_sidewalk_factor"`
	// Types that are valid to be assigned to HasAlleyFactor:
	//
	//	*Costing_Options_AlleyFactor
	HasAlleyFactor isCosting_Options_HasAlleyFactor `protobuf_oneof:"has_alley_factor"`
	// Types that are valid to be assigned to HasDrivewayFactor:
	//
	//	*Costing_Options_DrivewayFactor
	HasDrivewayFactor isCosting_Options_HasDrivewayFactor `protobuf_oneof:"has_driveway_factor"`
	// Types that are valid to be assigned to HasDrivewayPenalty:
	//
	//	*Costing_Options_DrivewayPenalty
	HasDrivewayPenalty isCosting_Options_HasDrivewayPenalty `protobuf_oneof:"has_driveway_penalty"`
	// Types that are valid to be assigned to HasTransitStartEndMaxDistance:
	//
	//	*Costing_Options_TransitStartEndMaxDistance
	HasTransitStartEndMaxDistance isCosting_Options_HasTransitStartEndMaxDistance `protobuf_oneof:"has_transit_start_end_max_distance"`
	// Types that are valid to be assigned to HasTransitTransferMaxDistance:
	//
	//	*Costing_Options_TransitTransferMaxDistance
	HasTransitTransferMaxDistance isCosting_Options_HasTransitTransferMaxDistance `protobuf_oneof:"has_transit_transfer_max_distance"`
	// Types that are valid to be assigned to HasTransportType:
	//
	//	*Costing_Options_TransportType
	HasTransportType isCosting_Options_HasTransportType `protobuf_oneof:"has_transport_type"`
	// Types that are valid to be assigned to HasTopSpeed:
	//
	//	*Costing_Options_TopSpeed
	HasTopSpeed isCosting_Options_HasTopSpeed `protobuf_oneof:"has_top_speed"`
	// Types that are valid to be assigned to HasUseHills:
	//
	//	*Costing_Options_UseHills
	HasUseHills isCosting_Options_HasUseHills `protobuf_oneof:"has_use_hills"`
	// Types that are valid to be assigned to HasUsePrimary:
	//
	//	*Costing_Options_UsePrimary
	HasUsePrimary isCosting_Options_HasUsePrimary `protobuf_oneof:"has_use_primary"`
	// Types that are valid to be assigned to HasUseTrails:
	//
	//	*Costing_Options_UseTrails
	HasUseTrails isCosting_Options_HasUseTrails `protobuf_oneof:"has_use_trails"`
	// Types that are valid to be assigned to HasLowClassPenalty:
	//
	//	*Costing_Options_LowClassPenalty
	HasLowClassPenalty isCosting_Options_HasLowClassPenalty `protobuf_oneof:"has_low_class_penalty"`
	// Types that are valid to be assigned to HasHazmat:
	//
	//	*Costing_Options_Hazmat
	HasHazmat isCosting_Options_HasHazmat `protobuf_oneof:"has_hazmat"`
	// Types that are valid to be assigned to HasWeight:
	//
	//	*Costing_Options_Weight
	HasWeight isCosting_Options_HasWeight `protobuf_oneof:"has_weight"`
	// Types that are valid to be assigned to HasAxleLoad:
	//
	//	*Costing_Options_AxleLoad
	HasAxleLoad isCosting_Options_HasAxleLoad `protobuf_oneof:"has_axle_load"`
	// Types that are valid to be assigned to HasHeight:
	//
	//	*Costing_Options_Height
	HasHeight isCosting_Options_HasHeight `protobuf_oneof:"has_height"`
	// Types that are valid to be assigned to HasWidth:
	//
	//	*Costing_Options_Width
	HasWidth isCosting_Options_HasWidth `protobuf_oneof:"has_width"`
	// Types that are valid to be assigned to HasLength:
	//
	//	*Costing_Options_Length
	HasLength isCosting_Options_HasLength `protobuf_oneof:"has_length"`
	// Types that are valid to be assigned to HasCyclingSpeed:
	//
	//	*Costing_Options_CyclingSpeed
	HasCyclingSpeed isCosting_Options_HasCyclingSpeed `protobuf_oneof:"has_cycling_speed"`
	// Types that are valid to be assigned to HasWheelchair:
	//
	//	*Costing_Options_Wheelchair
	HasWheelchair isCosting_Options_HasWheelchair `protobuf_oneof:"has_wheelchair"`
	// Types that are valid to be assigned to HasBicycle:
	//
	//	*Costing_Options_Bicycle
	HasBicycle isCosting_Options_HasBicycle `protobuf_oneof:"has_bicycle"`
	// Types that are valid to be assigned to HasUseBus:
	//
	//	*Costing_Options_UseBus
	HasUseBus isCosting_Options_HasUseBus `protobuf_oneof:"has_use_bus"`
	// Types that are valid to be assigned to HasUseRail:
	//
	//	*Costing_Options_UseRail
	HasUseRail isCosting_Options_HasUseRail `protobuf_oneof:"has_use_rail"`
	// Types that are valid to be assigned to HasUseTransfers:
	//
	//	*Costing_Options_UseTransfers
	HasUseTransfers isCosting_Options_HasUseTransfers `protobuf_oneof:"has_use_transfers"`
	// Types that are valid to be assigned to HasTransferCost:
	//
	//	*Costing_Options_TransferCost
	HasTransferCost isCosting_Options_HasTransferCost `protobuf_oneof:"has_transfer_cost"`
	// Types that are valid to be assigned to HasTransferPenalty:
	//
	//	*Costing_Options_TransferPenalty
	HasTransferPenalty   isCosting_Options_HasTransferPenalty `protobuf_oneof:"has_transfer_penalty"`
	FilterStopAction     FilterAction                         `protobuf:"varint,49,opt,name=filter_stop_action,json=filterStopAction,proto3,enum=valhalla.FilterAction" json:"filter_stop_action,omitempty"`
	FilterStopIds        []string                             `protobuf:"bytes,50,rep,name=filter_stop_ids,json=filterStopIds,proto3" json:"filter_stop_ids,omitempty"`
	FilterOperatorAction FilterAction                         `protobuf:"varint,51,opt,name=filter_operator_action,json=filterOperatorAction,proto3,enum=valhalla.FilterAction" json:"filter_operator_action,omitempty"`
	FilterOperatorIds    []string                             `protobuf:"bytes,52,rep,name=filter_operator_ids,json=filterOperatorIds,proto3" json:"filter_operator_ids,omitempty"`
	FilterRouteAction    FilterAction                         `protobuf:"varint,53,opt,name=filter_route_action,json=filterRouteAction,proto3,enum=valhalla.FilterAction" json:"filter_route_action,omitempty"`
	FilterRouteIds       []string                             `protobuf:"bytes,54,rep,name=filter_route_ids,json=filterRouteIds,proto3" json:"filter_route_ids,omitempty"`
	// Types that are valid to be assigned to HasFlowMask:
	//
	//	*Costing_Options_FlowMask
	HasFlowMask isCosting_Options_HasFlowMask `protobuf_oneof:"has_flow_mask"`
	// Types that are valid to be assigned to HasBikeShareCost:
	//
	//	*Costing_Options_BikeShareCost
	HasBikeShareCost isCosting_Options_HasBikeShareCost `protobuf_oneof:"has_bike_share_cost"`
	// Types that are valid to be assigned to HasBikeSharePenalty:
	//
	//	*Costing_Options_BikeSharePenalty
	HasBikeSharePenalty isCosting_Options_HasBikeSharePenalty `protobuf_oneof:"has_bike_share_penalty"`
	// Types that are valid to be assigned to HasRailFerryCost:
	//
	//	*Costing_Options_RailFerryCost
	HasRailFerryCost isCosting_Options_HasRailFerryCost `protobuf_oneof:"has_rail_ferry_cost"`
	// Types that are valid to be assigned to HasUseRailFerry:
	//
	//	*Costing_Options_UseRailFerry
	HasUseRailFerry isCosting_Options_HasUseRailFerry `protobuf_oneof:"has_use_rail_ferry"`
	// Types that are valid to be assigned to HasIgnoreRestrictions:
	//
	//	*Costing_Options_IgnoreRestrictions
	HasIgnoreRestrictions isCosting_Options_HasIgnoreRestrictions `protobuf_oneof:"has_ignore_restrictions"`
	// Types that are valid to be assigned to HasIgnoreOneways:
	//
	//	*Costing_Options_IgnoreOneways
	HasIgnoreOneways isCosting_Options_HasIgnoreOneways `protobuf_oneof:"has_ignore_oneways"`
	// Types that are valid to be assigned to HasIgnoreAccess:
	//
	//	*Costing_Options_IgnoreAccess
	HasIgnoreAccess isCosting_Options_HasIgnoreAccess `protobuf_oneof:"has_ignore_access"`
	// Types that are valid to be assigned to HasIgnoreClosures:
	//
	//	*Costing_Options_IgnoreClosures
	HasIgnoreClosures isCosting_Options_HasIgnoreClosures `protobuf_oneof:"has_ignore_closures"`
	// Types that are valid to be assigned to HasShortest:
	//
	//	*Costing_Options_Shortest
	HasShortest isCosting_Options_HasShortest `protobuf_oneof:"has_shortest"`
	// Types that are valid to be assigned to HasServicePenalty:
	//
	//	*Costing_Options_ServicePenalty
	HasServicePenalty isCosting_Options_HasServicePenalty `protobuf_oneof:"has_service_penalty"`
	// Types that are valid to be assigned to HasUseTracks:
	//
	//	*Costing_Options_UseTracks
	HasUseTracks isCosting_Options_HasUseTracks `protobuf_oneof:"has_use_tracks"`
	// Types that are valid to be assigned to HasUseDistance:
	//
	//	*Costing_Options_UseDistance
	HasUseDistance isCosting_Options_HasUseDistance `protobuf_oneof:"has_use_distance"`
	// Types that are valid to be assigned to HasUseLivingStreets:
	//
	//	*Costing_Options_UseLivingStreets
	HasUseLivingStreets isCosting_Options_HasUseLivingStreets `protobuf_oneof:"has_use_living_streets"`
	// Types that are valid to be assigned to HasServiceFactor:
	//
	//	*Costing_Options_ServiceFactor
	HasServiceFactor isCosting_Options_HasServiceFactor `protobuf_oneof:"has_service_factor"`
	// Types that are valid to be assigned to HasClosureFactor:
	//
	//	*Costing_Options_ClosureFactor
	HasClosureFactor isCosting_Options_HasClosureFactor `protobuf_oneof:"has_closure_factor"`
	// Types that are valid to be assigned to HasPrivateAccessPenalty:
	//
	//	*Costing_Options_PrivateAccessPenalty
	HasPrivateAccessPenalty isCosting_Options_HasPrivateAccessPenalty `protobuf_oneof:"has_private_access_penalty"`
	// Types that are valid to be assigned to HasExcludeUnpaved:
	//
	//	*Costing_Options_ExcludeUnpaved
	HasExcludeUnpaved isCosting_Options_HasExcludeUnpaved `protobuf_oneof:"has_exclude_unpaved"`
	// Types that are valid to be assigned to HasIncludeHot:
	//
	//	*Costing_Options_IncludeHot
	HasIncludeHot isCosting_Options_HasIncludeHot `protobuf_oneof:"has_include_hot"`
	// Types that are valid to be assigned to HasIncludeHov2:
	//
	//	*Costing_Options_IncludeHov2
	HasIncludeHov2 isCosting_Options_HasIncludeHov2 `protobuf_oneof:"has_include_hov2"`
	// Types that are valid to be assigned to HasIncludeHov3:
	//
	//	*Costing_Options_IncludeHov3
	HasIncludeHov3 isCosting_Options_HasIncludeHov3 `protobuf_oneof:"has_include_hov3"`
	// Types that are valid to be assigned to HasExcludeCashOnlyTolls:
	//
	//	*Costing_Options_ExcludeCashOnlyTolls
	HasExcludeCashOnlyTolls isCosting_Options_HasExcludeCashOnlyTolls `protobuf_oneof:"has_exclude_cash_only_tolls"`
	// Types that are valid to be assigned to HasRestrictionProbability:
	//
	//	*Costing_Options_RestrictionProbability
	HasRestrictionProbability isCosting_Options_HasRestrictionProbability `protobuf_oneof:"has_restriction_probability"`
	ExcludeEdges              []*AvoidEdge                                `protobuf:"bytes,78,rep,name=exclude_edges,json=excludeEdges,proto3" json:"exclude_edges,omitempty"`
	// Types that are valid to be assigned to HasElevatorPenalty:
	//
	//	*Costing_Options_ElevatorPenalty
	HasElevatorPenalty             isCosting_Options_HasElevatorPenalty `protobuf_oneof:"has_elevator_penalty"`
	FixedSpeed                     uint32                               `protobuf:"varint,80,opt,name=fixed_speed,json=fixedSpeed,proto3" json:"fixed_speed,omitempty"`
	AxleCount                      uint32                               `protobuf:"varint,81,opt,name=axle_count,json=axleCount,proto3" json:"axle_count,omitempty"`
	UseLit                         float32                              `protobuf:"fixed32,82,opt,name=use_lit,json=useLit,proto3" json:"use_lit,omitempty"`
	DisableHierarchyPruning        bool                                 `protobuf:"varint,83,opt,name=disable_hierarchy_pruning,json=disableHierarchyPruning,proto3" json:"disable_hierarchy_pruning,omitempty"`
	IgnoreNonVehicularRestrictions bool                                 `protobuf:"varint,84,opt,name=ignore_non_vehicular_restrictions,json=ignoreNonVehicularRestrictions,proto3" json:"ignore_non_vehicular_restrictions,omitempty"`
	// Types that are valid to be assigned to HasHgvNoAccessPenalty:
	//
	//	*Costing_Options_HgvNoAccessPenalty
	HasHgvNoAccessPenalty isCosting_Options_HasHgvNoAccessPenalty `protobuf_oneof:"has_hgv_no_access_penalty"`
	UseTruckRoute         float32                                 `protobuf:"fixed32,86,opt,name=use_truck_route,json=useTruckRoute,proto3" json:"use_truck_route,omitempty"`
	ExcludeBridges        bool                                    `protobuf:"varint,87,opt,name=exclude_bridges,json=excludeBridges,proto3" json:"exclude_bridges,omitempty"`
	ExcludeTunnels        bool                                    `protobuf:"varint,88,opt,name=exclude_tunnels,json=excludeTunnels,proto3" json:"exclude_tunnels,omitempty"`
	ExcludeTolls          bool                                    `protobuf:"varint,89,opt,name=exclude_tolls,json=excludeTolls,proto3" json:"exclude_tolls,omitempty"`
	ExcludeHighways       bool                                    `protobuf:"varint,90,opt,name=exclude_highways,json=excludeHighways,proto3" json:"exclude_highways,omitempty"`
	ExcludeFerries        bool                                    `protobuf:"varint,91,opt,name=exclude_ferries,json=excludeFerries,proto3" json:"exclude_ferries,omitempty"`
	HierarchyLimits       map[uint32]*HierarchyLimits             `protobuf:"bytes,92,rep,name=hierarchy_limits,json=hierarchyLimits,proto3" json:"hierarchy_limits,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IgnoreConstruction    bool                                    `protobuf:"varint,93,opt,name=ignore_construction,json=ignoreConstruction,proto3" json:"ignore_construction,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Costing_Options) Reset() {
	*x = Costing_Options{}
	mi := &file_options_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Costing_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Costing_Options) ProtoMessage() {}

func (x *Costing_Options) ProtoReflect() protoreflect.Message {
	mi := &file_options_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Costing_Options.ProtoReflect.Descriptor instead.
func (*Costing_Options) Descriptor() ([]byte, []int) {
	return file_options_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Costing_Options) GetHasManeuverPenalty() isCosting_Options_HasManeuverPenalty {
	if x != nil {
		return x.HasManeuverPenalty
	}
	return nil
}

func (x *Costing_Options) GetManeuverPenalty() float32 {
	if x != nil {
		if x, ok := x.HasManeuverPenalty.(*Costing_Options_ManeuverPenalty); ok {
			return x.ManeuverPenalty
		}
	}
	return 0
}

func (x *Costing_Options) GetHasDestinationOnlyPenalty() isCosting_Options_HasDestinationOnlyPenalty {
	if x != nil {
		return x.HasDestinationOnlyPenalty
	}
	return nil
}

func (x *Costing_Options) GetDestinationOnlyPenalty() float32 {
	if x != nil {
		if x, ok := x.HasDestinationOnlyPenalty.(*Costing_Options_DestinationOnlyPenalty); ok {
			return x.DestinationOnlyPenalty
		}
	}
	return 0
}

func (x *Costing_Options) GetHasGateCost() isCosting_Options_HasGateCost {
	if x != nil {
		return x.HasGateCost
	}
	return nil
}

func (x *Costing_Options) GetGateCost() float32 {
	if x != nil {
		if x, ok := x.HasGateCost.(*Costing_Options_GateCost); ok {
			return x.GateCost
		}
	}
	return 0
}

func (x *Costing_Options) GetHasGatePenalty() isCosting_Options_HasGatePenalty {
	if x != nil {
		return x.HasGatePenalty
	}
	return nil
}

func (x *Costing_Options) GetGatePenalty() float32 {
	if x != nil {
		if x, ok := x.HasGatePenalty.(*Costing_Options_GatePenalty); ok {
			return x.GatePenalty
		}
	}
	return 0
}

func (x *Costing_Options) GetHasTollBoothCost() isCosting_Options_HasTollBoothCost {
	if x != nil {
		return x.HasTollBoothCost
	}
	return nil
}

func (x *Costing_Options) GetTollBoothCost() float32 {
	if x != nil {
		if x, ok := x.HasTollBoothCost.(*Costing_Options_TollBoothCost); ok {
			return x.TollBoothCost
		}
	}
	return 0
}

func (x *Costing_Options) GetHasTollBoothPenalty() isCosting_Options_HasTollBoothPenalty {
	if x != nil {
		return x.HasTollBoothPenalty
	}
	return nil
}

func (x *Costing_Options) GetTollBoothPenalty() float32 {
	if x != nil {
		if x, ok := x.HasTollBoothPenalty.(*Costing_Options_TollBoothPenalty); ok {
			return x.TollBoothPenalty
		}
	}
	return 0
}

func (x *Costing_Options) GetHasAlleyPenalty() isCosting_Options_HasAlleyPenalty {
	if x != nil {
		return x.HasAlleyPenalty
	}
	return nil
}

func (x *Costing_Options) GetAlleyPenalty() float32 {
	if x != nil {
		if x, ok := x.HasAlleyPenalty.(*Costing_Options_AlleyPenalty); ok {
			return x.AlleyPenalty
		}
	}
	return 0
}

func (x *Costing_Options) GetHasCountryCrossingCost() isCosting_Options_HasCountryCrossingCost {
	if x != nil {
		return x.HasCountryCrossingCost
	}
	return nil
}

func (x *Costing_Options) GetCountryCrossingCost() float32 {
	if x != nil {
		if x, ok := x.HasCountryCrossingCost.(*Costing_Options_CountryCrossingCost); ok {
			return x.CountryCrossingCost
		}
	}
	return 0
}

func (x *Costing_Options) GetHasCountryCrossingPenalty() isCosting_Options_HasCountryCrossingPenalty {
	if x != nil {
		return x.HasCountryCrossingPenalty
	}
	return nil
}

func (x *Costing_Options) GetCountryCrossingPenalty() float32 {
	if x != nil {
		if x, ok := x.HasCountryCrossingPenalty.(*Costing_Options_CountryCrossingPenalty); ok {
			return x.CountryCrossingPenalty
		}
	}
	return 0
}

func (x *Costing_Options) GetHasFerryCost() isCosting_Options_HasFerryCost {
	if x != nil {
		return x.HasFerryCost
	}
	return nil
}

func (x *Costing_Options) GetFerryCost() float32 {
	if x != nil {
		if x, ok := x.HasFerryCost.(*Costing_Options_FerryCost); ok {
			return x.FerryCost
		}
	}
	return 0
}

func (x *Costing_Options) GetHasAvoidBadSurfaces() isCosting_Options_HasAvoidBadSurfaces {
	if x != nil {
		return x.HasAvoidBadSurfaces
	}
	return nil
}

func (x *Costing_Options) GetAvoidBadSurfaces() float32 {
	if x != nil {
		if x, ok := x.HasAvoidBadSurfaces.(*Costing_Options_AvoidBadSurfaces); ok {
			return x.AvoidBadSurfaces
		}
	}
	return 0
}

func (x *Costing_Options) GetHasUseFerry() isCosting_Options_HasUseFerry {
	if x != nil {
		return x.HasUseFerry
	}
	return nil
}

func (x *Costing_Options) GetUseFerry() float32 {
	if x != nil {
		if x, ok := x.HasUseFerry.(*Costing_Options_UseFerry); ok {
			return x.UseFerry
		}
	}
	return 0
}

func (x *Costing_Options) GetHasUseHighways() isCosting_Options_HasUseHighways {
	if x != nil {
		return x.HasUseHighways
	}
	return nil
}

func (x *Costing_Options) GetUseHighways() float32 {
	if x != nil {
		if x, ok := x.HasUseHighways.(*Costing_Options_UseHighways); ok {
			return x.UseHighways
		}
	}
	return 0
}

func (x *Costing_Options) GetHasUseTolls() isCosting_Options_HasUseTolls {
	if x != nil {
		return x.HasUseTolls
	}
	return nil
}

func (x *Costing_Options) GetUseTolls() float32 {
	if x != nil {
		if x, ok := x.HasUseTolls.(*Costing_Options_UseTolls); ok {
			return x.UseTolls
		}
	}
	return 0
}

func (x *Costing_Options) GetHasUseRoads() isCosting_Options_HasUseRoads {
	if x != nil {
		return x.HasUseRoads
	}
	return nil
}

func (x *Costing_Options) GetUseRoads() float32 {
	if x != nil {
		if x, ok := x.HasUseRoads.(*Costing_Options_UseRoads); ok {
			return x.UseRoads
		}
	}
	return 0
}

func (x *Costing_Options) GetHasMaxDistance() isCosting_Options_HasMaxDistance {
	if x != nil {
		return x.HasMaxDistance
	}
	return nil
}

func (x *Costing_Options) GetMaxDistance() uint32 {
	if x != nil {
		if x, ok := x.HasMaxDistance.(*Costing_Options_MaxDistance); ok {
			return x.MaxDistance
		}
	}
	return 0
}

func (x *Costing_Options) GetHasWalkingSpeed() isCosting_Options_HasWalkingSpeed {
	if x != nil {
		return x.HasWalkingSpeed
	}
	return nil
}

func (x *Costing_Options) GetWalkingSpeed() float32 {
	if x != nil {
		if x, ok := x.HasWalkingSpeed.(*Costing_Options_WalkingSpeed); ok {
			return x.WalkingSpeed
		}
	}
	return 0
}

func (x *Costing_Options) GetHasStepPenalty() isCosting_Options_HasStepPenalty {
	if x != nil {
		return x.HasStepPenalty
	}
	return nil
}

func (x *Costing_Options) GetStepPenalty() float32 {
	if x != nil {
		if x, ok := x.HasStepPenalty.(*Costing_Options_StepPenalty); ok {
			return x.StepPenalty
		}
	}
	return 0
}

func (x *Costing_Options) GetHasMaxGrade() isCosting_Options_HasMaxGrade {
	if x != nil {
		return x.HasMaxGrade
	}
	return nil
}

func (x *Costing_Options) GetMaxGrade() uint32 {
	if x != nil {
		if x, ok := x.HasMaxGrade.(*Costing_Options_MaxGrade); ok {
			return x.MaxGrade
		}
	}
	return 0
}

func (x *Costing_Options) GetHasMaxHikingDifficulty() isCosting_Options_HasMaxHikingDifficulty {
	if x != nil {
		return x.HasMaxHikingDifficulty
	}
	return nil
}

func (x *Costing_Options) GetMaxHikingDifficulty() uint32 {
	if x != nil {
		if x, ok := x.HasMaxHikingDifficulty.(*Costing_Options_MaxHikingDifficulty); ok {
			return x.MaxHikingDifficulty
		}
	}
	return 0
}

func (x *Costing_Options) GetHasModeFactor() isCosting_Options_HasModeFactor {
	if x != nil {
		return x.HasModeFactor
	}
	return nil
}

func (x *Costing_Options) GetModeFactor() float32 {
	if x != nil {
		if x, ok := x.HasModeFactor.(*Costing_Options_ModeFactor); ok {
			return x.ModeFactor
		}
	}
	return 0
}

func (x *Costing_Options) GetHasWalkwayFactor() isCosting_Options_HasWalkwayFactor {
	if x != nil {
		return x.HasWalkwayFactor
	}
	return nil
}

func (x *Costing_Options) GetWalkwayFactor() float32 {
	if x != nil {
		if x, ok := x.HasWalkwayFactor.(*Costing_Options_WalkwayFactor); ok {
			return x.WalkwayFactor
		}
	}
	return 0
}

func (x *Costing_Options) GetHasSidewalkFactor() isCosting_Options_HasSidewalkFactor {
	if x != nil {
		return x.HasSidewalkFactor
	}
	return nil
}

func (x *Costing_Options) GetSidewalkFactor() float32 {
	if x != nil {
		if x, ok := x.HasSidewalkFactor.(*Costing_Options_SidewalkFactor); ok {
			return x.SidewalkFactor
		}
	}
	return 0
}

func (x *Costing_Options) GetHasAlleyFactor() isCosting_Options_HasAlleyFactor {
	if x != nil {
		return x.HasAlleyFactor
	}
	return nil
}

func (x *Costing_Options) GetAlleyFactor() float32 {
	if x != nil {
		if x, ok := x.HasAlleyFactor.(*Costing_Options_AlleyFactor); ok {
			return x.AlleyFactor
		}
	}
	return 0
}

func (x *Costing_Options) GetHasDrivewayFactor() isCosting_Options_HasDrivewayFactor {
	if x != nil {
		return x.HasDrivewayFactor
	}
	return nil
}

func (x *Costing_Options) GetDrivewayFactor() float32 {
	if x != nil {
		if x, ok := x.HasDrivewayFactor.(*Costing_Options_DrivewayFactor); ok {
			return x.DrivewayFactor
		}
	}
	return 0
}

func (x *Costing_Options) GetHasDrivewayPenalty() isCosting_Options_HasDrivewayPenalty {
	if x != nil {
		return x.HasDrivewayPenalty
	}
	return nil
}

func (x *Costing_Options) GetDrivewayPenalty() float32 {
	if x != nil {
		if x, ok := x.HasDrivewayPenalty.(*Costing_Options_DrivewayPenalty); ok {
			return x.DrivewayPenalty
		}
	}
	return 0
}

func (x *Costing_Options) GetHasTransitStartEndMaxDistance() isCosting_Options_HasTransitStartEndMaxDistance {
	if x != nil {
		return x.HasTransitStartEndMaxDistance
	}
	return nil
}

func (x *Costing_Options) GetTransitStartEndMaxDistance() uint32 {
	if x != nil {
		if x, ok := x.HasTransitStartEndMaxDistance.(*Costing_Options_TransitStartEndMaxDistance); ok {
			return x.TransitStartEndMaxDistance
		}
	}
	return 0
}

func (x *Costing_Options) GetHasTransitTransferMaxDistance() isCosting_Options_HasTransitTransferMaxDistance {
	if x != nil {
		return x.HasTransitTransferMaxDistance
	}
	return nil
}

func (x *Costing_Options) GetTransitTransferMaxDistance() uint32 {
	if x != nil {
		if x, ok := x.HasTransitTransferMaxDistance.(*Costing_Options_TransitTransferMaxDistance); ok {
			return x.TransitTransferMaxDistance
		}
	}
	return 0
}

func (x *Costing_Options) GetHasTransportType() isCosting_Options_HasTransportType {
	if x != nil {
		return x.HasTransportType
	}
	return nil
}

func (x *Costing_Options) GetTransportType() string {
	if x != nil {
		if x, ok := x.HasTransportType.(*Costing_Options_TransportType); ok {
			return x.TransportType
		}
	}
	return ""
}

func (x *Costing_Options) GetHasTopSpeed() isCosting_Options_HasTopSpeed {
	if x != nil {
		return x.HasTopSpeed
	}
	return nil
}

func (x *Costing_Options) GetTopSpeed() float32 {
	if x != nil {
		if x, ok := x.HasTopSpeed.(*Costing_Options_TopSpeed); ok {
			return x.TopSpeed
		}
	}
	return 0
}

func (x *Costing_Options) GetHasUseHills() isCosting_Options_HasUseHills {
	if x != nil {
		return x.HasUseHills
	}
	return nil
}

func (x *Costing_Options) GetUseHills() float32 {
	if x != nil {
		if x, ok := x.HasUseHills.(*Costing_Options_UseHills); ok {
			return x.UseHills
		}
	}
	return 0
}

func (x *Costing_Options) GetHasUsePrimary() isCosting_Options_HasUsePrimary {
	if x != nil {
		return x.HasUsePrimary
	}
	return nil
}

func (x *Costing_Options) GetUsePrimary() float32 {
	if x != nil {
		if x, ok := x.HasUsePrimary.(*Costing_Options_UsePrimary); ok {
			return x.UsePrimary
		}
	}
	return 0
}

func (x *Costing_Options) GetHasUseTrails() isCosting_Options_HasUseTrails {
	if x != nil {
		return x.HasUseTrails
	}
	return nil
}

func (x *Costing_Options) GetUseTrails() float32 {
	if x != nil {
		if x, ok := x.HasUseTrails.(*Costing_Options_UseTrails); ok {
			return x.UseTrails
		}
	}
	return 0
}

func (x *Costing_Options) GetHasLowClassPenalty() isCosting_Options_HasLowClassPenalty {
	if x != nil {
		return x.HasLowClassPenalty
	}
	return nil
}

func (x *Costing_Options) GetLowClassPenalty() float32 {
	if x != nil {
		if x, ok := x.HasLowClassPenalty.(*Costing_Options_LowClassPenalty); ok {
			return x.LowClassPenalty
		}
	}
	return 0
}

func (x *Costing_Options) GetHasHazmat() isCosting_Options_HasHazmat {
	if x != nil {
		return x.HasHazmat
	}
	return nil
}

func (x *Costing_Options) GetHazmat() bool {
	if x != nil {
		if x, ok := x.HasHazmat.(*Costing_Options_Hazmat); ok {
			return x.Hazmat
		}
	}
	return false
}

func (x *Costing_Options) GetHasWeight() isCosting_Options_HasWeight {
	if x != nil {
		return x.HasWeight
	}
	return nil
}

func (x *Costing_Options) GetWeight() float32 {
	if x != nil {
		if x, ok := x.HasWeight.(*Costing_Options_Weight); ok {
			return x.Weight
		}
	}
	return 0
}

func (x *Costing_Options) GetHasAxleLoad() isCosting_Options_HasAxleLoad {
	if x != nil {
		return x.HasAxleLoad
	}
	return nil
}

func (x *Costing_Options) GetAxleLoad() float32 {
	if x != nil {
		if x, ok := x.HasAxleLoad.(*Costing_Options_AxleLoad); ok {
			return x.AxleLoad
		}
	}
	return 0
}

func (x *Costing_Options) GetHasHeight() isCosting_Options_HasHeight {
	if x != nil {
		return x.HasHeight
	}
	return nil
}

func (x *Costing_Options) GetHeight() float32 {
	if x != nil {
		if x, ok := x.HasHeight.(*Costing_Options_Height); ok {
			return x.Height
		}
	}
	return 0
}

func (x *Costing_Options) GetHasWidth() isCosting_Options_HasWidth {
	if x != nil {
		return x.HasWidth
	}
	return nil
}

func (x *Costing_Options) GetWidth() float32 {
	if x != nil {
		if x, ok := x.HasWidth.(*Costing_Options_Width); ok {
			return x.Width
		}
	}
	return 0
}

func (x *Costing_Options) GetHasLength() isCosting_Options_HasLength {
	if x != nil {
		return x.HasLength
	}
	return nil
}

func (x *Costing_Options) GetLength() float32 {
	if x != nil {
		if x, ok := x.HasLength.(*Costing_Options_Length); ok {
			return x.Length
		}
	}
	return 0
}

func (x *Costing_Options) GetHasCyclingSpeed() isCosting_Options_HasCyclingSpeed {
	if x != nil {
		return x.HasCyclingSpeed
	}
	return nil
}

func (x *Costing_Options) GetCyclingSpeed() float32 {
	if x != nil {
		if x, ok := x.HasCyclingSpeed.(*Costing_Options_CyclingSpeed); ok {
			return x.CyclingSpeed
		}
	}
	return 0
}

func (x *Costing_Options) GetHasWheelchair() isCosting_Options_HasWheelchair {
	if x != nil {
		return x.HasWheelchair
	}
	return nil
}

func (x *Costing_Options) GetWheelchair() bool {
	if x != nil {
		if x, ok := x.HasWheelchair.(*Costing_Options_Wheelchair); ok {
			return x.Wheelchair
		}
	}
	return false
}

func (x *Costing_Options) GetHasBicycle() isCosting_Options_HasBicycle {
	if x != nil {
		return x.HasBicycle
	}
	return nil
}

func (x *Costing_Options) GetBicycle() bool {
	if x != nil {
		if x, ok := x.HasBicycle.(*Costing_Options_Bicycle); ok {
			return x.Bicycle
		}
	}
	return false
}

func (x *Costing_Options) GetHasUseBus() isCosting_Options_HasUseBus {
	if x != nil {
		return x.HasUseBus
	}
	return nil
}

func (x *Costing_Options) GetUseBus() float32 {
	if x != nil {
		if x, ok := x.HasUseBus.(*Costing_Options_UseBus); ok {
			return x.UseBus
		}
	}
	return 0
}

func (x *Costing_Options) GetHasUseRail() isCosting_Options_HasUseRail {
	if x != nil {
		return x.HasUseRail
	}
	return nil
}

func (x *Costing_Options) GetUseRail() float32 {
	if x != nil {
		if x, ok := x.HasUseRail.(*Costing_Options_UseRail); ok {
			return x.UseRail
		}
	}
	return 0
}

func (x *Costing_Options) GetHasUseTransfers() isCosting_Options_HasUseTransfers {
	if x != nil {
		return x.HasUseTransfers
	}
	return nil
}

func (x *Costing_Options) GetUseTransfers() float32 {
	if x != nil {
		if x, ok := x.HasUseTransfers.(*Costing_Options_UseTransfers); ok {
			return x.UseTransfers
		}
	}
	return 0
}

func (x *Costing_Options) GetHasTransferCost() isCosting_Options_HasTransferCost {
	if x != nil {
		return x.HasTransferCost
	}
	return nil
}

func (x *Costing_Options) GetTransferCost() float32 {
	if x != nil {
		if x, ok := x.HasTransferCost.(*Costing_Options_TransferCost); ok {
			return x.TransferCost
		}
	}
	return 0
}

func (x *Costing_Options) GetHasTransferPenalty() isCosting_Options_HasTransferPenalty {
	if x != nil {
		return x.HasTransferPenalty
	}
	return nil
}

func (x *Costing_Options) GetTransferPenalty() float32 {
	if x != nil {
		if x, ok := x.HasTransferPenalty.(*Costing_Options_TransferPenalty); ok {
			return x.TransferPenalty
		}
	}
	return 0
}

func (x *Costing_Options) GetFilterStopAction() FilterAction {
	if x != nil {
		return x.FilterStopAction
	}
	return FilterAction_no_action
}

func (x *Costing_Options) GetFilterStopIds() []string {
	if x != nil {
		return x.FilterStopIds
	}
	return nil
}

func (x *Costing_Options) GetFilterOperatorAction() FilterAction {
	if x != nil {
		return x.FilterOperatorAction
	}
	return FilterAction_no_action
}

func (x *Costing_Options) GetFilterOperatorIds() []string {
	if x != nil {
		return x.FilterOperatorIds
	}
	return nil
}

func (x *Costing_Options) GetFilterRouteAction() FilterAction {
	if x != nil {
		return x.FilterRouteAction
	}
	return FilterAction_no_action
}

func (x *Costing_Options) GetFilterRouteIds() []string {
	if x != nil {
		return x.FilterRouteIds
	}
	return nil
}

func (x *Costing_Options) GetHasFlowMask() isCosting_Options_HasFlowMask {
	if x != nil {
		return x.HasFlowMask
	}
	return nil
}

func (x *Costing_Options) GetFlowMask() uint32 {
	if x != nil {
		if x, ok := x.HasFlowMask.(*Costing_Options_FlowMask); ok {
			return x.FlowMask
		}
	}
	return 0
}

func (x *Costing_Options) GetHasBikeShareCost() isCosting_Options_HasBikeShareCost {
	if x != nil {
		return x.HasBikeShareCost
	}
	return nil
}

func (x *Costing_Options) GetBikeShareCost() float32 {
	if x != nil {
		if x, ok := x.HasBikeShareCost.(*Costing_Options_BikeShareCost); ok {
			return x.BikeShareCost
		}
	}
	return 0
}

func (x *Costing_Options) GetHasBikeSharePenalty() isCosting_Options_HasBikeSharePenalty {
	if x != nil {
		return x.HasBikeSharePenalty
	}
	return nil
}

func (x *Costing_Options) GetBikeSharePenalty() float32 {
	if x != nil {
		if x, ok := x.HasBikeSharePenalty.(*Costing_Options_BikeSharePenalty); ok {
			return x.BikeSharePenalty
		}
	}
	return 0
}

func (x *Costing_Options) GetHasRailFerryCost() isCosting_Options_HasRailFerryCost {
	if x != nil {
		return x.HasRailFerryCost
	}
	return nil
}

func (x *Costing_Options) GetRailFerryCost() float32 {
	if x != nil {
		if x, ok := x.HasRailFerryCost.(*Costing_Options_RailFerryCost); ok {
			return x.RailFerryCost
		}
	}
	return 0
}

func (x *Costing_Options) GetHasUseRailFerry() isCosting_Options_HasUseRailFerry {
	if x != nil {
		return x.HasUseRailFerry
	}
	return nil
}

func (x *Costing_Options) GetUseRailFerry() float32 {
	if x != nil {
		if x, ok := x.HasUseRailFerry.(*Costing_Options_UseRailFerry); ok {
			return x.UseRailFerry
		}
	}
	return 0
}

func (x *Costing_Options) GetHasIgnoreRestrictions() isCosting_Options_HasIgnoreRestrictions {
	if x != nil {
		return x.HasIgnoreRestrictions
	}
	return nil
}

func (x *Costing_Options) GetIgnoreRestrictions() bool {
	if x != nil {
		if x, ok := x.HasIgnoreRestrictions.(*Costing_Options_IgnoreRestrictions); ok {
			return x.IgnoreRestrictions
		}
	}
	return false
}

func (x *Costing_Options) GetHasIgnoreOneways() isCosting_Options_HasIgnoreOneways {
	if x != nil {
		return x.HasIgnoreOneways
	}
	return nil
}

func (x *Costing_Options) GetIgnoreOneways() bool {
	if x != nil {
		if x, ok := x.HasIgnoreOneways.(*Costing_Options_IgnoreOneways); ok {
			return x.IgnoreOneways
		}
	}
	return false
}

func (x *Costing_Options) GetHasIgnoreAccess() isCosting_Options_HasIgnoreAccess {
	if x != nil {
		return x.HasIgnoreAccess
	}
	return nil
}

func (x *Costing_Options) GetIgnoreAccess() bool {
	if x != nil {
		if x, ok := x.HasIgnoreAccess.(*Costing_Options_IgnoreAccess); ok {
			return x.IgnoreAccess
		}
	}
	return false
}

func (x *Costing_Options) GetHasIgnoreClosures() isCosting_Options_HasIgnoreClosures {
	if x != nil {
		return x.HasIgnoreClosures
	}
	return nil
}

func (x *Costing_Options) GetIgnoreClosures() bool {
	if x != nil {
		if x, ok := x.HasIgnoreClosures.(*Costing_Options_IgnoreClosures); ok {
			return x.IgnoreClosures
		}
	}
	return false
}

func (x *Costing_Options) GetHasShortest() isCosting_Options_HasShortest {
	if x != nil {
		return x.HasShortest
	}
	return nil
}

func (x *Costing_Options) GetShortest() bool {
	if x != nil {
		if x, ok := x.HasShortest.(*Costing_Options_Shortest); ok {
			return x.Shortest
		}
	}
	return false
}

func (x *Costing_Options) GetHasServicePenalty() isCosting_Options_HasServicePenalty {
	if x != nil {
		return x.HasServicePenalty
	}
	return nil
}

func (x *Costing_Options) GetServicePenalty() float32 {
	if x != nil {
		if x, ok := x.HasServicePenalty.(*Costing_Options_ServicePenalty); ok {
			return x.ServicePenalty
		}
	}
	return 0
}

func (x *Costing_Options) GetHasUseTracks() isCosting_Options_HasUseTracks {
	if x != nil {
		return x.HasUseTracks
	}
	return nil
}

func (x *Costing_Options) GetUseTracks() float32 {
	if x != nil {
		if x, ok := x.HasUseTracks.(*Costing_Options_UseTracks); ok {
			return x.UseTracks
		}
	}
	return 0
}

func (x *Costing_Options) GetHasUseDistance() isCosting_Options_HasUseDistance {
	if x != nil {
		return x.HasUseDistance
	}
	return nil
}

func (x *Costing_Options) GetUseDistance() float32 {
	if x != nil {
		if x, ok := x.HasUseDistance.(*Costing_Options_UseDistance); ok {
			return x.UseDistance
		}
	}
	return 0
}

func (x *Costing_Options) GetHasUseLivingStreets() isCosting_Options_HasUseLivingStreets {
	if x != nil {
		return x.HasUseLivingStreets
	}
	return nil
}

func (x *Costing_Options) GetUseLivingStreets() float32 {
	if x != nil {
		if x, ok := x.HasUseLivingStreets.(*Costing_Options_UseLivingStreets); ok {
			return x.UseLivingStreets
		}
	}
	return 0
}

func (x *Costing_Options) GetHasServiceFactor() isCosting_Options_HasServiceFactor {
	if x != nil {
		return x.HasServiceFactor
	}
	return nil
}

func (x *Costing_Options) GetServiceFactor() float32 {
	if x != nil {
		if x, ok := x.HasServiceFactor.(*Costing_Options_ServiceFactor); ok {
			return x.ServiceFactor
		}
	}
	return 0
}

func (x *Costing_Options) GetHasClosureFactor() isCosting_Options_HasClosureFactor {
	if x != nil {
		return x.HasClosureFactor
	}
	return nil
}

func (x *Costing_Options) GetClosureFactor() float32 {
	if x != nil {
		if x, ok := x.HasClosureFactor.(*Costing_Options_ClosureFactor); ok {
			return x.ClosureFactor
		}
	}
	return 0
}

func (x *Costing_Options) GetHasPrivateAccessPenalty() isCosting_Options_HasPrivateAccessPenalty {
	if x != nil {
		return x.HasPrivateAccessPenalty
	}
	return nil
}

func (x *Costing_Options) GetPrivateAccessPenalty() float32 {
	if x != nil {
		if x, ok := x.HasPrivateAccessPenalty.(*Costing_Options_PrivateAccessPenalty); ok {
			return x.PrivateAccessPenalty
		}
	}
	return 0
}

func (x *Costing_Options) GetHasExcludeUnpaved() isCosting_Options_HasExcludeUnpaved {
	if x != nil {
		return x.HasExcludeUnpaved
	}
	return nil
}

func (x *Costing_Options) GetExcludeUnpaved() bool {
	if x != nil {
		if x, ok := x.HasExcludeUnpaved.(*Costing_Options_ExcludeUnpaved); ok {
			return x.ExcludeUnpaved
		}
	}
	return false
}

func (x *Costing_Options) GetHasIncludeHot() isCosting_Options_HasIncludeHot {
	if x != nil {
		return x.HasIncludeHot
	}
	return nil
}

func (x *Costing_Options) GetIncludeHot() bool {
	if x != nil {
		if x, ok := x.HasIncludeHot.(*Costing_Options_IncludeHot); ok {
			return x.IncludeHot
		}
	}
	return false
}

func (x *Costing_Options) GetHasIncludeHov2() isCosting_Options_HasIncludeHov2 {
	if x != nil {
		return x.HasIncludeHov2
	}
	return nil
}

func (x *Costing_Options) GetIncludeHov2() bool {
	if x != nil {
		if x, ok := x.HasIncludeHov2.(*Costing_Options_IncludeHov2); ok {
			return x.IncludeHov2
		}
	}
	return false
}

func (x *Costing_Options) GetHasIncludeHov3() isCosting_Options_HasIncludeHov3 {
	if x != nil {
		return x.HasIncludeHov3
	}
	return nil
}

func (x *Costing_Options) GetIncludeHov3() bool {
	if x != nil {
		if x, ok := x.HasIncludeHov3.(*Costing_Options_IncludeHov3); ok {
			return x.IncludeHov3
		}
	}
	return false
}

func (x *Costing_Options) GetHasExcludeCashOnlyTolls() isCosting_Options_HasExcludeCashOnlyTolls {
	if x != nil {
		return x.HasExcludeCashOnlyTolls
	}
	return nil
}

func (x *Costing_Options) GetExcludeCashOnlyTolls() bool {
	if x != nil {
		if x, ok := x.HasExcludeCashOnlyTolls.(*Costing_Options_ExcludeCashOnlyTolls); ok {
			return x.ExcludeCashOnlyTolls
		}
	}
	return false
}

func (x *Costing_Options) GetHasRestrictionProbability() isCosting_Options_HasRestrictionProbability {
	if x != nil {
		return x.HasRestrictionProbability
	}
	return nil
}

func (x *Costing_Options) GetRestrictionProbability() uint32 {
	if x != nil {
		if x, ok := x.HasRestrictionProbability.(*Costing_Options_RestrictionProbability); ok {
			return x.RestrictionProbability
		}
	}
	return 0
}

func (x *Costing_Options) GetExcludeEdges() []*AvoidEdge {
	if x != nil {
		return x.ExcludeEdges
	}
	return nil
}

func (x *Costing_Options) GetHasElevatorPenalty() isCosting_Options_HasElevatorPenalty {
	if x != nil {
		return x.HasElevatorPenalty
	}
	return nil
}

func (x *Costing_Options) GetElevatorPenalty() float32 {
	if x != nil {
		if x, ok := x.HasElevatorPenalty.(*Costing_Options_ElevatorPenalty); ok {
			return x.ElevatorPenalty
		}
	}
	return 0
}

func (x *Costing_Options) GetFixedSpeed() uint32 {
	if x != nil {
		return x.FixedSpeed
	}
	return 0
}

func (x *Costing_Options) GetAxleCount() uint32 {
	if x != nil {
		return x.AxleCount
	}
	return 0
}

func (x *Costing_Options) GetUseLit() float32 {
	if x != nil {
		return x.UseLit
	}
	return 0
}

func (x *Costing_Options) GetDisableHierarchyPruning() bool {
	if x != nil {
		return x.DisableHierarchyPruning
	}
	return false
}

func (x *Costing_Options) GetIgnoreNonVehicularRestrictions() bool {
	if x != nil {
		return x.IgnoreNonVehicularRestrictions
	}
	return false
}

func (x *Costing_Options) GetHasHgvNoAccessPenalty() isCosting_Options_HasHgvNoAccessPenalty {
	if x != nil {
		return x.HasHgvNoAccessPenalty
	}
	return nil
}

func (x *Costing_Options) GetHgvNoAccessPenalty() float32 {
	if x != nil {
		if x, ok := x.HasHgvNoAccessPenalty.(*Costing_Options_HgvNoAccessPenalty); ok {
			return x.HgvNoAccessPenalty
		}
	}
	return 0
}

func (x *Costing_Options) GetUseTruckRoute() float32 {
	if x != nil {
		return x.UseTruckRoute
	}
	return 0
}

func (x *Costing_Options) GetExcludeBridges() bool {
	if x != nil {
		return x.ExcludeBridges
	}
	return false
}

func (x *Costing_Options) GetExcludeTunnels() bool {
	if x != nil {
		return x.ExcludeTunnels
	}
	return false
}

func (x *Costing_Options) GetExcludeTolls() bool {
	if x != nil {
		return x.ExcludeTolls
	}
	return false
}

func (x *Costing_Options) GetExcludeHighways() bool {
	if x != nil {
		return x.ExcludeHighways
	}
	return false
}

func (x *Costing_Options) GetExcludeFerries() bool {
	if x != nil {
		return x.ExcludeFerries
	}
	return false
}

func (x *Costing_Options) GetHierarchyLimits() map[uint32]*HierarchyLimits {
	if x != nil {
		return x.HierarchyLimits
	}
	return nil
}

func (x *Costing_Options) GetIgnoreConstruction() bool {
	if x != nil {
		return x.IgnoreConstruction
	}
	return false
}

type isCosting_Options_HasManeuverPenalty interface {
	isCosting_Options_HasManeuverPenalty()
}

type Costing_Options_ManeuverPenalty struct {
	ManeuverPenalty float32 `protobuf:"fixed32,1,opt,name=maneuver_penalty,json=maneuverPenalty,proto3,oneof"`
}

func (*Costing_Options_ManeuverPenalty) isCosting_Options_HasManeuverPenalty() {}

type isCosting_Options_HasDestinationOnlyPenalty interface {
	isCosting_Options_HasDestinationOnlyPenalty()
}

type Costing_Options_DestinationOnlyPenalty struct {
	DestinationOnlyPenalty float32 `protobuf:"fixed32,2,opt,name=destination_only_penalty,json=destinationOnlyPenalty,proto3,oneof"`
}

func (*Costing_Options_DestinationOnlyPenalty) isCosting_Options_HasDestinationOnlyPenalty() {}

type isCosting_Options_HasGateCost interface {
	isCosting_Options_HasGateCost()
}

type Costing_Options_GateCost struct {
	GateCost float32 `protobuf:"fixed32,3,opt,name=gate_cost,json=gateCost,proto3,oneof"`
}

func (*Costing_Options_GateCost) isCosting_Options_HasGateCost() {}

type isCosting_Options_HasGatePenalty interface {
	isCosting_Options_HasGatePenalty()
}

type Costing_Options_GatePenalty struct {
	GatePenalty float32 `protobuf:"fixed32,4,opt,name=gate_penalty,json=gatePenalty,proto3,oneof"`
}

func (*Costing_Options_GatePenalty) isCosting_Options_HasGatePenalty() {}

type isCosting_Options_HasTollBoothCost interface {
	isCosting_Options_HasTollBoothCost()
}

type Costing_Options_TollBoothCost struct {
	TollBoothCost float32 `protobuf:"fixed32,5,opt,name=toll_booth_cost,json=tollBoothCost,proto3,oneof"`
}

func (*Costing_Options_TollBoothCost) isCosting_Options_HasTollBoothCost() {}

type isCosting_Options_HasTollBoothPenalty interface {
	isCosting_Options_HasTollBoothPenalty()
}

type Costing_Options_TollBoothPenalty struct {
	TollBoothPenalty float32 `protobuf:"fixed32,6,opt,name=toll_booth_penalty,json=tollBoothPenalty,proto3,oneof"`
}

func (*Costing_Options_TollBoothPenalty) isCosting_Options_HasTollBoothPenalty() {}

type isCosting_Options_HasAlleyPenalty interface {
	isCosting_Options_HasAlleyPenalty()
}

type Costing_Options_AlleyPenalty struct {
	AlleyPenalty float32 `protobuf:"fixed32,7,opt,name=alley_penalty,json=alleyPenalty,proto3,oneof"`
}

func (*Costing_Options_AlleyPenalty) isCosting_Options_HasAlleyPenalty() {}

type isCosting_Options_HasCountryCrossingCost interface {
	isCosting_Options_HasCountryCrossingCost()
}

type Costing_Options_CountryCrossingCost struct {
	CountryCrossingCost float32 `protobuf:"fixed32,8,opt,name=country_crossing_cost,json=countryCrossingCost,proto3,oneof"`
}

func (*Costing_Options_CountryCrossingCost) isCosting_Options_HasCountryCrossingCost() {}

type isCosting_Options_HasCountryCrossingPenalty interface {
	isCosting_Options_HasCountryCrossingPenalty()
}

type Costing_Options_CountryCrossingPenalty struct {
	CountryCrossingPenalty float32 `protobuf:"fixed32,9,opt,name=country_crossing_penalty,json=countryCrossingPenalty,proto3,oneof"`
}

func (*Costing_Options_CountryCrossingPenalty) isCosting_Options_HasCountryCrossingPenalty() {}

type isCosting_Options_HasFerryCost interface {
	isCosting_Options_HasFerryCost()
}

type Costing_Options_FerryCost struct {
	FerryCost float32 `protobuf:"fixed32,10,opt,name=ferry_cost,json=ferryCost,proto3,oneof"`
}

func (*Costing_Options_FerryCost) isCosting_Options_HasFerryCost() {}

type isCosting_Options_HasAvoidBadSurfaces interface {
	isCosting_Options_HasAvoidBadSurfaces()
}

type Costing_Options_AvoidBadSurfaces struct {
	AvoidBadSurfaces float32 `protobuf:"fixed32,11,opt,name=avoid_bad_surfaces,json=avoidBadSurfaces,proto3,oneof"`
}

func (*Costing_Options_AvoidBadSurfaces) isCosting_Options_HasAvoidBadSurfaces() {}

type isCosting_Options_HasUseFerry interface {
	isCosting_Options_HasUseFerry()
}

type Costing_Options_UseFerry struct {
	UseFerry float32 `protobuf:"fixed32,12,opt,name=use_ferry,json=useFerry,proto3,oneof"`
}

func (*Costing_Options_UseFerry) isCosting_Options_HasUseFerry() {}

type isCosting_Options_HasUseHighways interface {
	isCosting_Options_HasUseHighways()
}

type Costing_Options_UseHighways struct {
	UseHighways float32 `protobuf:"fixed32,13,opt,name=use_highways,json=useHighways,proto3,oneof"`
}

func (*Costing_Options_UseHighways) isCosting_Options_HasUseHighways() {}

type isCosting_Options_HasUseTolls interface {
	isCosting_Options_HasUseTolls()
}

type Costing_Options_UseTolls struct {
	UseTolls float32 `protobuf:"fixed32,14,opt,name=use_tolls,json=useTolls,proto3,oneof"`
}

func (*Costing_Options_UseTolls) isCosting_Options_HasUseTolls() {}

type isCosting_Options_HasUseRoads interface {
	isCosting_Options_HasUseRoads()
}

type Costing_Options_UseRoads struct {
	UseRoads float32 `protobuf:"fixed32,15,opt,name=use_roads,json=useRoads,proto3,oneof"`
}

func (*Costing_Options_UseRoads) isCosting_Options_HasUseRoads() {}

type isCosting_Options_HasMaxDistance interface {
	isCosting_Options_HasMaxDistance()
}

type Costing_Options_MaxDistance struct {
	MaxDistance uint32 `protobuf:"varint,16,opt,name=max_distance,json=maxDistance,proto3,oneof"`
}

func (*Costing_Options_MaxDistance) isCosting_Options_HasMaxDistance() {}

type isCosting_Options_HasWalkingSpeed interface {
	isCosting_Options_HasWalkingSpeed()
}

type Costing_Options_WalkingSpeed struct {
	WalkingSpeed float32 `protobuf:"fixed32,17,opt,name=walking_speed,json=walkingSpeed,proto3,oneof"`
}

func (*Costing_Options_WalkingSpeed) isCosting_Options_HasWalkingSpeed() {}

type isCosting_Options_HasStepPenalty interface {
	isCosting_Options_HasStepPenalty()
}

type Costing_Options_StepPenalty struct {
	StepPenalty float32 `protobuf:"fixed32,18,opt,name=step_penalty,json=stepPenalty,proto3,oneof"`
}

func (*Costing_Options_StepPenalty) isCosting_Options_HasStepPenalty() {}

type isCosting_Options_HasMaxGrade interface {
	isCosting_Options_HasMaxGrade()
}

type Costing_Options_MaxGrade struct {
	MaxGrade uint32 `protobuf:"varint,19,opt,name=max_grade,json=maxGrade,proto3,oneof"`
}

func (*Costing_Options_MaxGrade) isCosting_Options_HasMaxGrade() {}

type isCosting_Options_HasMaxHikingDifficulty interface {
	isCosting_Options_HasMaxHikingDifficulty()
}

type Costing_Options_MaxHikingDifficulty struct {
	MaxHikingDifficulty uint32 `protobuf:"varint,20,opt,name=max_hiking_difficulty,json=maxHikingDifficulty,proto3,oneof"`
}

func (*Costing_Options_MaxHikingDifficulty) isCosting_Options_HasMaxHikingDifficulty() {}

type isCosting_Options_HasModeFactor interface {
	isCosting_Options_HasModeFactor()
}

type Costing_Options_ModeFactor struct {
	ModeFactor float32 `protobuf:"fixed32,21,opt,name=mode_factor,json=modeFactor,proto3,oneof"`
}

func (*Costing_Options_ModeFactor) isCosting_Options_HasModeFactor() {}

type isCosting_Options_HasWalkwayFactor interface {
	isCosting_Options_HasWalkwayFactor()
}

type Costing_Options_WalkwayFactor struct {
	WalkwayFactor float32 `protobuf:"fixed32,22,opt,name=walkway_factor,json=walkwayFactor,proto3,oneof"`
}

func (*Costing_Options_WalkwayFactor) isCosting_Options_HasWalkwayFactor() {}

type isCosting_Options_HasSidewalkFactor interface {
	isCosting_Options_HasSidewalkFactor()
}

type Costing_Options_SidewalkFactor struct {
	SidewalkFactor float32 `protobuf:"fixed32,23,opt,name=sidewalk_factor,json=sidewalkFactor,proto3,oneof"`
}

func (*Costing_Options_SidewalkFactor) isCosting_Options_HasSidewalkFactor() {}

type isCosting_Options_HasAlleyFactor interface {
	isCosting_Options_HasAlleyFactor()
}

type Costing_Options_AlleyFactor struct {
	AlleyFactor float32 `protobuf:"fixed32,24,opt,name=alley_factor,json=alleyFactor,proto3,oneof"`
}

func (*Costing_Options_AlleyFactor) isCosting_Options_HasAlleyFactor() {}

type isCosting_Options_HasDrivewayFactor interface {
	isCosting_Options_HasDrivewayFactor()
}

type Costing_Options_DrivewayFactor struct {
	DrivewayFactor float32 `protobuf:"fixed32,25,opt,name=driveway_factor,json=drivewayFactor,proto3,oneof"`
}

func (*Costing_Options_DrivewayFactor) isCosting_Options_HasDrivewayFactor() {}

type isCosting_Options_HasDrivewayPenalty interface {
	isCosting_Options_HasDrivewayPenalty()
}

type Costing_Options_DrivewayPenalty struct {
	DrivewayPenalty float32 `protobuf:"fixed32,26,opt,name=driveway_penalty,json=drivewayPenalty,proto3,oneof"`
}

func (*Costing_Options_DrivewayPenalty) isCosting_Options_HasDrivewayPenalty() {}

type isCosting_Options_HasTransitStartEndMaxDistance interface {
	isCosting_Options_HasTransitStartEndMaxDistance()
}

type Costing_Options_TransitStartEndMaxDistance struct {
	TransitStartEndMaxDistance uint32 `protobuf:"varint,27,opt,name=transit_start_end_max_distance,json=transitStartEndMaxDistance,proto3,oneof"`
}

func (*Costing_Options_TransitStartEndMaxDistance) isCosting_Options_HasTransitStartEndMaxDistance() {
}

type isCosting_Options_HasTransitTransferMaxDistance interface {
	isCosting_Options_HasTransitTransferMaxDistance()
}

type Costing_Options_TransitTransferMaxDistance struct {
	TransitTransferMaxDistance uint32 `protobuf:"varint,28,opt,name=transit_transfer_max_distance,json=transitTransferMaxDistance,proto3,oneof"`
}

func (*Costing_Options_TransitTransferMaxDistance) isCosting_Options_HasTransitTransferMaxDistance() {
}

type isCosting_Options_HasTransportType interface {
	isCosting_Options_HasTransportType()
}

type Costing_Options_TransportType struct {
	TransportType string `protobuf:"bytes,29,opt,name=transport_type,json=transportType,proto3,oneof"`
}

func (*Costing_Options_TransportType) isCosting_Options_HasTransportType() {}

type isCosting_Options_HasTopSpeed interface {
	isCosting_Options_HasTopSpeed()
}

type Costing_Options_TopSpeed struct {
	TopSpeed float32 `protobuf:"fixed32,30,opt,name=top_speed,json=topSpeed,proto3,oneof"`
}

func (*Costing_Options_TopSpeed) isCosting_Options_HasTopSpeed() {}

type isCosting_Options_HasUseHills interface {
	isCosting_Options_HasUseHills()
}

type Costing_Options_UseHills struct {
	UseHills float32 `protobuf:"fixed32,31,opt,name=use_hills,json=useHills,proto3,oneof"`
}

func (*Costing_Options_UseHills) isCosting_Options_HasUseHills() {}

type isCosting_Options_HasUsePrimary interface {
	isCosting_Options_HasUsePrimary()
}

type Costing_Options_UsePrimary struct {
	UsePrimary float32 `protobuf:"fixed32,32,opt,name=use_primary,json=usePrimary,proto3,oneof"`
}

func (*Costing_Options_UsePrimary) isCosting_Options_HasUsePrimary() {}

type isCosting_Options_HasUseTrails interface {
	isCosting_Options_HasUseTrails()
}

type Costing_Options_UseTrails struct {
	UseTrails float32 `protobuf:"fixed32,33,opt,name=use_trails,json=useTrails,proto3,oneof"`
}

func (*Costing_Options_UseTrails) isCosting_Options_HasUseTrails() {}

type isCosting_Options_HasLowClassPenalty interface {
	isCosting_Options_HasLowClassPenalty()
}

type Costing_Options_LowClassPenalty struct {
	LowClassPenalty float32 `protobuf:"fixed32,34,opt,name=low_class_penalty,json=lowClassPenalty,proto3,oneof"`
}

func (*Costing_Options_LowClassPenalty) isCosting_Options_HasLowClassPenalty() {}

type isCosting_Options_HasHazmat interface {
	isCosting_Options_HasHazmat()
}

type Costing_Options_Hazmat struct {
	Hazmat bool `protobuf:"varint,35,opt,name=hazmat,proto3,oneof"`
}

func (*Costing_Options_Hazmat) isCosting_Options_HasHazmat() {}

type isCosting_Options_HasWeight interface {
	isCosting_Options_HasWeight()
}

type Costing_Options_Weight struct {
	Weight float32 `protobuf:"fixed32,36,opt,name=weight,proto3,oneof"`
}

func (*Costing_Options_Weight) isCosting_Options_HasWeight() {}

type isCosting_Options_HasAxleLoad interface {
	isCosting_Options_HasAxleLoad()
}

type Costing_Options_AxleLoad struct {
	AxleLoad float32 `protobuf:"fixed32,37,opt,name=axle_load,json=axleLoad,proto3,oneof"`
}

func (*Costing_Options_AxleLoad) isCosting_Options_HasAxleLoad() {}

type isCosting_Options_HasHeight interface {
	isCosting_Options_HasHeight()
}

type Costing_Options_Height struct {
	Height float32 `protobuf:"fixed32,38,opt,name=height,proto3,oneof"`
}

func (*Costing_Options_Height) isCosting_Options_HasHeight() {}

type isCosting_Options_HasWidth interface {
	isCosting_Options_HasWidth()
}

type Costing_Options_Width struct {
	Width float32 `protobuf:"fixed32,39,opt,name=width,proto3,oneof"`
}

func (*Costing_Options_Width) isCosting_Options_HasWidth() {}

type isCosting_Options_HasLength interface {
	isCosting_Options_HasLength()
}

type Costing_Options_Length struct {
	Length float32 `protobuf:"fixed32,40,opt,name=length,proto3,oneof"`
}

func (*Costing_Options_Length) isCosting_Options_HasLength() {}

type isCosting_Options_HasCyclingSpeed interface {
	isCosting_Options_HasCyclingSpeed()
}

type Costing_Options_CyclingSpeed struct {
	CyclingSpeed float32 `protobuf:"fixed32,41,opt,name=cycling_speed,json=cyclingSpeed,proto3,oneof"`
}

func (*Costing_Options_CyclingSpeed) isCosting_Options_HasCyclingSpeed() {}

type isCosting_Options_HasWheelchair interface {
	isCosting_Options_HasWheelchair()
}

type Costing_Options_Wheelchair struct {
	Wheelchair bool `protobuf:"varint,42,opt,name=wheelchair,proto3,oneof"`
}

func (*Costing_Options_Wheelchair) isCosting_Options_HasWheelchair() {}

type isCosting_Options_HasBicycle interface {
	isCosting_Options_HasBicycle()
}

type Costing_Options_Bicycle struct {
	Bicycle bool `protobuf:"varint,43,opt,name=bicycle,proto3,oneof"`
}

func (*Costing_Options_Bicycle) isCosting_Options_HasBicycle() {}

type isCosting_Options_HasUseBus interface {
	isCosting_Options_HasUseBus()
}

type Costing_Options_UseBus struct {
	UseBus float32 `protobuf:"fixed32,44,opt,name=use_bus,json=useBus,proto3,oneof"`
}

func (*Costing_Options_UseBus) isCosting_Options_HasUseBus() {}

type isCosting_Options_HasUseRail interface {
	isCosting_Options_HasUseRail()
}

type Costing_Options_UseRail struct {
	UseRail float32 `protobuf:"fixed32,45,opt,name=use_rail,json=useRail,proto3,oneof"`
}

func (*Costing_Options_UseRail) isCosting_Options_HasUseRail() {}

type isCosting_Options_HasUseTransfers interface {
	isCosting_Options_HasUseTransfers()
}

type Costing_Options_UseTransfers struct {
	UseTransfers float32 `protobuf:"fixed32,46,opt,name=use_transfers,json=useTransfers,proto3,oneof"`
}

func (*Costing_Options_UseTransfers) isCosting_Options_HasUseTransfers() {}

type isCosting_Options_HasTransferCost interface {
	isCosting_Options_HasTransferCost()
}

type Costing_Options_TransferCost struct {
	TransferCost float32 `protobuf:"fixed32,47,opt,name=transfer_cost,json=transferCost,proto3,oneof"`
}

func (*Costing_Options_TransferCost) isCosting_Options_HasTransferCost() {}

type isCosting_Options_HasTransferPenalty interface {
	isCosting_Options_HasTransferPenalty()
}

type Costing_Options_TransferPenalty struct {
	TransferPenalty float32 `protobuf:"fixed32,48,opt,name=transfer_penalty,json=transferPenalty,proto3,oneof"`
}

func (*Costing_Options_TransferPenalty) isCosting_Options_HasTransferPenalty() {}

type isCosting_Options_HasFlowMask interface {
	isCosting_Options_HasFlowMask()
}

type Costing_Options_FlowMask struct {
	FlowMask uint32 `protobuf:"varint,55,opt,name=flow_mask,json=flowMask,proto3,oneof"`
}

func (*Costing_Options_FlowMask) isCosting_Options_HasFlowMask() {}

type isCosting_Options_HasBikeShareCost interface {
	isCosting_Options_HasBikeShareCost()
}

type Costing_Options_BikeShareCost struct {
	BikeShareCost float32 `protobuf:"fixed32,56,opt,name=bike_share_cost,json=bikeShareCost,proto3,oneof"`
}

func (*Costing_Options_BikeShareCost) isCosting_Options_HasBikeShareCost() {}

type isCosting_Options_HasBikeSharePenalty interface {
	isCosting_Options_HasBikeSharePenalty()
}

type Costing_Options_BikeSharePenalty struct {
	BikeSharePenalty float32 `protobuf:"fixed32,57,opt,name=bike_share_penalty,json=bikeSharePenalty,proto3,oneof"`
}

func (*Costing_Options_BikeSharePenalty) isCosting_Options_HasBikeSharePenalty() {}

type isCosting_Options_HasRailFerryCost interface {
	isCosting_Options_HasRailFerryCost()
}

type Costing_Options_RailFerryCost struct {
	RailFerryCost float32 `protobuf:"fixed32,58,opt,name=rail_ferry_cost,json=railFerryCost,proto3,oneof"`
}

func (*Costing_Options_RailFerryCost) isCosting_Options_HasRailFerryCost() {}

type isCosting_Options_HasUseRailFerry interface {
	isCosting_Options_HasUseRailFerry()
}

type Costing_Options_UseRailFerry struct {
	UseRailFerry float32 `protobuf:"fixed32,59,opt,name=use_rail_ferry,json=useRailFerry,proto3,oneof"`
}

func (*Costing_Options_UseRailFerry) isCosting_Options_HasUseRailFerry() {}

type isCosting_Options_HasIgnoreRestrictions interface {
	isCosting_Options_HasIgnoreRestrictions()
}

type Costing_Options_IgnoreRestrictions struct {
	IgnoreRestrictions bool `protobuf:"varint,60,opt,name=ignore_restrictions,json=ignoreRestrictions,proto3,oneof"`
}

func (*Costing_Options_IgnoreRestrictions) isCosting_Options_HasIgnoreRestrictions() {}

type isCosting_Options_HasIgnoreOneways interface {
	isCosting_Options_HasIgnoreOneways()
}

type Costing_Options_IgnoreOneways struct {
	IgnoreOneways bool `protobuf:"varint,61,opt,name=ignore_oneways,json=ignoreOneways,proto3,oneof"`
}

func (*Costing_Options_IgnoreOneways) isCosting_Options_HasIgnoreOneways() {}

type isCosting_Options_HasIgnoreAccess interface {
	isCosting_Options_HasIgnoreAccess()
}

type Costing_Options_IgnoreAccess struct {
	IgnoreAccess bool `protobuf:"varint,62,opt,name=ignore_access,json=ignoreAccess,proto3,oneof"`
}

func (*Costing_Options_IgnoreAccess) isCosting_Options_HasIgnoreAccess() {}

type isCosting_Options_HasIgnoreClosures interface {
	isCosting_Options_HasIgnoreClosures()
}

type Costing_Options_IgnoreClosures struct {
	IgnoreClosures bool `protobuf:"varint,63,opt,name=ignore_closures,json=ignoreClosures,proto3,oneof"`
}

func (*Costing_Options_IgnoreClosures) isCosting_Options_HasIgnoreClosures() {}

type isCosting_Options_HasShortest interface {
	isCosting_Options_HasShortest()
}

type Costing_Options_Shortest struct {
	Shortest bool `protobuf:"varint,64,opt,name=shortest,proto3,oneof"`
}

func (*Costing_Options_Shortest) isCosting_Options_HasShortest() {}

type isCosting_Options_HasServicePenalty interface {
	isCosting_Options_HasServicePenalty()
}

type Costing_Options_ServicePenalty struct {
	ServicePenalty float32 `protobuf:"fixed32,65,opt,name=service_penalty,json=servicePenalty,proto3,oneof"`
}

func (*Costing_Options_ServicePenalty) isCosting_Options_HasServicePenalty() {}

type isCosting_Options_HasUseTracks interface {
	isCosting_Options_HasUseTracks()
}

type Costing_Options_UseTracks struct {
	UseTracks float32 `protobuf:"fixed32,66,opt,name=use_tracks,json=useTracks,proto3,oneof"`
}

func (*Costing_Options_UseTracks) isCosting_Options_HasUseTracks() {}

type isCosting_Options_HasUseDistance interface {
	isCosting_Options_HasUseDistance()
}

type Costing_Options_UseDistance struct {
	UseDistance float32 `protobuf:"fixed32,67,opt,name=use_distance,json=useDistance,proto3,oneof"`
}

func (*Costing_Options_UseDistance) isCosting_Options_HasUseDistance() {}

type isCosting_Options_HasUseLivingStreets interface {
	isCosting_Options_HasUseLivingStreets()
}

type Costing_Options_UseLivingStreets struct {
	UseLivingStreets float32 `protobuf:"fixed32,68,opt,name=use_living_streets,json=useLivingStreets,proto3,oneof"`
}

func (*Costing_Options_UseLivingStreets) isCosting_Options_HasUseLivingStreets() {}

type isCosting_Options_HasServiceFactor interface {
	isCosting_Options_HasServiceFactor()
}

type Costing_Options_ServiceFactor struct {
	ServiceFactor float32 `protobuf:"fixed32,69,opt,name=service_factor,json=serviceFactor,proto3,oneof"`
}

func (*Costing_Options_ServiceFactor) isCosting_Options_HasServiceFactor() {}

type isCosting_Options_HasClosureFactor interface {
	isCosting_Options_HasClosureFactor()
}

type Costing_Options_ClosureFactor struct {
	ClosureFactor float32 `protobuf:"fixed32,70,opt,name=closure_factor,json=closureFactor,proto3,oneof"`
}

func (*Costing_Options_ClosureFactor) isCosting_Options_HasClosureFactor() {}

type isCosting_Options_HasPrivateAccessPenalty interface {
	isCosting_Options_HasPrivateAccessPenalty()
}

type Costing_Options_PrivateAccessPenalty struct {
	PrivateAccessPenalty float32 `protobuf:"fixed32,71,opt,name=private_access_penalty,json=privateAccessPenalty,proto3,oneof"`
}

func (*Costing_Options_PrivateAccessPenalty) isCosting_Options_HasPrivateAccessPenalty() {}

type isCosting_Options_HasExcludeUnpaved interface {
	isCosting_Options_HasExcludeUnpaved()
}

type Costing_Options_ExcludeUnpaved struct {
	ExcludeUnpaved bool `protobuf:"varint,72,opt,name=exclude_unpaved,json=excludeUnpaved,proto3,oneof"`
}

func (*Costing_Options_ExcludeUnpaved) isCosting_Options_HasExcludeUnpaved() {}

type isCosting_Options_HasIncludeHot interface {
	isCosting_Options_HasIncludeHot()
}

type Costing_Options_IncludeHot struct {
	IncludeHot bool `protobuf:"varint,73,opt,name=include_hot,json=includeHot,proto3,oneof"`
}

func (*Costing_Options_IncludeHot) isCosting_Options_HasIncludeHot() {}

type isCosting_Options_HasIncludeHov2 interface {
	isCosting_Options_HasIncludeHov2()
}

type Costing_Options_IncludeHov2 struct {
	IncludeHov2 bool `protobuf:"varint,74,opt,name=include_hov2,json=includeHov2,proto3,oneof"`
}

func (*Costing_Options_IncludeHov2) isCosting_Options_HasIncludeHov2() {}

type isCosting_Options_HasIncludeHov3 interface {
	isCosting_Options_HasIncludeHov3()
}

type Costing_Options_IncludeHov3 struct {
	IncludeHov3 bool `protobuf:"varint,75,opt,name=include_hov3,json=includeHov3,proto3,oneof"`
}

func (*Costing_Options_IncludeHov3) isCosting_Options_HasIncludeHov3() {}

type isCosting_Options_HasExcludeCashOnlyTolls interface {
	isCosting_Options_HasExcludeCashOnlyTolls()
}

type Costing_Options_ExcludeCashOnlyTolls struct {
	ExcludeCashOnlyTolls bool `protobuf:"varint,76,opt,name=exclude_cash_only_tolls,json=excludeCashOnlyTolls,proto3,oneof"`
}

func (*Costing_Options_ExcludeCashOnlyTolls) isCosting_Options_HasExcludeCashOnlyTolls() {}

type isCosting_Options_HasRestrictionProbability interface {
	isCosting_Options_HasRestrictionProbability()
}

type Costing_Options_RestrictionProbability struct {
	RestrictionProbability uint32 `protobuf:"varint,77,opt,name=restriction_probability,json=restrictionProbability,proto3,oneof"`
}

func (*Costing_Options_RestrictionProbability) isCosting_Options_HasRestrictionProbability() {}

type isCosting_Options_HasElevatorPenalty interface {
	isCosting_Options_HasElevatorPenalty()
}

type Costing_Options_ElevatorPenalty struct {
	ElevatorPenalty float32 `protobuf:"fixed32,79,opt,name=elevator_penalty,json=elevatorPenalty,proto3,oneof"`
}

func (*Costing_Options_ElevatorPenalty) isCosting_Options_HasElevatorPenalty() {}

type isCosting_Options_HasHgvNoAccessPenalty interface {
	isCosting_Options_HasHgvNoAccessPenalty()
}

type Costing_Options_HgvNoAccessPenalty struct {
	HgvNoAccessPenalty float32 `protobuf:"fixed32,85,opt,name=hgv_no_access_penalty,json=hgvNoAccessPenalty,proto3,oneof"`
}

func (*Costing_Options_HgvNoAccessPenalty) isCosting_Options_HasHgvNoAccessPenalty() {}

var File_options_proto protoreflect.FileDescriptor

const file_options_proto_rawDesc = "" +
	"\n" +
	"\roptions.proto\x12\bvalhalla\x1a\fcommon.proto\"~\n" +
	"\aContour\x12\x14\n" +
	"\x04time\x18\x01 \x01(\x02H\x00R\x04time\x12\x16\n" +
	"\x05color\x18\x02 \x01(\tH\x01R\x05color\x12\x1c\n" +
	"\bdistance\x18\x03 \x01(\x02H\x02R\bdistanceB\n" +
	"\n" +
	"\bhas_timeB\v\n" +
	"\thas_colorB\x0e\n" +
	"\fhas_distance\"0\n" +
	"\x04Ring\x12(\n" +
	"\x06coords\x18\x01 \x03(\v2\x10.valhalla.LatLngR\x06coords\"\xcc\x01\n" +
	"\x10PbfFieldSelector\x12\x18\n" +
	"\aoptions\x18\x01 \x01(\bR\aoptions\x12\x12\n" +
	"\x04trip\x18\x02 \x01(\bR\x04trip\x12\x1e\n" +
	"\n" +
	"directions\x18\x03 \x01(\bR\n" +
	"directions\x12\x16\n" +
	"\x06status\x18\x04 \x01(\bR\x06status\x12\x16\n" +
	"\x06matrix\x18\x05 \x01(\bR\x06matrix\x12\x1c\n" +
	"\tisochrone\x18\x06 \x01(\bR\tisochrone\x12\x1c\n" +
	"\texpansion\x18\t \x01(\bR\texpansion\"c\n" +
	"\tAvoidEdge\x12\x10\n" +
	"\x02id\x18\x01 \x01(\x04H\x00R\x02id\x12%\n" +
	"\rpercent_along\x18\x02 \x01(\x02H\x01R\fpercentAlongB\b\n" +
	"\x06has_idB\x13\n" +
	"\x11has_percent_along\"\x9d\x01\n" +
	"\x0fHierarchyLimits\x12.\n" +
	"\x13up_transition_count\x18\x01 \x01(\rR\x11upTransitionCount\x12,\n" +
	"\x12max_up_transitions\x18\x02 \x01(\rR\x10maxUpTransitions\x12,\n" +
	"\x12expand_within_dist\x18\x03 \x01(\x02R\x10expandWithinDist\"\x93/\n" +
	"\aCosting\x125\n" +
	"\aoptions\x18\x01 \x01(\v2\x19.valhalla.Costing.OptionsH\x00R\aoptions\x12*\n" +
	"\x04type\x18\x02 \x01(\x0e2\x16.valhalla.Costing.TypeR\x04type\x12\x14\n" +
	"\x04name\x18\x03 \x01(\tH\x01R\x04name\x12)\n" +
	"\x0ffilter_closures\x18\x04 \x01(\bH\x02R\x0efilterClosures\x1a\x88,\n" +
	"\aOptions\x12+\n" +
	"\x10maneuver_penalty\x18\x01 \x01(\x02H\x00R\x0fmaneuverPenalty\x12:\n" +
	"\x18destination_only_penalty\x18\x02 \x01(\x02H\x01R\x16destinationOnlyPenalty\x12\x1d\n" +
	"\tgate_cost\x18\x03 \x01(\x02H\x02R\bgateCost\x12#\n" +
	"\fgate_penalty\x18\x04 \x01(\x02H\x03R\vgatePenalty\x12(\n" +
	"\x0ftoll_booth_cost\x18\x05 \x01(\x02H\x04R\rtollBoothCost\x12.\n" +
	"\x12toll_booth_penalty\x18\x06 \x01(\x02H\x05R\x10tollBoothPenalty\x12%\n" +
	"\ralley_penalty\x18\a \x01(\x02H\x06R\falleyPenalty\x124\n" +
	"\x15country_crossing_cost\x18\b \x01(\x02H\aR\x13countryCrossingCost\x12:\n" +
	"\x18country_crossing_penalty\x18\t \x01(\x02H\bR\x16countryCrossingPenalty\x12\x1f\n" +
	"\n" +
	"ferry_cost\x18\n" +
	" \x01(\x02H\tR\tferryCost\x12.\n" +
	"\x12avoid_bad_surfaces\x18\v \x01(\x02H\n" +
	"R\x10avoidBadSurfaces\x12\x1d\n" +
	"\tuse_ferry\x18\f \x01(\x02H\vR\buseFerry\x12#\n" +
	"\fuse_highways\x18\r \x01(\x02H\fR\vuseHighways\x12\x1d\n" +
	"\tuse_tolls\x18\x0e \x01(\x02H\rR\buseTolls\x12\x1d\n" +
	"\tuse_roads\x18\x0f \x01(\x02H\x0eR\buseRoads\x12#\n" +
	"\fmax_distance\x18\x10 \x01(\rH\x0fR\vmaxDistance\x12%\n" +
	"\rwalking_speed\x18\x11 \x01(\x02H\x10R\fwalkingSpeed\x12#\n" +
	"\fstep_penalty\x18\x12 \x01(\x02H\x11R\vstepPenalty\x12\x1d\n" +
	"\tmax_grade\x18\x13 \x01(\rH\x12R\bmaxGrade\x124\n" +
	"\x15max_hiking_difficulty\x18\x14 \x01(\rH\x13R\x13maxHikingDifficulty\x12!\n" +
	"\vmode_factor\x18\x15 \x01(\x02H\x14R\n" +
	"modeFactor\x12'\n" +
	"\x0ewalkway_factor\x18\x16 \x01(\x02H\x15R\rwalkwayFactor\x12)\n" +
	"\x0fsidewalk_factor\x18\x17 \x01(\x02H\x16R\x0esidewalkFactor\x12#\n" +
	"\falley_factor\x18\x18 \x01(\x02H\x17R\valleyFactor\x12)\n" +
	"\x0fdriveway_factor\x18\x19 \x01(\x02H\x18R\x0edrivewayFactor\x12+\n" +
	"\x10driveway_penalty\x18\x1a \x01(\x02H\x19R\x0fdrivewayPenalty\x12D\n" +
	"\x1etransit_start_end_max_distance\x18\x1b \x01(\rH\x1aR\x1atransitStartEndMaxDistance\x12C\n" +
	"\x1dtransit_transfer_max_distance\x18\x1c \x01(\rH\x1bR\x1atransitTransferMaxDistance\x12'\n" +
	"\x0etransport_type\x18\x1d \x01(\tH\x1cR\rtransportType\x12\x1d\n" +
	"\ttop_speed\x18\x1e \x01(\x02H\x1dR\btopSpeed\x12\x1d\n" +
	"\tuse_hills\x18\x1f \x01(\x02H\x1eR\buseHills\x12!\n" +
	"\vuse_primary\x18  \x01(\x02H\x1fR\n" +
	"usePrimary\x12\x1f\n" +
	"\n" +
	"use_trails\x18! \x01(\x02H R\tuseTrails\x12,\n" +
	"\x11low_class_penalty\x18\" \x01(\x02H!R\x0flowClassPenalty\x12\x18\n" +
	"\x06hazmat\x18# \x01(\bH\"R\x06hazmat\x12\x18\n" +
	"\x06weight\x18$ \x01(\x02H#R\x06weight\x12\x1d\n" +
	"\taxle_load\x18% \x01(\x02H$R\baxleLoad\x12\x18\n" +
	"\x06height\x18& \x01(\x02H%R\x06height\x12\x16\n" +
	"\x05width\x18' \x01(\x02H&R\x05width\x12\x18\n" +
	"\x06length\x18( \x01(\x02H'R\x06length\x12%\n" +
	"\rcycling_speed\x18) \x01(\x02H(R\fcyclingSpeed\x12 \n" +
	"\n" +
	"wheelchair\x18* \x01(\bH)R\n" +
	"wheelchair\x12\x1a\n" +
	"\abicycle\x18+ \x01(\bH*R\abicycle\x12\x19\n" +
	"\ause_bus\x18, \x01(\x02H+R\x06useBus\x12\x1b\n" +
	"\buse_rail\x18- \x01(\x02H,R\auseRail\x12%\n" +
	"\ruse_transfers\x18. \x01(\x02H-R\fuseTransfers\x12%\n" +
	"\rtransfer_cost\x18/ \x01(\x02H.R\ftransferCost\x12+\n" +
	"\x10transfer_penalty\x180 \x01(\x02H/R\x0ftransferPenalty\x12D\n" +
	"\x12filter_stop_action\x181 \x01(\x0e2\x16.valhalla.FilterActionR\x10filterStopAction\x12&\n" +
	"\x0ffilter_stop_ids\x182 \x03(\tR\rfilterStopIds\x12L\n" +
	"\x16filter_operator_action\x183 \x01(\x0e2\x16.valhalla.FilterActionR\x14filterOperatorAction\x12.\n" +
	"\x13filter_operator_ids\x184 \x03(\tR\x11filterOperatorIds\x12F\n" +
	"\x13filter_route_action\x185 \x01(\x0e2\x16.valhalla.FilterActionR\x11filterRouteAction\x12(\n" +
	"\x10filter_route_ids\x186 \x03(\tR\x0efilterRouteIds\x12\x1d\n" +
	"\tflow_mask\x187 \x01(\rH0R\bflowMask\x12(\n" +
	"\x0fbike_share_cost\x188 \x01(\x02H1R\rbikeShareCost\x12.\n" +
	"\x12bike_share_penalty\x189 \x01(\x02H2R\x10bikeSharePenalty\x12(\n" +
	"\x0frail_ferry_cost\x18: \x01(\x02H3R\rrailFerryCost\x12&\n" +
	"\x0euse_rail_ferry\x18; \x01(\x02H4R\fuseRailFerry\x121\n" +
	"\x13ignore_restrictions\x18< \x01(\bH5R\x12ignoreRestrictions\x12'\n" +
	"\x0eignore_oneways\x18= \x01(\bH6R\rignoreOneways\x12%\n" +
	"\rignore_access\x18> \x01(\bH7R\fignoreAccess\x12)\n" +
	"\x0fignore_closures\x18? \x01(\bH8R\x0eignoreClosures\x12\x1c\n" +
	"\bshortest\x18@ \x01(\bH9R\bshortest\x12)\n" +
	"\x0fservice_penalty\x18A \x01(\x02H:R\x0eservicePenalty\x12\x1f\n" +
	"\n" +
	"use_tracks\x18B \x01(\x02H;R\tuseTracks\x12#\n" +
	"\fuse_distance\x18C \x01(\x02H<R\vuseDistance\x12.\n" +
	"\x12use_living_streets\x18D \x01(\x02H=R\x10useLivingStreets\x12'\n" +
	"\x0eservice_factor\x18E \x01(\x02H>R\rserviceFactor\x12'\n" +
	"\x0eclosure_factor\x18F \x01(\x02H?R\rclosureFactor\x126\n" +
	"\x16private_access_penalty\x18G \x01(\x02H@R\x14privateAccessPenalty\x12)\n" +
	"\x0fexclude_unpaved\x18H \x01(\bHAR\x0eexcludeUnpaved\x12!\n" +
	"\vinclude_hot\x18I \x01(\bHBR\n" +
	"includeHot\x12#\n" +
	"\finclude_hov2\x18J \x01(\bHCR\vincludeHov2\x12#\n" +
	"\finclude_hov3\x18K \x01(\bHDR\vincludeHov3\x127\n" +
	"\x17exclude_cash_only_tolls\x18L \x01(\bHER\x14excludeCashOnlyTolls\x129\n" +
	"\x17restriction_probability\x18M \x01(\rHFR\x16restrictionProbability\x128\n" +
	"\rexclude_edges\x18N \x03(\v2\x13.valhalla.AvoidEdgeR\fexcludeEdges\x12+\n" +
	"\x10elevator_penalty\x18O \x01(\x02HGR\x0felevatorPenalty\x12\x1f\n" +
	"\vfixed_speed\x18P \x01(\rR\n" +
	"fixedSpeed\x12\x1d\n" +
	"\n" +
	"axle_count\x18Q \x01(\rR\taxleCount\x12\x17\n" +
	"\ause_lit\x18R \x01(\x02R\x06useLit\x12:\n" +
	"\x19disable_hierarchy_pruning\x18S \x01(\bR\x17disableHierarchyPruning\x12I\n" +
	"!ignore_non_vehicular_restrictions\x18T \x01(\bR\x1eignoreNonVehicularRestrictions\x123\n" +
	"\x15hgv_no_access_penalty\x18U \x01(\x02HHR\x12hgvNoAccessPenalty\x12&\n" +
	"\x0fuse_truck_route\x18V \x01(\x02R\ruseTruckRoute\x12'\n" +
	"\x0fexclude_bridges\x18W \x01(\bR\x0eexcludeBridges\x12'\n" +
	"\x0fexclude_tunnels\x18X \x01(\bR\x0eexcludeTunnels\x12#\n" +
	"\rexclude_tolls\x18Y \x01(\bR\fexcludeTolls\x12)\n" +
	"\x10exclude_highways\x18Z \x01(\bR\x0fexcludeHighways\x12'\n" +
	"\x0fexclude_ferries\x18[ \x01(\bR\x0eexcludeFerries\x12Y\n" +
	"\x10hierarchy_limits\x18\\ \x03(\v2..valhalla.Costing.Options.HierarchyLimitsEntryR\x0fhierarchyLimits\x12/\n" +
	"\x13ignore_construction\x18] \x01(\bR\x12ignoreConstruction\x1a]\n" +
	"\x14HierarchyLimitsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.valhalla.HierarchyLimitsR\x05value:\x028\x01B\x16\n" +
	"\x14has_maneuver_penaltyB\x1e\n" +
	"\x1chas_destination_only_penaltyB\x0f\n" +
	"\rhas_gate_costB\x12\n" +
	"\x10has_gate_penaltyB\x15\n" +
	"\x13has_toll_booth_costB\x18\n" +
	"\x16has_toll_booth_penaltyB\x13\n" +
	"\x11has_alley_penaltyB\x1b\n" +
	"\x19has_country_crossing_costB\x1e\n" +
	"\x1chas_country_crossing_penaltyB\x10\n" +
	"\x0ehas_ferry_costB\x18\n" +
	"\x16has_avoid_bad_surfacesB\x0f\n" +
	"\rhas_use_ferryB\x12\n" +
	"\x10has_use_highwaysB\x0f\n" +
	"\rhas_use_tollsB\x0f\n" +
	"\rhas_use_roadsB\x12\n" +
	"\x10has_max_distanceB\x13\n" +
	"\x11has_walking_speedB\x12\n" +
	"\x10has_step_penaltyB\x0f\n" +
	"\rhas_max_gradeB\x1b\n" +
	"\x19has_max_hiking_difficultyB\x11\n" +
	"\x0fhas_mode_factorB\x14\n" +
	"\x12has_walkway_factorB\x15\n" +
	"\x13has_sidewalk_factorB\x12\n" +
	"\x10has_alley_factorB\x15\n" +
	"\x13has_driveway_factorB\x16\n" +
	"\x14has_driveway_penaltyB$\n" +
	"\"has_transit_start_end_max_distanceB#\n" +
	"!has_transit_transfer_max_distanceB\x14\n" +
	"\x12has_transport_typeB\x0f\n" +
	"\rhas_top_speedB\x0f\n" +
	"\rhas_use_hillsB\x11\n" +
	"\x0fhas_use_primaryB\x10\n" +
	"\x0ehas_use_trailsB\x17\n" +
	"\x15has_low_class_penaltyB\f\n" +
	"\n" +
	"has_hazmatB\f\n" +
	"\n" +
	"has_weightB\x0f\n" +
	"\rhas_axle_loadB\f\n" +
	"\n" +
	"has_heightB\v\n" +
	"\thas_widthB\f\n" +
	"\n" +
	"has_lengthB\x13\n" +
	"\x11has_cycling_speedB\x10\n" +
	"\x0ehas_wheelchairB\r\n" +
	"\vhas_bicycleB\r\n" +
	"\vhas_use_busB\x0e\n" +
	"\fhas_use_railB\x13\n" +
	"\x11has_use_transfersB\x13\n" +
	"\x11has_transfer_costB\x16\n" +
	"\x14has_transfer_penaltyB\x0f\n" +
	"\rhas_flow_maskB\x15\n" +
	"\x13has_bike_share_costB\x18\n" +
	"\x16has_bike_share_penaltyB\x15\n" +
	"\x13has_rail_ferry_costB\x14\n" +
	"\x12has_use_rail_ferryB\x19\n" +
	"\x17has_ignore_restrictionsB\x14\n" +
	"\x12has_ignore_onewaysB\x13\n" +
	"\x11has_ignore_accessB\x15\n" +
	"\x13has_ignore_closuresB\x0e\n" +
	"\fhas_shortestB\x15\n" +
	"\x13has_service_penaltyB\x10\n" +
	"\x0ehas_use_tracksB\x12\n" +
	"\x10has_use_distanceB\x18\n" +
	"\x16has_use_living_streetsB\x14\n" +
	"\x12has_service_factorB\x14\n" +
	"\x12has_closure_factorB\x1c\n" +
	"\x1ahas_private_access_penaltyB\x15\n" +
	"\x13has_exclude_unpavedB\x11\n" +
	"\x0fhas_include_hotB\x12\n" +
	"\x10has_include_hov2B\x12\n" +
	"\x10has_include_hov3B\x1d\n" +
	"\x1bhas_exclude_cash_only_tollsB\x1d\n" +
	"\x1bhas_restriction_probabilityB\x16\n" +
	"\x14has_elevator_penaltyB\x1b\n" +
	"\x19has_hgv_no_access_penalty\"\xa6\x01\n" +
	"\x04Type\x12\t\n" +
	"\x05none_\x10\x00\x12\v\n" +
	"\abicycle\x10\x01\x12\a\n" +
	"\x03bus\x10\x02\x12\x11\n" +
	"\rmotor_scooter\x10\x03\x12\x0e\n" +
	"\n" +
	"multimodal\x10\x04\x12\x0e\n" +
	"\n" +
	"pedestrian\x10\x05\x12\v\n" +
	"\atransit\x10\x06\x12\t\n" +
	"\x05truck\x10\a\x12\x0e\n" +
	"\n" +
	"motorcycle\x10\b\x12\b\n" +
	"\x04taxi\x10\t\x12\t\n" +
	"\x05auto_\x10\n" +
	"\x12\r\n" +
	"\tbikeshare\x10\vB\r\n" +
	"\vhas_optionsB\n" +
	"\n" +
	"\bhas_nameB\x15\n" +
	"\x13has_filter_closures\"\xd1\x1d\n" +
	"\aOptions\x12-\n" +
	"\x05units\x18\x01 \x01(\x0e2\x17.valhalla.Options.UnitsR\x05units\x12\x1c\n" +
	"\blanguage\x18\x02 \x01(\tH\x00R\blanguage\x12A\n" +
	"\x0fdirections_type\x18\x03 \x01(\x0e2\x18.valhalla.DirectionsTypeR\x0edirectionsType\x120\n" +
	"\x06format\x18\x04 \x01(\x0e2\x18.valhalla.Options.FormatR\x06format\x12\x10\n" +
	"\x02id\x18\x05 \x01(\tH\x01R\x02id\x12\x16\n" +
	"\x05jsonp\x18\x06 \x01(\tH\x02R\x05jsonp\x12+\n" +
	"\x10encoded_polyline\x18\a \x01(\tH\x03R\x0fencodedPolyline\x120\n" +
	"\x06action\x18\b \x01(\x0e2\x18.valhalla.Options.ActionR\x06action\x12\x16\n" +
	"\x05range\x18\n" +
	" \x01(\bH\x04R\x05range\x12\x1a\n" +
	"\averbose\x18\v \x01(\bH\x05R\averbose\x129\n" +
	"\fcosting_type\x18\f \x01(\x0e2\x16.valhalla.Costing.TypeR\vcostingType\x12;\n" +
	"\bcostings\x18\r \x03(\v2\x1f.valhalla.Options.CostingsEntryR\bcostings\x120\n" +
	"\tlocations\x18\x0e \x03(\v2\x12.valhalla.LocationR\tlocations\x12?\n" +
	"\x11exclude_locations\x18\x0f \x03(\v2\x12.valhalla.LocationR\x10excludeLocations\x12,\n" +
	"\asources\x18\x10 \x03(\v2\x12.valhalla.LocationR\asources\x12,\n" +
	"\atargets\x18\x11 \x03(\v2\x12.valhalla.LocationR\atargets\x12D\n" +
	"\x0edate_time_type\x18\x12 \x01(\x0e2\x1e.valhalla.Options.DateTimeTypeR\fdateTimeType\x12\x1d\n" +
	"\tdate_time\x18\x13 \x01(\tH\x06R\bdateTime\x12(\n" +
	"\x05shape\x18\x14 \x03(\v2\x12.valhalla.LocationR\x05shape\x12-\n" +
	"\x11resample_distance\x18\x15 \x01(\x01H\aR\x10resampleDistance\x12-\n" +
	"\bcontours\x18\x16 \x03(\v2\x11.valhalla.ContourR\bcontours\x12\x1c\n" +
	"\bpolygons\x18\x17 \x01(\bH\bR\bpolygons\x12\x1a\n" +
	"\adenoise\x18\x18 \x01(\x02H\tR\adenoise\x12 \n" +
	"\n" +
	"generalize\x18\x19 \x01(\x02H\n" +
	"R\n" +
	"generalize\x12'\n" +
	"\x0eshow_locations\x18\x1a \x01(\bH\vR\rshowLocations\x12(\n" +
	"\x05trace\x18\x1b \x03(\v2\x12.valhalla.LocationR\x05trace\x125\n" +
	"\vshape_match\x18\x1c \x01(\x0e2\x14.valhalla.ShapeMatchR\n" +
	"shapeMatch\x12#\n" +
	"\fgps_accuracy\x18\x1e \x01(\x02H\fR\vgpsAccuracy\x12%\n" +
	"\rsearch_radius\x18\x1f \x01(\x02H\rR\fsearchRadius\x120\n" +
	"\x13turn_penalty_factor\x18  \x01(\x02H\x0eR\x11turnPenaltyFactor\x12;\n" +
	"\rfilter_action\x18! \x01(\x0e2\x16.valhalla.FilterActionR\ffilterAction\x12+\n" +
	"\x11filter_attributes\x18\" \x03(\tR\x10filterAttributes\x12-\n" +
	"\x11breakage_distance\x18$ \x01(\x02H\x0fR\x10breakageDistance\x12'\n" +
	"\x0euse_timestamps\x18% \x01(\bH\x10R\ruseTimestamps\x12:\n" +
	"\fshape_format\x18& \x01(\x0e2\x15.valhalla.ShapeFormatH\x11R\vshapeFormat\x12 \n" +
	"\n" +
	"alternates\x18' \x01(\rH\x12R\n" +
	"alternates\x127\n" +
	"\x16interpolation_distance\x18( \x01(\x02H\x13R\x15interpolationDistance\x12'\n" +
	"\x0eguidance_views\x18) \x01(\bH\x14R\rguidanceViews\x12+\n" +
	"\x10height_precision\x18+ \x01(\rH\x15R\x0fheightPrecision\x12+\n" +
	"\x10roundabout_exits\x18, \x01(\bH\x16R\x0froundaboutExits\x12-\n" +
	"\x11linear_references\x18- \x01(\bH\x17R\x10linearReferences\x121\n" +
	"\n" +
	"recostings\x18. \x03(\v2\x11.valhalla.CostingR\n" +
	"recostings\x129\n" +
	"\x10exclude_polygons\x18/ \x03(\v2\x0e.valhalla.RingR\x0fexcludePolygons\x12;\n" +
	"\x18prioritize_bidirectional\x180 \x01(\bH\x18R\x17prioritizeBidirectional\x12E\n" +
	"\x10expansion_action\x181 \x01(\x0e2\x18.valhalla.Options.ActionH\x19R\x0fexpansionAction\x12'\n" +
	"\x0eskip_opposites\x182 \x01(\bH\x1aR\rskipOpposites\x12X\n" +
	"\x14expansion_properties\x183 \x03(\x0e2%.valhalla.Options.ExpansionPropertiesR\x13expansionProperties\x12H\n" +
	"\x12pbf_field_selector\x184 \x01(\v2\x1a.valhalla.PbfFieldSelectorR\x10pbfFieldSelector\x12\x18\n" +
	"\areverse\x185 \x01(\bR\areverse\x12+\n" +
	"\x10matrix_locations\x186 \x01(\rH\x1bR\x0fmatrixLocations\x12/\n" +
	"\x13banner_instructions\x187 \x01(\bR\x12bannerInstructions\x12-\n" +
	"\x12elevation_interval\x188 \x01(\x02R\x11elevationInterval\x12-\n" +
	"\x12voice_instructions\x189 \x01(\bR\x11voiceInstructions\x12\x16\n" +
	"\x06dedupe\x18: \x01(\bR\x06dedupe\x12'\n" +
	"\x0fadmin_crossings\x18; \x01(\bR\x0eadminCrossings\x12\x1d\n" +
	"\n" +
	"turn_lanes\x18< \x01(\bR\tturnLanes\x1aN\n" +
	"\rCostingsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12'\n" +
	"\x05value\x18\x02 \x01(\v2\x11.valhalla.CostingR\x05value:\x028\x01\"\"\n" +
	"\x05Units\x12\x0e\n" +
	"\n" +
	"kilometers\x10\x00\x12\t\n" +
	"\x05miles\x10\x01\";\n" +
	"\x06Format\x12\b\n" +
	"\x04json\x10\x00\x12\a\n" +
	"\x03gpx\x10\x01\x12\b\n" +
	"\x04osrm\x10\x02\x12\a\n" +
	"\x03pbf\x10\x03\x12\v\n" +
	"\ageotiff\x10\x04\"\xdd\x01\n" +
	"\x06Action\x12\r\n" +
	"\tno_action\x10\x00\x12\t\n" +
	"\x05route\x10\x01\x12\n" +
	"\n" +
	"\x06locate\x10\x02\x12\x16\n" +
	"\x12sources_to_targets\x10\x03\x12\x13\n" +
	"\x0foptimized_route\x10\x04\x12\r\n" +
	"\tisochrone\x10\x05\x12\x0f\n" +
	"\vtrace_route\x10\x06\x12\x14\n" +
	"\x10trace_attributes\x10\a\x12\n" +
	"\n" +
	"\x06height\x10\b\x12\x15\n" +
	"\x11transit_available\x10\t\x12\r\n" +
	"\texpansion\x10\n" +
	"\x12\f\n" +
	"\bcentroid\x10\v\x12\n" +
	"\n" +
	"\x06status\x10\f\"U\n" +
	"\fDateTimeType\x12\v\n" +
	"\ano_time\x10\x00\x12\v\n" +
	"\acurrent\x10\x01\x12\r\n" +
	"\tdepart_at\x10\x02\x12\r\n" +
	"\tarrive_by\x10\x03\x12\r\n" +
	"\tinvariant\x10\x04\"\x7f\n" +
	"\x13ExpansionProperties\x12\b\n" +
	"\x04cost\x10\x00\x12\f\n" +
	"\bduration\x10\x01\x12\f\n" +
	"\bdistance\x10\x02\x12\x0f\n" +
	"\vedge_status\x10\x03\x12\v\n" +
	"\aedge_id\x10\x04\x12\x10\n" +
	"\fpred_edge_id\x10\x05\x12\x12\n" +
	"\x0eexpansion_type\x10\x06B\x0e\n" +
	"\fhas_languageB\b\n" +
	"\x06has_idB\v\n" +
	"\thas_jsonpB\x16\n" +
	"\x14has_encoded_polylineB\v\n" +
	"\thas_rangeB\r\n" +
	"\vhas_verboseB\x0f\n" +
	"\rhas_date_timeB\x17\n" +
	"\x15has_resample_distanceB\x0e\n" +
	"\fhas_polygonsB\r\n" +
	"\vhas_denoiseB\x10\n" +
	"\x0ehas_generalizeB\x14\n" +
	"\x12has_show_locationsB\x12\n" +
	"\x10has_gps_accuracyB\x13\n" +
	"\x11has_search_radiusB\x19\n" +
	"\x17has_turn_penalty_factorB\x17\n" +
	"\x15has_breakage_distanceB\x14\n" +
	"\x12has_use_timestampsB\x12\n" +
	"\x10has_shape_formatB\x10\n" +
	"\x0ehas_alternatesB\x1c\n" +
	"\x1ahas_interpolation_distanceB\x14\n" +
	"\x12has_guidance_viewsB\x16\n" +
	"\x14has_height_precisionB\x16\n" +
	"\x14has_roundabout_exitsB\x17\n" +
	"\x15has_linear_referencesB\x1e\n" +
	"\x1chas_prioritize_bidirectionalB\x16\n" +
	"\x14has_expansion_actionB\x14\n" +
	"\x12has_skip_oppositesB\x16\n" +
	"\x14has_matrix_locations*;\n" +
	"\n" +
	"ShapeMatch\x12\x10\n" +
	"\fwalk_or_snap\x10\x00\x12\r\n" +
	"\tedge_walk\x10\x01\x12\f\n" +
	"\bmap_snap\x10\x02*7\n" +
	"\fFilterAction\x12\r\n" +
	"\tno_action\x10\x00\x12\v\n" +
	"\aexclude\x10\x01\x12\v\n" +
	"\ainclude\x10\x02*;\n" +
	"\x0eDirectionsType\x12\x10\n" +
	"\finstructions\x10\x00\x12\b\n" +
	"\x04none\x10\x01\x12\r\n" +
	"\tmaneuvers\x10\x02*F\n" +
	"\vShapeFormat\x12\r\n" +
	"\tpolyline6\x10\x00\x12\r\n" +
	"\tpolyline5\x10\x01\x12\v\n" +
	"\ageojson\x10\x02\x12\f\n" +
	"\bno_shape\x10\x03BIH\x03ZEmatching-engine/internal/adapter/routing-engine/valhalla/client/pb;pbP\x00b\x06proto3"

var (
	file_options_proto_rawDescOnce sync.Once
	file_options_proto_rawDescData []byte
)

func file_options_proto_rawDescGZIP() []byte {
	file_options_proto_rawDescOnce.Do(func() {
		file_options_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_options_proto_rawDesc), len(file_options_proto_rawDesc)))
	})
	return file_options_proto_rawDescData
}

var file_options_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_options_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_options_proto_goTypes = []any{
	(ShapeMatch)(0),                  // 0: valhalla.ShapeMatch
	(FilterAction)(0),                // 1: valhalla.FilterAction
	(DirectionsType)(0),              // 2: valhalla.DirectionsType
	(ShapeFormat)(0),                 // 3: valhalla.ShapeFormat
	(Costing_Type)(0),                // 4: valhalla.Costing.Type
	(Options_Units)(0),               // 5: valhalla.Options.Units
	(Options_Format)(0),              // 6: valhalla.Options.Format
	(Options_Action)(0),              // 7: valhalla.Options.Action
	(Options_DateTimeType)(0),        // 8: valhalla.Options.DateTimeType
	(Options_ExpansionProperties)(0), // 9: valhalla.Options.ExpansionProperties
	(*Contour)(nil),                  // 10: valhalla.Contour
	(*Ring)(nil),                     // 11: valhalla.Ring
	(*PbfFieldSelector)(nil),         // 12: valhalla.PbfFieldSelector
	(*AvoidEdge)(nil),                // 13: valhalla.AvoidEdge
	(*HierarchyLimits)(nil),          // 14: valhalla.HierarchyLimits
	(*Costing)(nil),                  // 15: valhalla.Costing
	(*Options)(nil),                  // 16: valhalla.Options
	(*Costing_Options)(nil),          // 17: valhalla.Costing.Options
	nil,                              // 18: valhalla.Costing.Options.HierarchyLimitsEntry
	nil,                              // 19: valhalla.Options.CostingsEntry
	(*LatLng)(nil),                   // 20: valhalla.LatLng
	(*Location)(nil),                 // 21: valhalla.Location
}
var file_options_proto_depIdxs = []int32{
	20, // 0: valhalla.Ring.coords:type_name -> valhalla.LatLng
	17, // 1: valhalla.Costing.options:type_name -> valhalla.Costing.Options
	4,  // 2: valhalla.Costing.type:type_name -> valhalla.Costing.Type
	5,  // 3: valhalla.Options.units:type_name -> valhalla.Options.Units
	2,  // 4: valhalla.Options.directions_type:type_name -> valhalla.DirectionsType
	6,  // 5: valhalla.Options.format:type_name -> valhalla.Options.Format
	7,  // 6: valhalla.Options.action:type_name -> valhalla.Options.Action
	4,  // 7: valhalla.Options.costing_type:type_name -> valhalla.Costing.Type
	19, // 8: valhalla.Options.costings:type_name -> valhalla.Options.CostingsEntry
	21, // 9: valhalla.Options.locations:type_name -> valhalla.Location
	21, // 10: valhalla.Options.exclude_locations:type_name -> valhalla.Location
	21, // 11: valhalla.Options.sources:type_name -> valhalla.Location
	21, // 12: valhalla.Options.targets:type_name -> valhalla.Location
	8,  // 13: valhalla.Options.date_time_type:type_name -> valhalla.Options.DateTimeType
	21, // 14: valhalla.Options.shape:type_name -> valhalla.Location
	10, // 15: valhalla.Options.contours:type_name -> valhalla.Contour
	21, // 16: valhalla.Options.trace:type_name -> valhalla.Location
	0,  // 17: valhalla.Options.shape_match:type_name -> valhalla.ShapeMatch
	1,  // 18: valhalla.Options.filter_action:type_name -> valhalla.FilterAction
	3,  // 19: valhalla.Options.shape_format:type_name -> valhalla.ShapeFormat
	15, // 20: valhalla.Options.recostings:type_name -> valhalla.Costing
	11, // 21: valhalla.Options.exclude_polygons:type_name -> valhalla.Ring
	7,  // 22: valhalla.Options.expansion_action:type_name -> valhalla.Options.Action
	9,  // 23: valhalla.Options.expansion_properties:type_name -> valhalla.Options.ExpansionProperties
	12, // 24: valhalla.Options.pbf_field_selector:type_name -> valhalla.PbfFieldSelector
	1,  // 25: valhalla.Costing.Options.filter_stop_action:type_name -> valhalla.FilterAction
	1,  // 26: valhalla.Costing.Options.filter_operator_action:type_name -> valhalla.FilterAction
	1,  // 27: valhalla.Costing.Options.filter_route_action:type_name -> valhalla.FilterAction
	13, // 28: valhalla.Costing.Options.exclude_edges:type_name -> valhalla.AvoidEdge
	18, // 29: valhalla.Costing.Options.hierarchy_limits:type_name -> valhalla.Costing.Options.HierarchyLimitsEntry
	14, // 30: valhalla.Costing.Options.HierarchyLimitsEntry.value:type_name -> valhalla.HierarchyLimits
	15, // 31: valhalla.Options.CostingsEntry.value:type_name -> valhalla.Costing
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_options_proto_init() }
func file_options_proto_init() {
	if File_options_proto != nil {
		return
	}
	file_common_proto_init()
	file_options_proto_msgTypes[0].OneofWrappers = []any{
		(*Contour_Time)(nil),
		(*Contour_Color)(nil),
		(*Contour_Distance)(nil),
	}
	file_options_proto_msgTypes[3].OneofWrappers = []any{
		(*AvoidEdge_Id)(nil),
		(*AvoidEdge_PercentAlong)(nil),
	}
	file_options_proto_msgTypes[5].OneofWrappers = []any{
		(*Costing_Options_)(nil),
		(*Costing_Name)(nil),
		(*Costing_FilterClosures)(nil),
	}
	file_options_proto_msgTypes[6].OneofWrappers = []any{
		(*Options_Language)(nil),
		(*Options_Id)(nil),
		(*Options_Jsonp)(nil),
		(*Options_EncodedPolyline)(nil),
		(*Options_Range)(nil),
		(*Options_Verbose)(nil),
		(*Options_DateTime)(nil),
		(*Options_ResampleDistance)(nil),
		(*Options_Polygons)(nil),
		(*Options_Denoise)(nil),
		(*Options_Generalize)(nil),
		(*Options_ShowLocations)(nil),
		(*Options_GpsAccuracy)(nil),
		(*Options_SearchRadius)(nil),
		(*Options_TurnPenaltyFactor)(nil),
		(*Options_BreakageDistance)(nil),
		(*Options_UseTimestamps)(nil),
		(*Options_ShapeFormat)(nil),
		(*Options_Alternates)(nil),
		(*Options_InterpolationDistance)(nil),
		(*Options_GuidanceViews)(nil),
		(*Options_HeightPrecision)(nil),
		(*Options_RoundaboutExits)(nil),
		(*Options_LinearReferences)(nil),
		(*Options_PrioritizeBidirectional)(nil),
		(*Options_ExpansionAction)(nil),
		(*Options_SkipOpposites)(nil),
		(*Options_MatrixLocations)(nil),
	}
	file_options_proto_msgTypes[7].OneofWrappers = []any{
		(*Costing_Options_ManeuverPenalty)(nil),
		(*Costing_Options_DestinationOnlyPenalty)(nil),
		(*Costing_Options_GateCost)(nil),
		(*Costing_Options_GatePenalty)(nil),
		(*Costing_Options_TollBoothCost)(nil),
		(*Costing_Options_TollBoothPenalty)(nil),
		(*Costing_Options_AlleyPenalty)(nil),
		(*Costing_Options_CountryCrossingCost)(nil),
		(*Costing_Options_CountryCrossingPenalty)(nil),
		(*Costing_Options_FerryCost)(nil),
		(*Costing_Options_AvoidBadSurfaces)(nil),
		(*Costing_Options_UseFerry)(nil),
		(*Costing_Options_UseHighways)(nil),
		(*Costing_Options_UseTolls)(nil),
		(*Costing_Options_UseRoads)(nil),
		(*Costing_Options_MaxDistance)(nil),
		(*Costing_Options_WalkingSpeed)(nil),
		(*Costing_Options_StepPenalty)(nil),
		(*Costing_Options_MaxGrade)(nil),
		(*Costing_Options_MaxHikingDifficulty)(nil),
		(*Costing_Options_ModeFactor)(nil),
		(*Costing_Options_WalkwayFactor)(nil),
		(*Costing_Options_SidewalkFactor)(nil),
		(*Costing_Options_AlleyFactor)(nil),
		(*Costing_Options_DrivewayFactor)(nil),
		(*Costing_Options_DrivewayPenalty)(nil),
		(*Costing_Options_TransitStartEndMaxDistance)(nil),
		(*Costing_Options_TransitTransferMaxDistance)(nil),
		(*Costing_Options_TransportType)(nil),
		(*Costing_Options_TopSpeed)(nil),
		(*Costing_Options_UseHills)(nil),
		(*Costing_Options_UsePrimary)(nil),
		(*Costing_Options_UseTrails)(nil),
		(*Costing_Options_LowClassPenalty)(nil),
		(*Costing_Options_Hazmat)(nil),
		(*Costing_Options_Weight)(nil),
		(*Costing_Options_AxleLoad)(nil),
		(*Costing_Options_Height)(nil),
		(*Costing_Options_Width)(nil),
		(*Costing_Options_Length)(nil),
		(*Costing_Options_CyclingSpeed)(nil),
		(*Costing_Options_Wheelchair)(nil),
		(*Costing_Options_Bicycle)(nil),
		(*Costing_Options_UseBus)(nil),
		(*Costing_Options_UseRail)(nil),
		(*Costing_Options_UseTransfers)(nil),
		(*Costing_Options_TransferCost)(nil),
		(*Costing_Options_TransferPenalty)(nil),
		(*Costing_Options_FlowMask)(nil),
		(*Costing_Options_BikeShareCost)(nil),
		(*Costing_Options_BikeSharePenalty)(nil),
		(*Costing_Options_RailFerryCost)(nil),
		(*Costing_Options_UseRailFerry)(nil),
		(*Costing_Options_IgnoreRestrictions)(nil),
		(*Costing_Options_IgnoreOneways)(nil),
		(*Costing_Options_IgnoreAccess)(nil),
		(*Costing_Options_IgnoreClosures)(nil),
		(*Costing_Options_Shortest)(nil),
		(*Costing_Options_ServicePenalty)(nil),
		(*Costing_Options_UseTracks)(nil),
		(*Costing_Options_UseDistance)(nil),
		(*Costing_Options_UseLivingStreets)(nil),
		(*Costing_Options_ServiceFactor)(nil),
		(*Costing_Options_ClosureFactor)(nil),
		(*Costing_Options_PrivateAccessPenalty)(nil),
		(*Costing_Options_ExcludeUnpaved)(nil),
		(*Costing_Options_IncludeHot)(nil),
		(*Costing_Options_IncludeHov2)(nil),
		(*Costing_Options_IncludeHov3)(nil),
		(*Costing_Options_ExcludeCashOnlyTolls)(nil),
		(*Costing_Options_RestrictionProbability)(nil),
		(*Costing_Options_ElevatorPenalty)(nil),
		(*Costing_Options_HgvNoAccessPenalty)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_options_proto_rawDesc), len(file_options_proto_rawDesc)),
			NumEnums:      10,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_options_proto_goTypes,
		DependencyIndexes: file_options_proto_depIdxs,
		EnumInfos:         file_options_proto_enumTypes,
		MessageInfos:      file_options_proto_msgTypes,
	}.Build()
	File_options_proto = out.File
	file_options_proto_goTypes = nil
	file_options_proto_depIdxs = nil
}
