// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: directions.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DirectionsLeg_GuidanceView_Type int32

const (
	DirectionsLeg_GuidanceView_kJunction       DirectionsLeg_GuidanceView_Type = 0
	DirectionsLeg_GuidanceView_kSapa           DirectionsLeg_GuidanceView_Type = 1
	DirectionsLeg_GuidanceView_kTollbranch     DirectionsLeg_GuidanceView_Type = 2
	DirectionsLeg_GuidanceView_kAftertoll      DirectionsLeg_GuidanceView_Type = 3
	DirectionsLeg_GuidanceView_kEnt            DirectionsLeg_GuidanceView_Type = 4
	DirectionsLeg_GuidanceView_kExit           DirectionsLeg_GuidanceView_Type = 5
	DirectionsLeg_GuidanceView_kCityreal       DirectionsLeg_GuidanceView_Type = 6
	DirectionsLeg_GuidanceView_kDirectionboard DirectionsLeg_GuidanceView_Type = 7
	DirectionsLeg_GuidanceView_kSignboard      DirectionsLeg_GuidanceView_Type = 8
)

// Enum value maps for DirectionsLeg_GuidanceView_Type.
var (
	DirectionsLeg_GuidanceView_Type_name = map[int32]string{
		0: "kJunction",
		1: "kSapa",
		2: "kTollbranch",
		3: "kAftertoll",
		4: "kEnt",
		5: "kExit",
		6: "kCityreal",
		7: "kDirectionboard",
		8: "kSignboard",
	}
	DirectionsLeg_GuidanceView_Type_value = map[string]int32{
		"kJunction":       0,
		"kSapa":           1,
		"kTollbranch":     2,
		"kAftertoll":      3,
		"kEnt":            4,
		"kExit":           5,
		"kCityreal":       6,
		"kDirectionboard": 7,
		"kSignboard":      8,
	}
)

func (x DirectionsLeg_GuidanceView_Type) Enum() *DirectionsLeg_GuidanceView_Type {
	p := new(DirectionsLeg_GuidanceView_Type)
	*p = x
	return p
}

func (x DirectionsLeg_GuidanceView_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DirectionsLeg_GuidanceView_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_directions_proto_enumTypes[0].Descriptor()
}

func (DirectionsLeg_GuidanceView_Type) Type() protoreflect.EnumType {
	return &file_directions_proto_enumTypes[0]
}

func (x DirectionsLeg_GuidanceView_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DirectionsLeg_GuidanceView_Type.Descriptor instead.
func (DirectionsLeg_GuidanceView_Type) EnumDescriptor() ([]byte, []int) {
	return file_directions_proto_rawDescGZIP(), []int{0, 0, 0}
}

type DirectionsLeg_Maneuver_CardinalDirection int32

const (
	DirectionsLeg_Maneuver_kNorth     DirectionsLeg_Maneuver_CardinalDirection = 0
	DirectionsLeg_Maneuver_kNorthEast DirectionsLeg_Maneuver_CardinalDirection = 1
	DirectionsLeg_Maneuver_kEast      DirectionsLeg_Maneuver_CardinalDirection = 2
	DirectionsLeg_Maneuver_kSouthEast DirectionsLeg_Maneuver_CardinalDirection = 3
	DirectionsLeg_Maneuver_kSouth     DirectionsLeg_Maneuver_CardinalDirection = 4
	DirectionsLeg_Maneuver_kSouthWest DirectionsLeg_Maneuver_CardinalDirection = 5
	DirectionsLeg_Maneuver_kWest      DirectionsLeg_Maneuver_CardinalDirection = 6
	DirectionsLeg_Maneuver_kNorthWest DirectionsLeg_Maneuver_CardinalDirection = 7
)

// Enum value maps for DirectionsLeg_Maneuver_CardinalDirection.
var (
	DirectionsLeg_Maneuver_CardinalDirection_name = map[int32]string{
		0: "kNorth",
		1: "kNorthEast",
		2: "kEast",
		3: "kSouthEast",
		4: "kSouth",
		5: "kSouthWest",
		6: "kWest",
		7: "kNorthWest",
	}
	DirectionsLeg_Maneuver_CardinalDirection_value = map[string]int32{
		"kNorth":     0,
		"kNorthEast": 1,
		"kEast":      2,
		"kSouthEast": 3,
		"kSouth":     4,
		"kSouthWest": 5,
		"kWest":      6,
		"kNorthWest": 7,
	}
)

func (x DirectionsLeg_Maneuver_CardinalDirection) Enum() *DirectionsLeg_Maneuver_CardinalDirection {
	p := new(DirectionsLeg_Maneuver_CardinalDirection)
	*p = x
	return p
}

func (x DirectionsLeg_Maneuver_CardinalDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DirectionsLeg_Maneuver_CardinalDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_directions_proto_enumTypes[1].Descriptor()
}

func (DirectionsLeg_Maneuver_CardinalDirection) Type() protoreflect.EnumType {
	return &file_directions_proto_enumTypes[1]
}

func (x DirectionsLeg_Maneuver_CardinalDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DirectionsLeg_Maneuver_CardinalDirection.Descriptor instead.
func (DirectionsLeg_Maneuver_CardinalDirection) EnumDescriptor() ([]byte, []int) {
	return file_directions_proto_rawDescGZIP(), []int{0, 1, 0}
}

// TODO - add others later
type DirectionsLeg_Maneuver_Type int32

const (
	DirectionsLeg_Maneuver_kNone                             DirectionsLeg_Maneuver_Type = 0
	DirectionsLeg_Maneuver_kStart                            DirectionsLeg_Maneuver_Type = 1
	DirectionsLeg_Maneuver_kStartRight                       DirectionsLeg_Maneuver_Type = 2
	DirectionsLeg_Maneuver_kStartLeft                        DirectionsLeg_Maneuver_Type = 3
	DirectionsLeg_Maneuver_kDestination                      DirectionsLeg_Maneuver_Type = 4
	DirectionsLeg_Maneuver_kDestinationRight                 DirectionsLeg_Maneuver_Type = 5
	DirectionsLeg_Maneuver_kDestinationLeft                  DirectionsLeg_Maneuver_Type = 6
	DirectionsLeg_Maneuver_kBecomes                          DirectionsLeg_Maneuver_Type = 7
	DirectionsLeg_Maneuver_kContinue                         DirectionsLeg_Maneuver_Type = 8
	DirectionsLeg_Maneuver_kSlightRight                      DirectionsLeg_Maneuver_Type = 9
	DirectionsLeg_Maneuver_kRight                            DirectionsLeg_Maneuver_Type = 10
	DirectionsLeg_Maneuver_kSharpRight                       DirectionsLeg_Maneuver_Type = 11
	DirectionsLeg_Maneuver_kUturnRight                       DirectionsLeg_Maneuver_Type = 12
	DirectionsLeg_Maneuver_kUturnLeft                        DirectionsLeg_Maneuver_Type = 13
	DirectionsLeg_Maneuver_kSharpLeft                        DirectionsLeg_Maneuver_Type = 14
	DirectionsLeg_Maneuver_kLeft                             DirectionsLeg_Maneuver_Type = 15
	DirectionsLeg_Maneuver_kSlightLeft                       DirectionsLeg_Maneuver_Type = 16
	DirectionsLeg_Maneuver_kRampStraight                     DirectionsLeg_Maneuver_Type = 17
	DirectionsLeg_Maneuver_kRampRight                        DirectionsLeg_Maneuver_Type = 18
	DirectionsLeg_Maneuver_kRampLeft                         DirectionsLeg_Maneuver_Type = 19
	DirectionsLeg_Maneuver_kExitRight                        DirectionsLeg_Maneuver_Type = 20
	DirectionsLeg_Maneuver_kExitLeft                         DirectionsLeg_Maneuver_Type = 21
	DirectionsLeg_Maneuver_kStayStraight                     DirectionsLeg_Maneuver_Type = 22
	DirectionsLeg_Maneuver_kStayRight                        DirectionsLeg_Maneuver_Type = 23
	DirectionsLeg_Maneuver_kStayLeft                         DirectionsLeg_Maneuver_Type = 24
	DirectionsLeg_Maneuver_kMerge                            DirectionsLeg_Maneuver_Type = 25
	DirectionsLeg_Maneuver_kRoundaboutEnter                  DirectionsLeg_Maneuver_Type = 26
	DirectionsLeg_Maneuver_kRoundaboutExit                   DirectionsLeg_Maneuver_Type = 27
	DirectionsLeg_Maneuver_kFerryEnter                       DirectionsLeg_Maneuver_Type = 28
	DirectionsLeg_Maneuver_kFerryExit                        DirectionsLeg_Maneuver_Type = 29
	DirectionsLeg_Maneuver_kTransit                          DirectionsLeg_Maneuver_Type = 30
	DirectionsLeg_Maneuver_kTransitTransfer                  DirectionsLeg_Maneuver_Type = 31
	DirectionsLeg_Maneuver_kTransitRemainOn                  DirectionsLeg_Maneuver_Type = 32
	DirectionsLeg_Maneuver_kTransitConnectionStart           DirectionsLeg_Maneuver_Type = 33
	DirectionsLeg_Maneuver_kTransitConnectionTransfer        DirectionsLeg_Maneuver_Type = 34
	DirectionsLeg_Maneuver_kTransitConnectionDestination     DirectionsLeg_Maneuver_Type = 35
	DirectionsLeg_Maneuver_kPostTransitConnectionDestination DirectionsLeg_Maneuver_Type = 36
	DirectionsLeg_Maneuver_kMergeRight                       DirectionsLeg_Maneuver_Type = 37
	DirectionsLeg_Maneuver_kMergeLeft                        DirectionsLeg_Maneuver_Type = 38
	DirectionsLeg_Maneuver_kElevatorEnter                    DirectionsLeg_Maneuver_Type = 39
	DirectionsLeg_Maneuver_kStepsEnter                       DirectionsLeg_Maneuver_Type = 40
	DirectionsLeg_Maneuver_kEscalatorEnter                   DirectionsLeg_Maneuver_Type = 41
	DirectionsLeg_Maneuver_kBuildingEnter                    DirectionsLeg_Maneuver_Type = 42
	DirectionsLeg_Maneuver_kBuildingExit                     DirectionsLeg_Maneuver_Type = 43
)

// Enum value maps for DirectionsLeg_Maneuver_Type.
var (
	DirectionsLeg_Maneuver_Type_name = map[int32]string{
		0:  "kNone",
		1:  "kStart",
		2:  "kStartRight",
		3:  "kStartLeft",
		4:  "kDestination",
		5:  "kDestinationRight",
		6:  "kDestinationLeft",
		7:  "kBecomes",
		8:  "kContinue",
		9:  "kSlightRight",
		10: "kRight",
		11: "kSharpRight",
		12: "kUturnRight",
		13: "kUturnLeft",
		14: "kSharpLeft",
		15: "kLeft",
		16: "kSlightLeft",
		17: "kRampStraight",
		18: "kRampRight",
		19: "kRampLeft",
		20: "kExitRight",
		21: "kExitLeft",
		22: "kStayStraight",
		23: "kStayRight",
		24: "kStayLeft",
		25: "kMerge",
		26: "kRoundaboutEnter",
		27: "kRoundaboutExit",
		28: "kFerryEnter",
		29: "kFerryExit",
		30: "kTransit",
		31: "kTransitTransfer",
		32: "kTransitRemainOn",
		33: "kTransitConnectionStart",
		34: "kTransitConnectionTransfer",
		35: "kTransitConnectionDestination",
		36: "kPostTransitConnectionDestination",
		37: "kMergeRight",
		38: "kMergeLeft",
		39: "kElevatorEnter",
		40: "kStepsEnter",
		41: "kEscalatorEnter",
		42: "kBuildingEnter",
		43: "kBuildingExit",
	}
	DirectionsLeg_Maneuver_Type_value = map[string]int32{
		"kNone":                             0,
		"kStart":                            1,
		"kStartRight":                       2,
		"kStartLeft":                        3,
		"kDestination":                      4,
		"kDestinationRight":                 5,
		"kDestinationLeft":                  6,
		"kBecomes":                          7,
		"kContinue":                         8,
		"kSlightRight":                      9,
		"kRight":                            10,
		"kSharpRight":                       11,
		"kUturnRight":                       12,
		"kUturnLeft":                        13,
		"kSharpLeft":                        14,
		"kLeft":                             15,
		"kSlightLeft":                       16,
		"kRampStraight":                     17,
		"kRampRight":                        18,
		"kRampLeft":                         19,
		"kExitRight":                        20,
		"kExitLeft":                         21,
		"kStayStraight":                     22,
		"kStayRight":                        23,
		"kStayLeft":                         24,
		"kMerge":                            25,
		"kRoundaboutEnter":                  26,
		"kRoundaboutExit":                   27,
		"kFerryEnter":                       28,
		"kFerryExit":                        29,
		"kTransit":                          30,
		"kTransitTransfer":                  31,
		"kTransitRemainOn":                  32,
		"kTransitConnectionStart":           33,
		"kTransitConnectionTransfer":        34,
		"kTransitConnectionDestination":     35,
		"kPostTransitConnectionDestination": 36,
		"kMergeRight":                       37,
		"kMergeLeft":                        38,
		"kElevatorEnter":                    39,
		"kStepsEnter":                       40,
		"kEscalatorEnter":                   41,
		"kBuildingEnter":                    42,
		"kBuildingExit":                     43,
	}
)

func (x DirectionsLeg_Maneuver_Type) Enum() *DirectionsLeg_Maneuver_Type {
	p := new(DirectionsLeg_Maneuver_Type)
	*p = x
	return p
}

func (x DirectionsLeg_Maneuver_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DirectionsLeg_Maneuver_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_directions_proto_enumTypes[2].Descriptor()
}

func (DirectionsLeg_Maneuver_Type) Type() protoreflect.EnumType {
	return &file_directions_proto_enumTypes[2]
}

func (x DirectionsLeg_Maneuver_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DirectionsLeg_Maneuver_Type.Descriptor instead.
func (DirectionsLeg_Maneuver_Type) EnumDescriptor() ([]byte, []int) {
	return file_directions_proto_rawDescGZIP(), []int{0, 1, 1}
}

type DirectionsLeg_Maneuver_BssManeuverType int32

const (
	DirectionsLeg_Maneuver_kNoneAction            DirectionsLeg_Maneuver_BssManeuverType = 0
	DirectionsLeg_Maneuver_kRentBikeAtBikeShare   DirectionsLeg_Maneuver_BssManeuverType = 1
	DirectionsLeg_Maneuver_kReturnBikeAtBikeShare DirectionsLeg_Maneuver_BssManeuverType = 2
)

// Enum value maps for DirectionsLeg_Maneuver_BssManeuverType.
var (
	DirectionsLeg_Maneuver_BssManeuverType_name = map[int32]string{
		0: "kNoneAction",
		1: "kRentBikeAtBikeShare",
		2: "kReturnBikeAtBikeShare",
	}
	DirectionsLeg_Maneuver_BssManeuverType_value = map[string]int32{
		"kNoneAction":            0,
		"kRentBikeAtBikeShare":   1,
		"kReturnBikeAtBikeShare": 2,
	}
)

func (x DirectionsLeg_Maneuver_BssManeuverType) Enum() *DirectionsLeg_Maneuver_BssManeuverType {
	p := new(DirectionsLeg_Maneuver_BssManeuverType)
	*p = x
	return p
}

func (x DirectionsLeg_Maneuver_BssManeuverType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DirectionsLeg_Maneuver_BssManeuverType) Descriptor() protoreflect.EnumDescriptor {
	return file_directions_proto_enumTypes[3].Descriptor()
}

func (DirectionsLeg_Maneuver_BssManeuverType) Type() protoreflect.EnumType {
	return &file_directions_proto_enumTypes[3]
}

func (x DirectionsLeg_Maneuver_BssManeuverType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DirectionsLeg_Maneuver_BssManeuverType.Descriptor instead.
func (DirectionsLeg_Maneuver_BssManeuverType) EnumDescriptor() ([]byte, []int) {
	return file_directions_proto_rawDescGZIP(), []int{0, 1, 2}
}

type DirectionsLeg struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	TripId        uint64                    `protobuf:"varint,1,opt,name=trip_id,json=tripId,proto3" json:"trip_id,omitempty"`
	LegId         uint32                    `protobuf:"varint,2,opt,name=leg_id,json=legId,proto3" json:"leg_id,omitempty"`
	LegCount      uint32                    `protobuf:"varint,3,opt,name=leg_count,json=legCount,proto3" json:"leg_count,omitempty"`
	Location      []*Location               `protobuf:"bytes,4,rep,name=location,proto3" json:"location,omitempty"`
	Summary       *Summary                  `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`
	Maneuver      []*DirectionsLeg_Maneuver `protobuf:"bytes,6,rep,name=maneuver,proto3" json:"maneuver,omitempty"`
	Shape         string                    `protobuf:"bytes,7,opt,name=shape,proto3" json:"shape,omitempty"`
	LevelChanges  []*LevelChange            `protobuf:"bytes,8,rep,name=level_changes,json=levelChanges,proto3" json:"level_changes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DirectionsLeg) Reset() {
	*x = DirectionsLeg{}
	mi := &file_directions_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DirectionsLeg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectionsLeg) ProtoMessage() {}

func (x *DirectionsLeg) ProtoReflect() protoreflect.Message {
	mi := &file_directions_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectionsLeg.ProtoReflect.Descriptor instead.
func (*DirectionsLeg) Descriptor() ([]byte, []int) {
	return file_directions_proto_rawDescGZIP(), []int{0}
}

func (x *DirectionsLeg) GetTripId() uint64 {
	if x != nil {
		return x.TripId
	}
	return 0
}

func (x *DirectionsLeg) GetLegId() uint32 {
	if x != nil {
		return x.LegId
	}
	return 0
}

func (x *DirectionsLeg) GetLegCount() uint32 {
	if x != nil {
		return x.LegCount
	}
	return 0
}

func (x *DirectionsLeg) GetLocation() []*Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *DirectionsLeg) GetSummary() *Summary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *DirectionsLeg) GetManeuver() []*DirectionsLeg_Maneuver {
	if x != nil {
		return x.Maneuver
	}
	return nil
}

func (x *DirectionsLeg) GetShape() string {
	if x != nil {
		return x.Shape
	}
	return ""
}

func (x *DirectionsLeg) GetLevelChanges() []*LevelChange {
	if x != nil {
		return x.LevelChanges
	}
	return nil
}

type DirectionsRoute struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Legs          []*DirectionsLeg       `protobuf:"bytes,1,rep,name=legs,proto3" json:"legs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DirectionsRoute) Reset() {
	*x = DirectionsRoute{}
	mi := &file_directions_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DirectionsRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectionsRoute) ProtoMessage() {}

func (x *DirectionsRoute) ProtoReflect() protoreflect.Message {
	mi := &file_directions_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectionsRoute.ProtoReflect.Descriptor instead.
func (*DirectionsRoute) Descriptor() ([]byte, []int) {
	return file_directions_proto_rawDescGZIP(), []int{1}
}

func (x *DirectionsRoute) GetLegs() []*DirectionsLeg {
	if x != nil {
		return x.Legs
	}
	return nil
}

type Directions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Routes        []*DirectionsRoute     `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Directions) Reset() {
	*x = Directions{}
	mi := &file_directions_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Directions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Directions) ProtoMessage() {}

func (x *Directions) ProtoReflect() protoreflect.Message {
	mi := &file_directions_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Directions.ProtoReflect.Descriptor instead.
func (*Directions) Descriptor() ([]byte, []int) {
	return file_directions_proto_rawDescGZIP(), []int{2}
}

func (x *Directions) GetRoutes() []*DirectionsRoute {
	if x != nil {
		return x.Routes
	}
	return nil
}

type DirectionsLeg_GuidanceView struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	DataId        string                          `protobuf:"bytes,1,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`                              // TODO future enum as data id?
	Type          DirectionsLeg_GuidanceView_Type `protobuf:"varint,2,opt,name=type,proto3,enum=valhalla.DirectionsLeg_GuidanceView_Type" json:"type,omitempty"` // The type of guidance view
	BaseId        string                          `protobuf:"bytes,3,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`                              // Image base id
	OverlayIds    []string                        `protobuf:"bytes,4,rep,name=overlay_ids,json=overlayIds,proto3" json:"overlay_ids,omitempty"`                  // List of overlay ids
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DirectionsLeg_GuidanceView) Reset() {
	*x = DirectionsLeg_GuidanceView{}
	mi := &file_directions_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DirectionsLeg_GuidanceView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectionsLeg_GuidanceView) ProtoMessage() {}

func (x *DirectionsLeg_GuidanceView) ProtoReflect() protoreflect.Message {
	mi := &file_directions_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectionsLeg_GuidanceView.ProtoReflect.Descriptor instead.
func (*DirectionsLeg_GuidanceView) Descriptor() ([]byte, []int) {
	return file_directions_proto_rawDescGZIP(), []int{0, 0}
}

func (x *DirectionsLeg_GuidanceView) GetDataId() string {
	if x != nil {
		return x.DataId
	}
	return ""
}

func (x *DirectionsLeg_GuidanceView) GetType() DirectionsLeg_GuidanceView_Type {
	if x != nil {
		return x.Type
	}
	return DirectionsLeg_GuidanceView_kJunction
}

func (x *DirectionsLeg_GuidanceView) GetBaseId() string {
	if x != nil {
		return x.BaseId
	}
	return ""
}

func (x *DirectionsLeg_GuidanceView) GetOverlayIds() []string {
	if x != nil {
		return x.OverlayIds
	}
	return nil
}

type DirectionsLeg_Maneuver struct {
	state                               protoimpl.MessageState                   `protogen:"open.v1"`
	Type                                DirectionsLeg_Maneuver_Type              `protobuf:"varint,1,opt,name=type,proto3,enum=valhalla.DirectionsLeg_Maneuver_Type" json:"type,omitempty"`                                                                                  // Maneuver type
	TextInstruction                     string                                   `protobuf:"bytes,2,opt,name=text_instruction,json=textInstruction,proto3" json:"text_instruction,omitempty"`                                                                                // text instruction
	StreetName                          []*StreetName                            `protobuf:"bytes,3,rep,name=street_name,json=streetName,proto3" json:"street_name,omitempty"`                                                                                               // street names
	Length                              float32                                  `protobuf:"fixed32,4,opt,name=length,proto3" json:"length,omitempty"`                                                                                                                       // kilometers or miles based on units
	Time                                float64                                  `protobuf:"fixed64,5,opt,name=time,proto3" json:"time,omitempty"`                                                                                                                           // seconds
	BeginCardinalDirection              DirectionsLeg_Maneuver_CardinalDirection `protobuf:"varint,6,opt,name=begin_cardinal_direction,json=beginCardinalDirection,proto3,enum=valhalla.DirectionsLeg_Maneuver_CardinalDirection" json:"begin_cardinal_direction,omitempty"` // CardinalDirection
	BeginHeading                        uint32                                   `protobuf:"varint,7,opt,name=begin_heading,json=beginHeading,proto3" json:"begin_heading,omitempty"`                                                                                        // 0-360
	BeginShapeIndex                     uint32                                   `protobuf:"varint,8,opt,name=begin_shape_index,json=beginShapeIndex,proto3" json:"begin_shape_index,omitempty"`                                                                             // inclusive index
	EndShapeIndex                       uint32                                   `protobuf:"varint,9,opt,name=end_shape_index,json=endShapeIndex,proto3" json:"end_shape_index,omitempty"`                                                                                   // inclusive index
	PortionsToll                        bool                                     `protobuf:"varint,10,opt,name=portions_toll,json=portionsToll,proto3" json:"portions_toll,omitempty"`                                                                                       // has portions toll
	PortionsUnpaved                     bool                                     `protobuf:"varint,11,opt,name=portions_unpaved,json=portionsUnpaved,proto3" json:"portions_unpaved,omitempty"`                                                                              // has portions unpaved
	VerbalTransitionAlertInstruction    string                                   `protobuf:"bytes,12,opt,name=verbal_transition_alert_instruction,json=verbalTransitionAlertInstruction,proto3" json:"verbal_transition_alert_instruction,omitempty"`                        // verbal transition alert instruction
	VerbalPreTransitionInstruction      string                                   `protobuf:"bytes,13,opt,name=verbal_pre_transition_instruction,json=verbalPreTransitionInstruction,proto3" json:"verbal_pre_transition_instruction,omitempty"`                              // verbal pre-transition instruction
	VerbalPostTransitionInstruction     string                                   `protobuf:"bytes,14,opt,name=verbal_post_transition_instruction,json=verbalPostTransitionInstruction,proto3" json:"verbal_post_transition_instruction,omitempty"`                           // verbal post-transition instruction
	BeginStreetName                     []*StreetName                            `protobuf:"bytes,15,rep,name=begin_street_name,json=beginStreetName,proto3" json:"begin_street_name,omitempty"`                                                                             // begin street names
	Sign                                *TripSign                                `protobuf:"bytes,16,opt,name=sign,proto3" json:"sign,omitempty"`                                                                                                                            // associated sign information, for example: exit number
	RoundaboutExitCount                 uint32                                   `protobuf:"varint,17,opt,name=roundabout_exit_count,json=roundaboutExitCount,proto3" json:"roundabout_exit_count,omitempty"`                                                                // which spoke to exit roundabout after entering
	DepartInstruction                   string                                   `protobuf:"bytes,18,opt,name=depart_instruction,json=departInstruction,proto3" json:"depart_instruction,omitempty"`                                                                         // depart instruction - used with transit
	VerbalDepartInstruction             string                                   `protobuf:"bytes,19,opt,name=verbal_depart_instruction,json=verbalDepartInstruction,proto3" json:"verbal_depart_instruction,omitempty"`                                                     // verbal depart instruction - used with transit
	ArriveInstruction                   string                                   `protobuf:"bytes,20,opt,name=arrive_instruction,json=arriveInstruction,proto3" json:"arrive_instruction,omitempty"`                                                                         // arrive instruction - used with transit
	VerbalArriveInstruction             string                                   `protobuf:"bytes,21,opt,name=verbal_arrive_instruction,json=verbalArriveInstruction,proto3" json:"verbal_arrive_instruction,omitempty"`                                                     // verbal arrive instruction - used with transit
	TransitInfo                         *TransitRouteInfo                        `protobuf:"bytes,22,opt,name=transit_info,json=transitInfo,proto3" json:"transit_info,omitempty"`                                                                                           // transit attributes including a list of transit stops
	VerbalMultiCue                      bool                                     `protobuf:"varint,23,opt,name=verbal_multi_cue,json=verbalMultiCue,proto3" json:"verbal_multi_cue,omitempty"`                                                                               // verbal multi-cue flag
	TravelMode                          TravelMode                               `protobuf:"varint,24,opt,name=travel_mode,json=travelMode,proto3,enum=valhalla.TravelMode" json:"travel_mode,omitempty"`                                                                    // travel mode
	VehicleType                         VehicleType                              `protobuf:"varint,25,opt,name=vehicle_type,json=vehicleType,proto3,enum=valhalla.VehicleType" json:"vehicle_type,omitempty"`
	PedestrianType                      PedestrianType                           `protobuf:"varint,26,opt,name=pedestrian_type,json=pedestrianType,proto3,enum=valhalla.PedestrianType" json:"pedestrian_type,omitempty"`
	BicycleType                         BicycleType                              `protobuf:"varint,27,opt,name=bicycle_type,json=bicycleType,proto3,enum=valhalla.BicycleType" json:"bicycle_type,omitempty"`
	TransitType                         TransitType                              `protobuf:"varint,28,opt,name=transit_type,json=transitType,proto3,enum=valhalla.TransitType" json:"transit_type,omitempty"`
	BeginPathIndex                      uint32                                   `protobuf:"varint,29,opt,name=begin_path_index,json=beginPathIndex,proto3" json:"begin_path_index,omitempty"`                                   // Index in TripPath for first node of maneuver
	EndPathIndex                        uint32                                   `protobuf:"varint,30,opt,name=end_path_index,json=endPathIndex,proto3" json:"end_path_index,omitempty"`                                         // Index in TripPath for last node of maneuver
	ToStayOn                            bool                                     `protobuf:"varint,31,opt,name=to_stay_on,json=toStayOn,proto3" json:"to_stay_on,omitempty"`                                                     // True if same name as previous maneuver
	RoundaboutExitStreetNames           []*StreetName                            `protobuf:"bytes,32,rep,name=roundabout_exit_street_names,json=roundaboutExitStreetNames,proto3" json:"roundabout_exit_street_names,omitempty"` // Outbound street names from roundabout
	TurnDegree                          uint32                                   `protobuf:"varint,33,opt,name=turn_degree,json=turnDegree,proto3" json:"turn_degree,omitempty"`                                                 // Turn degree of maneuver
	HasTimeRestrictions                 bool                                     `protobuf:"varint,34,opt,name=has_time_restrictions,json=hasTimeRestrictions,proto3" json:"has_time_restrictions,omitempty"`                    // Whether edge has any time restrictions or not
	GuidanceViews                       []*DirectionsLeg_GuidanceView            `protobuf:"bytes,35,rep,name=guidance_views,json=guidanceViews,proto3" json:"guidance_views,omitempty"`                                         // List of guidance views
	BssManeuverType                     DirectionsLeg_Maneuver_BssManeuverType   `protobuf:"varint,36,opt,name=bss_maneuver_type,json=bssManeuverType,proto3,enum=valhalla.DirectionsLeg_Maneuver_BssManeuverType" json:"bss_maneuver_type,omitempty"`
	VerbalSuccinctTransitionInstruction string                                   `protobuf:"bytes,37,opt,name=verbal_succinct_transition_instruction,json=verbalSuccinctTransitionInstruction,proto3" json:"verbal_succinct_transition_instruction,omitempty"` // verbal succinct transition instruction
	BssInfo                             *BikeShareStationInfo                    `protobuf:"bytes,38,opt,name=bss_info,json=bssInfo,proto3" json:"bss_info,omitempty"`                                                                                         // Bike Share Station Info
	PortionsHighway                     bool                                     `protobuf:"varint,39,opt,name=portions_highway,json=portionsHighway,proto3" json:"portions_highway,omitempty"`                                                                // has portions highway
	PortionsFerry                       bool                                     `protobuf:"varint,40,opt,name=portions_ferry,json=portionsFerry,proto3" json:"portions_ferry,omitempty"`                                                                      // has portions ferry
	Landmarks                           []*RouteLandmark                         `protobuf:"bytes,41,rep,name=landmarks,proto3" json:"landmarks,omitempty"`                                                                                                    // landmarks correlated with the maneuver
	unknownFields                       protoimpl.UnknownFields
	sizeCache                           protoimpl.SizeCache
}

func (x *DirectionsLeg_Maneuver) Reset() {
	*x = DirectionsLeg_Maneuver{}
	mi := &file_directions_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DirectionsLeg_Maneuver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectionsLeg_Maneuver) ProtoMessage() {}

func (x *DirectionsLeg_Maneuver) ProtoReflect() protoreflect.Message {
	mi := &file_directions_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectionsLeg_Maneuver.ProtoReflect.Descriptor instead.
func (*DirectionsLeg_Maneuver) Descriptor() ([]byte, []int) {
	return file_directions_proto_rawDescGZIP(), []int{0, 1}
}

func (x *DirectionsLeg_Maneuver) GetType() DirectionsLeg_Maneuver_Type {
	if x != nil {
		return x.Type
	}
	return DirectionsLeg_Maneuver_kNone
}

func (x *DirectionsLeg_Maneuver) GetTextInstruction() string {
	if x != nil {
		return x.TextInstruction
	}
	return ""
}

func (x *DirectionsLeg_Maneuver) GetStreetName() []*StreetName {
	if x != nil {
		return x.StreetName
	}
	return nil
}

func (x *DirectionsLeg_Maneuver) GetLength() float32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *DirectionsLeg_Maneuver) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DirectionsLeg_Maneuver) GetBeginCardinalDirection() DirectionsLeg_Maneuver_CardinalDirection {
	if x != nil {
		return x.BeginCardinalDirection
	}
	return DirectionsLeg_Maneuver_kNorth
}

func (x *DirectionsLeg_Maneuver) GetBeginHeading() uint32 {
	if x != nil {
		return x.BeginHeading
	}
	return 0
}

func (x *DirectionsLeg_Maneuver) GetBeginShapeIndex() uint32 {
	if x != nil {
		return x.BeginShapeIndex
	}
	return 0
}

func (x *DirectionsLeg_Maneuver) GetEndShapeIndex() uint32 {
	if x != nil {
		return x.EndShapeIndex
	}
	return 0
}

func (x *DirectionsLeg_Maneuver) GetPortionsToll() bool {
	if x != nil {
		return x.PortionsToll
	}
	return false
}

func (x *DirectionsLeg_Maneuver) GetPortionsUnpaved() bool {
	if x != nil {
		return x.PortionsUnpaved
	}
	return false
}

func (x *DirectionsLeg_Maneuver) GetVerbalTransitionAlertInstruction() string {
	if x != nil {
		return x.VerbalTransitionAlertInstruction
	}
	return ""
}

func (x *DirectionsLeg_Maneuver) GetVerbalPreTransitionInstruction() string {
	if x != nil {
		return x.VerbalPreTransitionInstruction
	}
	return ""
}

func (x *DirectionsLeg_Maneuver) GetVerbalPostTransitionInstruction() string {
	if x != nil {
		return x.VerbalPostTransitionInstruction
	}
	return ""
}

func (x *DirectionsLeg_Maneuver) GetBeginStreetName() []*StreetName {
	if x != nil {
		return x.BeginStreetName
	}
	return nil
}

func (x *DirectionsLeg_Maneuver) GetSign() *TripSign {
	if x != nil {
		return x.Sign
	}
	return nil
}

func (x *DirectionsLeg_Maneuver) GetRoundaboutExitCount() uint32 {
	if x != nil {
		return x.RoundaboutExitCount
	}
	return 0
}

func (x *DirectionsLeg_Maneuver) GetDepartInstruction() string {
	if x != nil {
		return x.DepartInstruction
	}
	return ""
}

func (x *DirectionsLeg_Maneuver) GetVerbalDepartInstruction() string {
	if x != nil {
		return x.VerbalDepartInstruction
	}
	return ""
}

func (x *DirectionsLeg_Maneuver) GetArriveInstruction() string {
	if x != nil {
		return x.ArriveInstruction
	}
	return ""
}

func (x *DirectionsLeg_Maneuver) GetVerbalArriveInstruction() string {
	if x != nil {
		return x.VerbalArriveInstruction
	}
	return ""
}

func (x *DirectionsLeg_Maneuver) GetTransitInfo() *TransitRouteInfo {
	if x != nil {
		return x.TransitInfo
	}
	return nil
}

func (x *DirectionsLeg_Maneuver) GetVerbalMultiCue() bool {
	if x != nil {
		return x.VerbalMultiCue
	}
	return false
}

func (x *DirectionsLeg_Maneuver) GetTravelMode() TravelMode {
	if x != nil {
		return x.TravelMode
	}
	return TravelMode_kDrive
}

func (x *DirectionsLeg_Maneuver) GetVehicleType() VehicleType {
	if x != nil {
		return x.VehicleType
	}
	return VehicleType_kCar
}

func (x *DirectionsLeg_Maneuver) GetPedestrianType() PedestrianType {
	if x != nil {
		return x.PedestrianType
	}
	return PedestrianType_kFoot
}

func (x *DirectionsLeg_Maneuver) GetBicycleType() BicycleType {
	if x != nil {
		return x.BicycleType
	}
	return BicycleType_kRoad
}

func (x *DirectionsLeg_Maneuver) GetTransitType() TransitType {
	if x != nil {
		return x.TransitType
	}
	return TransitType_kTram
}

func (x *DirectionsLeg_Maneuver) GetBeginPathIndex() uint32 {
	if x != nil {
		return x.BeginPathIndex
	}
	return 0
}

func (x *DirectionsLeg_Maneuver) GetEndPathIndex() uint32 {
	if x != nil {
		return x.EndPathIndex
	}
	return 0
}

func (x *DirectionsLeg_Maneuver) GetToStayOn() bool {
	if x != nil {
		return x.ToStayOn
	}
	return false
}

func (x *DirectionsLeg_Maneuver) GetRoundaboutExitStreetNames() []*StreetName {
	if x != nil {
		return x.RoundaboutExitStreetNames
	}
	return nil
}

func (x *DirectionsLeg_Maneuver) GetTurnDegree() uint32 {
	if x != nil {
		return x.TurnDegree
	}
	return 0
}

func (x *DirectionsLeg_Maneuver) GetHasTimeRestrictions() bool {
	if x != nil {
		return x.HasTimeRestrictions
	}
	return false
}

func (x *DirectionsLeg_Maneuver) GetGuidanceViews() []*DirectionsLeg_GuidanceView {
	if x != nil {
		return x.GuidanceViews
	}
	return nil
}

func (x *DirectionsLeg_Maneuver) GetBssManeuverType() DirectionsLeg_Maneuver_BssManeuverType {
	if x != nil {
		return x.BssManeuverType
	}
	return DirectionsLeg_Maneuver_kNoneAction
}

func (x *DirectionsLeg_Maneuver) GetVerbalSuccinctTransitionInstruction() string {
	if x != nil {
		return x.VerbalSuccinctTransitionInstruction
	}
	return ""
}

func (x *DirectionsLeg_Maneuver) GetBssInfo() *BikeShareStationInfo {
	if x != nil {
		return x.BssInfo
	}
	return nil
}

func (x *DirectionsLeg_Maneuver) GetPortionsHighway() bool {
	if x != nil {
		return x.PortionsHighway
	}
	return false
}

func (x *DirectionsLeg_Maneuver) GetPortionsFerry() bool {
	if x != nil {
		return x.PortionsFerry
	}
	return false
}

func (x *DirectionsLeg_Maneuver) GetLandmarks() []*RouteLandmark {
	if x != nil {
		return x.Landmarks
	}
	return nil
}

var File_directions_proto protoreflect.FileDescriptor

const file_directions_proto_rawDesc = "" +
	"\n" +
	"\x10directions.proto\x12\bvalhalla\x1a\fcommon.proto\x1a\n" +
	"sign.proto\"\xe5\x1e\n" +
	"\rDirectionsLeg\x12\x17\n" +
	"\atrip_id\x18\x01 \x01(\x04R\x06tripId\x12\x15\n" +
	"\x06leg_id\x18\x02 \x01(\rR\x05legId\x12\x1b\n" +
	"\tleg_count\x18\x03 \x01(\rR\blegCount\x12.\n" +
	"\blocation\x18\x04 \x03(\v2\x12.valhalla.LocationR\blocation\x12+\n" +
	"\asummary\x18\x05 \x01(\v2\x11.valhalla.SummaryR\asummary\x12<\n" +
	"\bmaneuver\x18\x06 \x03(\v2 .valhalla.DirectionsLeg.ManeuverR\bmaneuver\x12\x14\n" +
	"\x05shape\x18\a \x01(\tR\x05shape\x12:\n" +
	"\rlevel_changes\x18\b \x03(\v2\x15.valhalla.LevelChangeR\flevelChanges\x1a\xad\x02\n" +
	"\fGuidanceView\x12\x17\n" +
	"\adata_id\x18\x01 \x01(\tR\x06dataId\x12=\n" +
	"\x04type\x18\x02 \x01(\x0e2).valhalla.DirectionsLeg.GuidanceView.TypeR\x04type\x12\x17\n" +
	"\abase_id\x18\x03 \x01(\tR\x06baseId\x12\x1f\n" +
	"\voverlay_ids\x18\x04 \x03(\tR\n" +
	"overlayIds\"\x8a\x01\n" +
	"\x04Type\x12\r\n" +
	"\tkJunction\x10\x00\x12\t\n" +
	"\x05kSapa\x10\x01\x12\x0f\n" +
	"\vkTollbranch\x10\x02\x12\x0e\n" +
	"\n" +
	"kAftertoll\x10\x03\x12\b\n" +
	"\x04kEnt\x10\x04\x12\t\n" +
	"\x05kExit\x10\x05\x12\r\n" +
	"\tkCityreal\x10\x06\x12\x13\n" +
	"\x0fkDirectionboard\x10\a\x12\x0e\n" +
	"\n" +
	"kSignboard\x10\b\x1a\xe9\x19\n" +
	"\bManeuver\x129\n" +
	"\x04type\x18\x01 \x01(\x0e2%.valhalla.DirectionsLeg.Maneuver.TypeR\x04type\x12)\n" +
	"\x10text_instruction\x18\x02 \x01(\tR\x0ftextInstruction\x125\n" +
	"\vstreet_name\x18\x03 \x03(\v2\x14.valhalla.StreetNameR\n" +
	"streetName\x12\x16\n" +
	"\x06length\x18\x04 \x01(\x02R\x06length\x12\x12\n" +
	"\x04time\x18\x05 \x01(\x01R\x04time\x12l\n" +
	"\x18begin_cardinal_direction\x18\x06 \x01(\x0e22.valhalla.DirectionsLeg.Maneuver.CardinalDirectionR\x16beginCardinalDirection\x12#\n" +
	"\rbegin_heading\x18\a \x01(\rR\fbeginHeading\x12*\n" +
	"\x11begin_shape_index\x18\b \x01(\rR\x0fbeginShapeIndex\x12&\n" +
	"\x0fend_shape_index\x18\t \x01(\rR\rendShapeIndex\x12#\n" +
	"\rportions_toll\x18\n" +
	" \x01(\bR\fportionsToll\x12)\n" +
	"\x10portions_unpaved\x18\v \x01(\bR\x0fportionsUnpaved\x12M\n" +
	"#verbal_transition_alert_instruction\x18\f \x01(\tR verbalTransitionAlertInstruction\x12I\n" +
	"!verbal_pre_transition_instruction\x18\r \x01(\tR\x1everbalPreTransitionInstruction\x12K\n" +
	"\"verbal_post_transition_instruction\x18\x0e \x01(\tR\x1fverbalPostTransitionInstruction\x12@\n" +
	"\x11begin_street_name\x18\x0f \x03(\v2\x14.valhalla.StreetNameR\x0fbeginStreetName\x12&\n" +
	"\x04sign\x18\x10 \x01(\v2\x12.valhalla.TripSignR\x04sign\x122\n" +
	"\x15roundabout_exit_count\x18\x11 \x01(\rR\x13roundaboutExitCount\x12-\n" +
	"\x12depart_instruction\x18\x12 \x01(\tR\x11departInstruction\x12:\n" +
	"\x19verbal_depart_instruction\x18\x13 \x01(\tR\x17verbalDepartInstruction\x12-\n" +
	"\x12arrive_instruction\x18\x14 \x01(\tR\x11arriveInstruction\x12:\n" +
	"\x19verbal_arrive_instruction\x18\x15 \x01(\tR\x17verbalArriveInstruction\x12=\n" +
	"\ftransit_info\x18\x16 \x01(\v2\x1a.valhalla.TransitRouteInfoR\vtransitInfo\x12(\n" +
	"\x10verbal_multi_cue\x18\x17 \x01(\bR\x0everbalMultiCue\x125\n" +
	"\vtravel_mode\x18\x18 \x01(\x0e2\x14.valhalla.TravelModeR\n" +
	"travelMode\x128\n" +
	"\fvehicle_type\x18\x19 \x01(\x0e2\x15.valhalla.VehicleTypeR\vvehicleType\x12A\n" +
	"\x0fpedestrian_type\x18\x1a \x01(\x0e2\x18.valhalla.PedestrianTypeR\x0epedestrianType\x128\n" +
	"\fbicycle_type\x18\x1b \x01(\x0e2\x15.valhalla.BicycleTypeR\vbicycleType\x128\n" +
	"\ftransit_type\x18\x1c \x01(\x0e2\x15.valhalla.TransitTypeR\vtransitType\x12(\n" +
	"\x10begin_path_index\x18\x1d \x01(\rR\x0ebeginPathIndex\x12$\n" +
	"\x0eend_path_index\x18\x1e \x01(\rR\fendPathIndex\x12\x1c\n" +
	"\n" +
	"to_stay_on\x18\x1f \x01(\bR\btoStayOn\x12U\n" +
	"\x1croundabout_exit_street_names\x18  \x03(\v2\x14.valhalla.StreetNameR\x19roundaboutExitStreetNames\x12\x1f\n" +
	"\vturn_degree\x18! \x01(\rR\n" +
	"turnDegree\x122\n" +
	"\x15has_time_restrictions\x18\" \x01(\bR\x13hasTimeRestrictions\x12K\n" +
	"\x0eguidance_views\x18# \x03(\v2$.valhalla.DirectionsLeg.GuidanceViewR\rguidanceViews\x12\\\n" +
	"\x11bss_maneuver_type\x18$ \x01(\x0e20.valhalla.DirectionsLeg.Maneuver.BssManeuverTypeR\x0fbssManeuverType\x12S\n" +
	"&verbal_succinct_transition_instruction\x18% \x01(\tR#verbalSuccinctTransitionInstruction\x129\n" +
	"\bbss_info\x18& \x01(\v2\x1e.valhalla.BikeShareStationInfoR\abssInfo\x12)\n" +
	"\x10portions_highway\x18' \x01(\bR\x0fportionsHighway\x12%\n" +
	"\x0eportions_ferry\x18( \x01(\bR\rportionsFerry\x125\n" +
	"\tlandmarks\x18) \x03(\v2\x17.valhalla.RouteLandmarkR\tlandmarks\"\x81\x01\n" +
	"\x11CardinalDirection\x12\n" +
	"\n" +
	"\x06kNorth\x10\x00\x12\x0e\n" +
	"\n" +
	"kNorthEast\x10\x01\x12\t\n" +
	"\x05kEast\x10\x02\x12\x0e\n" +
	"\n" +
	"kSouthEast\x10\x03\x12\n" +
	"\n" +
	"\x06kSouth\x10\x04\x12\x0e\n" +
	"\n" +
	"kSouthWest\x10\x05\x12\t\n" +
	"\x05kWest\x10\x06\x12\x0e\n" +
	"\n" +
	"kNorthWest\x10\a\"\xb4\x06\n" +
	"\x04Type\x12\t\n" +
	"\x05kNone\x10\x00\x12\n" +
	"\n" +
	"\x06kStart\x10\x01\x12\x0f\n" +
	"\vkStartRight\x10\x02\x12\x0e\n" +
	"\n" +
	"kStartLeft\x10\x03\x12\x10\n" +
	"\fkDestination\x10\x04\x12\x15\n" +
	"\x11kDestinationRight\x10\x05\x12\x14\n" +
	"\x10kDestinationLeft\x10\x06\x12\f\n" +
	"\bkBecomes\x10\a\x12\r\n" +
	"\tkContinue\x10\b\x12\x10\n" +
	"\fkSlightRight\x10\t\x12\n" +
	"\n" +
	"\x06kRight\x10\n" +
	"\x12\x0f\n" +
	"\vkSharpRight\x10\v\x12\x0f\n" +
	"\vkUturnRight\x10\f\x12\x0e\n" +
	"\n" +
	"kUturnLeft\x10\r\x12\x0e\n" +
	"\n" +
	"kSharpLeft\x10\x0e\x12\t\n" +
	"\x05kLeft\x10\x0f\x12\x0f\n" +
	"\vkSlightLeft\x10\x10\x12\x11\n" +
	"\rkRampStraight\x10\x11\x12\x0e\n" +
	"\n" +
	"kRampRight\x10\x12\x12\r\n" +
	"\tkRampLeft\x10\x13\x12\x0e\n" +
	"\n" +
	"kExitRight\x10\x14\x12\r\n" +
	"\tkExitLeft\x10\x15\x12\x11\n" +
	"\rkStayStraight\x10\x16\x12\x0e\n" +
	"\n" +
	"kStayRight\x10\x17\x12\r\n" +
	"\tkStayLeft\x10\x18\x12\n" +
	"\n" +
	"\x06kMerge\x10\x19\x12\x14\n" +
	"\x10kRoundaboutEnter\x10\x1a\x12\x13\n" +
	"\x0fkRoundaboutExit\x10\x1b\x12\x0f\n" +
	"\vkFerryEnter\x10\x1c\x12\x0e\n" +
	"\n" +
	"kFerryExit\x10\x1d\x12\f\n" +
	"\bkTransit\x10\x1e\x12\x14\n" +
	"\x10kTransitTransfer\x10\x1f\x12\x14\n" +
	"\x10kTransitRemainOn\x10 \x12\x1b\n" +
	"\x17kTransitConnectionStart\x10!\x12\x1e\n" +
	"\x1akTransitConnectionTransfer\x10\"\x12!\n" +
	"\x1dkTransitConnectionDestination\x10#\x12%\n" +
	"!kPostTransitConnectionDestination\x10$\x12\x0f\n" +
	"\vkMergeRight\x10%\x12\x0e\n" +
	"\n" +
	"kMergeLeft\x10&\x12\x12\n" +
	"\x0ekElevatorEnter\x10'\x12\x0f\n" +
	"\vkStepsEnter\x10(\x12\x13\n" +
	"\x0fkEscalatorEnter\x10)\x12\x12\n" +
	"\x0ekBuildingEnter\x10*\x12\x11\n" +
	"\rkBuildingExit\x10+\"X\n" +
	"\x0fBssManeuverType\x12\x0f\n" +
	"\vkNoneAction\x10\x00\x12\x18\n" +
	"\x14kRentBikeAtBikeShare\x10\x01\x12\x1a\n" +
	"\x16kReturnBikeAtBikeShare\x10\x02\">\n" +
	"\x0fDirectionsRoute\x12+\n" +
	"\x04legs\x18\x01 \x03(\v2\x17.valhalla.DirectionsLegR\x04legs\"?\n" +
	"\n" +
	"Directions\x121\n" +
	"\x06routes\x18\x01 \x03(\v2\x19.valhalla.DirectionsRouteR\x06routesB:H\x03Z6matching-engine/internal/adapter/valhalla/client/pb;pbP\x00P\x01b\x06proto3"

var (
	file_directions_proto_rawDescOnce sync.Once
	file_directions_proto_rawDescData []byte
)

func file_directions_proto_rawDescGZIP() []byte {
	file_directions_proto_rawDescOnce.Do(func() {
		file_directions_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_directions_proto_rawDesc), len(file_directions_proto_rawDesc)))
	})
	return file_directions_proto_rawDescData
}

var file_directions_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_directions_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_directions_proto_goTypes = []any{
	(DirectionsLeg_GuidanceView_Type)(0),          // 0: valhalla.DirectionsLeg.GuidanceView.Type
	(DirectionsLeg_Maneuver_CardinalDirection)(0), // 1: valhalla.DirectionsLeg.Maneuver.CardinalDirection
	(DirectionsLeg_Maneuver_Type)(0),              // 2: valhalla.DirectionsLeg.Maneuver.Type
	(DirectionsLeg_Maneuver_BssManeuverType)(0),   // 3: valhalla.DirectionsLeg.Maneuver.BssManeuverType
	(*DirectionsLeg)(nil),                         // 4: valhalla.DirectionsLeg
	(*DirectionsRoute)(nil),                       // 5: valhalla.DirectionsRoute
	(*Directions)(nil),                            // 6: valhalla.Directions
	(*DirectionsLeg_GuidanceView)(nil),            // 7: valhalla.DirectionsLeg.GuidanceView
	(*DirectionsLeg_Maneuver)(nil),                // 8: valhalla.DirectionsLeg.Maneuver
	(*Location)(nil),                              // 9: valhalla.Location
	(*Summary)(nil),                               // 10: valhalla.Summary
	(*LevelChange)(nil),                           // 11: valhalla.LevelChange
	(*StreetName)(nil),                            // 12: valhalla.StreetName
	(*TripSign)(nil),                              // 13: valhalla.TripSign
	(*TransitRouteInfo)(nil),                      // 14: valhalla.TransitRouteInfo
	(TravelMode)(0),                               // 15: valhalla.TravelMode
	(VehicleType)(0),                              // 16: valhalla.VehicleType
	(PedestrianType)(0),                           // 17: valhalla.PedestrianType
	(BicycleType)(0),                              // 18: valhalla.BicycleType
	(TransitType)(0),                              // 19: valhalla.TransitType
	(*BikeShareStationInfo)(nil),                  // 20: valhalla.BikeShareStationInfo
	(*RouteLandmark)(nil),                         // 21: valhalla.RouteLandmark
}
var file_directions_proto_depIdxs = []int32{
	9,  // 0: valhalla.DirectionsLeg.location:type_name -> valhalla.Location
	10, // 1: valhalla.DirectionsLeg.summary:type_name -> valhalla.Summary
	8,  // 2: valhalla.DirectionsLeg.maneuver:type_name -> valhalla.DirectionsLeg.Maneuver
	11, // 3: valhalla.DirectionsLeg.level_changes:type_name -> valhalla.LevelChange
	4,  // 4: valhalla.DirectionsRoute.legs:type_name -> valhalla.DirectionsLeg
	5,  // 5: valhalla.Directions.routes:type_name -> valhalla.DirectionsRoute
	0,  // 6: valhalla.DirectionsLeg.GuidanceView.type:type_name -> valhalla.DirectionsLeg.GuidanceView.Type
	2,  // 7: valhalla.DirectionsLeg.Maneuver.type:type_name -> valhalla.DirectionsLeg.Maneuver.Type
	12, // 8: valhalla.DirectionsLeg.Maneuver.street_name:type_name -> valhalla.StreetName
	1,  // 9: valhalla.DirectionsLeg.Maneuver.begin_cardinal_direction:type_name -> valhalla.DirectionsLeg.Maneuver.CardinalDirection
	12, // 10: valhalla.DirectionsLeg.Maneuver.begin_street_name:type_name -> valhalla.StreetName
	13, // 11: valhalla.DirectionsLeg.Maneuver.sign:type_name -> valhalla.TripSign
	14, // 12: valhalla.DirectionsLeg.Maneuver.transit_info:type_name -> valhalla.TransitRouteInfo
	15, // 13: valhalla.DirectionsLeg.Maneuver.travel_mode:type_name -> valhalla.TravelMode
	16, // 14: valhalla.DirectionsLeg.Maneuver.vehicle_type:type_name -> valhalla.VehicleType
	17, // 15: valhalla.DirectionsLeg.Maneuver.pedestrian_type:type_name -> valhalla.PedestrianType
	18, // 16: valhalla.DirectionsLeg.Maneuver.bicycle_type:type_name -> valhalla.BicycleType
	19, // 17: valhalla.DirectionsLeg.Maneuver.transit_type:type_name -> valhalla.TransitType
	12, // 18: valhalla.DirectionsLeg.Maneuver.roundabout_exit_street_names:type_name -> valhalla.StreetName
	7,  // 19: valhalla.DirectionsLeg.Maneuver.guidance_views:type_name -> valhalla.DirectionsLeg.GuidanceView
	3,  // 20: valhalla.DirectionsLeg.Maneuver.bss_maneuver_type:type_name -> valhalla.DirectionsLeg.Maneuver.BssManeuverType
	20, // 21: valhalla.DirectionsLeg.Maneuver.bss_info:type_name -> valhalla.BikeShareStationInfo
	21, // 22: valhalla.DirectionsLeg.Maneuver.landmarks:type_name -> valhalla.RouteLandmark
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_directions_proto_init() }
func file_directions_proto_init() {
	if File_directions_proto != nil {
		return
	}
	file_common_proto_init()
	file_sign_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_directions_proto_rawDesc), len(file_directions_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_directions_proto_goTypes,
		DependencyIndexes: file_directions_proto_depIdxs,
		EnumInfos:         file_directions_proto_enumTypes,
		MessageInfos:      file_directions_proto_msgTypes,
	}.Build()
	File_directions_proto = out.File
	file_directions_proto_goTypes = nil
	file_directions_proto_depIdxs = nil
}
